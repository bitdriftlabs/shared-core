// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_COMMON_BITDRIFT_PUBLIC_FBS_COMMON_V1_H_
#define FLATBUFFERS_GENERATED_COMMON_BITDRIFT_PUBLIC_FBS_COMMON_V1_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 9 &&
              FLATBUFFERS_VERSION_REVISION == 23,
             "Non-compatible flatbuffers version included");

namespace bitdrift_public {
namespace fbs {
namespace common {
namespace v1 {

struct StringData;
struct StringDataBuilder;

struct BinaryData;
struct BinaryDataBuilder;

struct Field;
struct FieldBuilder;

struct Timestamp;
struct TimestampBuilder;

inline const ::flatbuffers::TypeTable *StringDataTypeTable();

inline const ::flatbuffers::TypeTable *BinaryDataTypeTable();

inline const ::flatbuffers::TypeTable *FieldTypeTable();

inline const ::flatbuffers::TypeTable *TimestampTypeTable();

enum Data : uint8_t {
  Data_NONE = 0,
  Data_string_data = 1,
  Data_binary_data = 2,
  Data_MIN = Data_NONE,
  Data_MAX = Data_binary_data
};

inline const Data (&EnumValuesData())[3] {
  static const Data values[] = {
    Data_NONE,
    Data_string_data,
    Data_binary_data
  };
  return values;
}

inline const char * const *EnumNamesData() {
  static const char * const names[4] = {
    "NONE",
    "string_data",
    "binary_data",
    nullptr
  };
  return names;
}

inline const char *EnumNameData(Data e) {
  if (::flatbuffers::IsOutRange(e, Data_NONE, Data_binary_data)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesData()[index];
}

template<typename T> struct DataTraits {
  static const Data enum_value = Data_NONE;
};

template<> struct DataTraits<bitdrift_public::fbs::common::v1::StringData> {
  static const Data enum_value = Data_string_data;
};

template<> struct DataTraits<bitdrift_public::fbs::common::v1::BinaryData> {
  static const Data enum_value = Data_binary_data;
};

bool VerifyData(::flatbuffers::Verifier &verifier, const void *obj, Data type);
bool VerifyDataVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct StringData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef StringDataBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return StringDataTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4
  };
  const ::flatbuffers::String *data() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_DATA) &&
           verifier.VerifyString(data()) &&
           verifier.EndTable();
  }
};

struct StringDataBuilder {
  typedef StringData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_data(::flatbuffers::Offset<::flatbuffers::String> data) {
    fbb_.AddOffset(StringData::VT_DATA, data);
  }
  explicit StringDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<StringData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<StringData>(end);
    fbb_.Required(o, StringData::VT_DATA);
    return o;
  }
};

inline ::flatbuffers::Offset<StringData> CreateStringData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> data = 0) {
  StringDataBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<StringData> CreateStringDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *data = nullptr) {
  auto data__ = data ? _fbb.CreateString(data) : 0;
  return bitdrift_public::fbs::common::v1::CreateStringData(
      _fbb,
      data__);
}

struct BinaryData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BinaryDataBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return BinaryDataTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA_TYPE = 4,
    VT_DATA = 6
  };
  const ::flatbuffers::String *data_type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DATA_TYPE);
  }
  const ::flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA_TYPE) &&
           verifier.VerifyString(data_type()) &&
           VerifyOffsetRequired(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct BinaryDataBuilder {
  typedef BinaryData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_data_type(::flatbuffers::Offset<::flatbuffers::String> data_type) {
    fbb_.AddOffset(BinaryData::VT_DATA_TYPE, data_type);
  }
  void add_data(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(BinaryData::VT_DATA, data);
  }
  explicit BinaryDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<BinaryData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<BinaryData>(end);
    fbb_.Required(o, BinaryData::VT_DATA);
    return o;
  }
};

inline ::flatbuffers::Offset<BinaryData> CreateBinaryData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> data_type = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data = 0) {
  BinaryDataBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_data_type(data_type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<BinaryData> CreateBinaryDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *data_type = nullptr,
    const std::vector<uint8_t> *data = nullptr) {
  auto data_type__ = data_type ? _fbb.CreateString(data_type) : 0;
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return bitdrift_public::fbs::common::v1::CreateBinaryData(
      _fbb,
      data_type__,
      data__);
}

struct Field FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FieldBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return FieldTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEY = 4,
    VT_VALUE_TYPE = 6,
    VT_VALUE = 8
  };
  const ::flatbuffers::String *key() const {
    return GetPointer<const ::flatbuffers::String *>(VT_KEY);
  }
  bitdrift_public::fbs::common::v1::Data value_type() const {
    return static_cast<bitdrift_public::fbs::common::v1::Data>(GetField<uint8_t>(VT_VALUE_TYPE, 0));
  }
  const void *value() const {
    return GetPointer<const void *>(VT_VALUE);
  }
  template<typename T> const T *value_as() const;
  const bitdrift_public::fbs::common::v1::StringData *value_as_string_data() const {
    return value_type() == bitdrift_public::fbs::common::v1::Data_string_data ? static_cast<const bitdrift_public::fbs::common::v1::StringData *>(value()) : nullptr;
  }
  const bitdrift_public::fbs::common::v1::BinaryData *value_as_binary_data() const {
    return value_type() == bitdrift_public::fbs::common::v1::Data_binary_data ? static_cast<const bitdrift_public::fbs::common::v1::BinaryData *>(value()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_KEY) &&
           verifier.VerifyString(key()) &&
           VerifyField<uint8_t>(verifier, VT_VALUE_TYPE, 1) &&
           VerifyOffsetRequired(verifier, VT_VALUE) &&
           VerifyData(verifier, value(), value_type()) &&
           verifier.EndTable();
  }
};

template<> inline const bitdrift_public::fbs::common::v1::StringData *Field::value_as<bitdrift_public::fbs::common::v1::StringData>() const {
  return value_as_string_data();
}

template<> inline const bitdrift_public::fbs::common::v1::BinaryData *Field::value_as<bitdrift_public::fbs::common::v1::BinaryData>() const {
  return value_as_binary_data();
}

struct FieldBuilder {
  typedef Field Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_key(::flatbuffers::Offset<::flatbuffers::String> key) {
    fbb_.AddOffset(Field::VT_KEY, key);
  }
  void add_value_type(bitdrift_public::fbs::common::v1::Data value_type) {
    fbb_.AddElement<uint8_t>(Field::VT_VALUE_TYPE, static_cast<uint8_t>(value_type), 0);
  }
  void add_value(::flatbuffers::Offset<void> value) {
    fbb_.AddOffset(Field::VT_VALUE, value);
  }
  explicit FieldBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Field> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Field>(end);
    fbb_.Required(o, Field::VT_KEY);
    fbb_.Required(o, Field::VT_VALUE);
    return o;
  }
};

inline ::flatbuffers::Offset<Field> CreateField(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> key = 0,
    bitdrift_public::fbs::common::v1::Data value_type = bitdrift_public::fbs::common::v1::Data_NONE,
    ::flatbuffers::Offset<void> value = 0) {
  FieldBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_key(key);
  builder_.add_value_type(value_type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Field> CreateFieldDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *key = nullptr,
    bitdrift_public::fbs::common::v1::Data value_type = bitdrift_public::fbs::common::v1::Data_NONE,
    ::flatbuffers::Offset<void> value = 0) {
  auto key__ = key ? _fbb.CreateString(key) : 0;
  return bitdrift_public::fbs::common::v1::CreateField(
      _fbb,
      key__,
      value_type,
      value);
}

struct Timestamp FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TimestampBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return TimestampTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SECONDS = 4,
    VT_NANOS = 6
  };
  int64_t seconds() const {
    return GetField<int64_t>(VT_SECONDS, 0);
  }
  int32_t nanos() const {
    return GetField<int32_t>(VT_NANOS, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_SECONDS, 8) &&
           VerifyField<int32_t>(verifier, VT_NANOS, 4) &&
           verifier.EndTable();
  }
};

struct TimestampBuilder {
  typedef Timestamp Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_seconds(int64_t seconds) {
    fbb_.AddElement<int64_t>(Timestamp::VT_SECONDS, seconds, 0);
  }
  void add_nanos(int32_t nanos) {
    fbb_.AddElement<int32_t>(Timestamp::VT_NANOS, nanos, 0);
  }
  explicit TimestampBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Timestamp> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Timestamp>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Timestamp> CreateTimestamp(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t seconds = 0,
    int32_t nanos = 0) {
  TimestampBuilder builder_(_fbb);
  builder_.add_seconds(seconds);
  builder_.add_nanos(nanos);
  return builder_.Finish();
}

inline bool VerifyData(::flatbuffers::Verifier &verifier, const void *obj, Data type) {
  switch (type) {
    case Data_NONE: {
      return true;
    }
    case Data_string_data: {
      auto ptr = reinterpret_cast<const bitdrift_public::fbs::common::v1::StringData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Data_binary_data: {
      auto ptr = reinterpret_cast<const bitdrift_public::fbs::common::v1::BinaryData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyDataVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyData(
        verifier,  values->Get(i), types->GetEnum<Data>(i))) {
      return false;
    }
  }
  return true;
}

inline const ::flatbuffers::TypeTable *DataTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_SEQUENCE, 0, -1 },
    { ::flatbuffers::ET_SEQUENCE, 0, 0 },
    { ::flatbuffers::ET_SEQUENCE, 0, 1 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    bitdrift_public::fbs::common::v1::StringDataTypeTable,
    bitdrift_public::fbs::common::v1::BinaryDataTypeTable
  };
  static const char * const names[] = {
    "NONE",
    "string_data",
    "binary_data"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_UNION, 3, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *StringDataTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_STRING, 0, -1 }
  };
  static const char * const names[] = {
    "data"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 1, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *BinaryDataTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_UCHAR, 1, -1 }
  };
  static const char * const names[] = {
    "data_type",
    "data"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 2, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *FieldTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_UTYPE, 0, 0 },
    { ::flatbuffers::ET_SEQUENCE, 0, 0 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    bitdrift_public::fbs::common::v1::DataTypeTable
  };
  static const char * const names[] = {
    "key",
    "value_type",
    "value"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 3, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *TimestampTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_LONG, 0, -1 },
    { ::flatbuffers::ET_INT, 0, -1 }
  };
  static const char * const names[] = {
    "seconds",
    "nanos"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 2, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

}  // namespace v1
}  // namespace common
}  // namespace fbs
}  // namespace bitdrift_public

#endif  // FLATBUFFERS_GENERATED_COMMON_BITDRIFT_PUBLIC_FBS_COMMON_V1_H_
