// This file is generated by rust-protobuf 4.0.0-alpha.0. Do not edit
// .proto file is parsed by protoc 27.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `validate/validate.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_4_0_0_ALPHA_0;

// @@protoc_insertion_point(message:validate.FieldRules)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct FieldRules {
    // message fields
    // @@protoc_insertion_point(field:validate.FieldRules.message)
    pub message: ::protobuf::MessageField<MessageRules>,
    // message oneof groups
    pub type_: ::std::option::Option<field_rules::Type>,
    // special fields
    // @@protoc_insertion_point(special_field:validate.FieldRules.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FieldRules {
    fn default() -> &'a FieldRules {
        <FieldRules as ::protobuf::Message>::default_instance()
    }
}

impl FieldRules {
    pub fn new() -> FieldRules {
        ::std::default::Default::default()
    }

    // optional .validate.FloatRules float = 1;

    pub fn float(&self) -> &FloatRules {
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Float(ref v)) => v,
            _ => <FloatRules as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_float(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_float(&self) -> bool {
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Float(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_float(&mut self, v: FloatRules) {
        self.type_ = ::std::option::Option::Some(field_rules::Type::Float(v))
    }

    // Mutable pointer to the field.
    pub fn mut_float(&mut self) -> &mut FloatRules {
        if let ::std::option::Option::Some(field_rules::Type::Float(_)) = self.type_ {
        } else {
            self.type_ = ::std::option::Option::Some(field_rules::Type::Float(FloatRules::new()));
        }
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Float(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_float(&mut self) -> FloatRules {
        if self.has_float() {
            match self.type_.take() {
                ::std::option::Option::Some(field_rules::Type::Float(v)) => v,
                _ => panic!(),
            }
        } else {
            FloatRules::new()
        }
    }

    // optional .validate.DoubleRules double = 2;

    pub fn double(&self) -> &DoubleRules {
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Double(ref v)) => v,
            _ => <DoubleRules as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_double(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_double(&self) -> bool {
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Double(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_double(&mut self, v: DoubleRules) {
        self.type_ = ::std::option::Option::Some(field_rules::Type::Double(v))
    }

    // Mutable pointer to the field.
    pub fn mut_double(&mut self) -> &mut DoubleRules {
        if let ::std::option::Option::Some(field_rules::Type::Double(_)) = self.type_ {
        } else {
            self.type_ = ::std::option::Option::Some(field_rules::Type::Double(DoubleRules::new()));
        }
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Double(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_double(&mut self) -> DoubleRules {
        if self.has_double() {
            match self.type_.take() {
                ::std::option::Option::Some(field_rules::Type::Double(v)) => v,
                _ => panic!(),
            }
        } else {
            DoubleRules::new()
        }
    }

    // optional .validate.Int32Rules int32 = 3;

    pub fn int32(&self) -> &Int32Rules {
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Int32(ref v)) => v,
            _ => <Int32Rules as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_int32(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_int32(&self) -> bool {
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Int32(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_int32(&mut self, v: Int32Rules) {
        self.type_ = ::std::option::Option::Some(field_rules::Type::Int32(v))
    }

    // Mutable pointer to the field.
    pub fn mut_int32(&mut self) -> &mut Int32Rules {
        if let ::std::option::Option::Some(field_rules::Type::Int32(_)) = self.type_ {
        } else {
            self.type_ = ::std::option::Option::Some(field_rules::Type::Int32(Int32Rules::new()));
        }
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Int32(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_int32(&mut self) -> Int32Rules {
        if self.has_int32() {
            match self.type_.take() {
                ::std::option::Option::Some(field_rules::Type::Int32(v)) => v,
                _ => panic!(),
            }
        } else {
            Int32Rules::new()
        }
    }

    // optional .validate.Int64Rules int64 = 4;

    pub fn int64(&self) -> &Int64Rules {
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Int64(ref v)) => v,
            _ => <Int64Rules as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_int64(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_int64(&self) -> bool {
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Int64(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_int64(&mut self, v: Int64Rules) {
        self.type_ = ::std::option::Option::Some(field_rules::Type::Int64(v))
    }

    // Mutable pointer to the field.
    pub fn mut_int64(&mut self) -> &mut Int64Rules {
        if let ::std::option::Option::Some(field_rules::Type::Int64(_)) = self.type_ {
        } else {
            self.type_ = ::std::option::Option::Some(field_rules::Type::Int64(Int64Rules::new()));
        }
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Int64(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_int64(&mut self) -> Int64Rules {
        if self.has_int64() {
            match self.type_.take() {
                ::std::option::Option::Some(field_rules::Type::Int64(v)) => v,
                _ => panic!(),
            }
        } else {
            Int64Rules::new()
        }
    }

    // optional .validate.UInt32Rules uint32 = 5;

    pub fn uint32(&self) -> &UInt32Rules {
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Uint32(ref v)) => v,
            _ => <UInt32Rules as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_uint32(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_uint32(&self) -> bool {
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Uint32(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_uint32(&mut self, v: UInt32Rules) {
        self.type_ = ::std::option::Option::Some(field_rules::Type::Uint32(v))
    }

    // Mutable pointer to the field.
    pub fn mut_uint32(&mut self) -> &mut UInt32Rules {
        if let ::std::option::Option::Some(field_rules::Type::Uint32(_)) = self.type_ {
        } else {
            self.type_ = ::std::option::Option::Some(field_rules::Type::Uint32(UInt32Rules::new()));
        }
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Uint32(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_uint32(&mut self) -> UInt32Rules {
        if self.has_uint32() {
            match self.type_.take() {
                ::std::option::Option::Some(field_rules::Type::Uint32(v)) => v,
                _ => panic!(),
            }
        } else {
            UInt32Rules::new()
        }
    }

    // optional .validate.UInt64Rules uint64 = 6;

    pub fn uint64(&self) -> &UInt64Rules {
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Uint64(ref v)) => v,
            _ => <UInt64Rules as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_uint64(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_uint64(&self) -> bool {
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Uint64(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_uint64(&mut self, v: UInt64Rules) {
        self.type_ = ::std::option::Option::Some(field_rules::Type::Uint64(v))
    }

    // Mutable pointer to the field.
    pub fn mut_uint64(&mut self) -> &mut UInt64Rules {
        if let ::std::option::Option::Some(field_rules::Type::Uint64(_)) = self.type_ {
        } else {
            self.type_ = ::std::option::Option::Some(field_rules::Type::Uint64(UInt64Rules::new()));
        }
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Uint64(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_uint64(&mut self) -> UInt64Rules {
        if self.has_uint64() {
            match self.type_.take() {
                ::std::option::Option::Some(field_rules::Type::Uint64(v)) => v,
                _ => panic!(),
            }
        } else {
            UInt64Rules::new()
        }
    }

    // optional .validate.SInt32Rules sint32 = 7;

    pub fn sint32(&self) -> &SInt32Rules {
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Sint32(ref v)) => v,
            _ => <SInt32Rules as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_sint32(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_sint32(&self) -> bool {
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Sint32(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_sint32(&mut self, v: SInt32Rules) {
        self.type_ = ::std::option::Option::Some(field_rules::Type::Sint32(v))
    }

    // Mutable pointer to the field.
    pub fn mut_sint32(&mut self) -> &mut SInt32Rules {
        if let ::std::option::Option::Some(field_rules::Type::Sint32(_)) = self.type_ {
        } else {
            self.type_ = ::std::option::Option::Some(field_rules::Type::Sint32(SInt32Rules::new()));
        }
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Sint32(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_sint32(&mut self) -> SInt32Rules {
        if self.has_sint32() {
            match self.type_.take() {
                ::std::option::Option::Some(field_rules::Type::Sint32(v)) => v,
                _ => panic!(),
            }
        } else {
            SInt32Rules::new()
        }
    }

    // optional .validate.SInt64Rules sint64 = 8;

    pub fn sint64(&self) -> &SInt64Rules {
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Sint64(ref v)) => v,
            _ => <SInt64Rules as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_sint64(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_sint64(&self) -> bool {
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Sint64(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_sint64(&mut self, v: SInt64Rules) {
        self.type_ = ::std::option::Option::Some(field_rules::Type::Sint64(v))
    }

    // Mutable pointer to the field.
    pub fn mut_sint64(&mut self) -> &mut SInt64Rules {
        if let ::std::option::Option::Some(field_rules::Type::Sint64(_)) = self.type_ {
        } else {
            self.type_ = ::std::option::Option::Some(field_rules::Type::Sint64(SInt64Rules::new()));
        }
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Sint64(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_sint64(&mut self) -> SInt64Rules {
        if self.has_sint64() {
            match self.type_.take() {
                ::std::option::Option::Some(field_rules::Type::Sint64(v)) => v,
                _ => panic!(),
            }
        } else {
            SInt64Rules::new()
        }
    }

    // optional .validate.Fixed32Rules fixed32 = 9;

    pub fn fixed32(&self) -> &Fixed32Rules {
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Fixed32(ref v)) => v,
            _ => <Fixed32Rules as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_fixed32(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_fixed32(&self) -> bool {
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Fixed32(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_fixed32(&mut self, v: Fixed32Rules) {
        self.type_ = ::std::option::Option::Some(field_rules::Type::Fixed32(v))
    }

    // Mutable pointer to the field.
    pub fn mut_fixed32(&mut self) -> &mut Fixed32Rules {
        if let ::std::option::Option::Some(field_rules::Type::Fixed32(_)) = self.type_ {
        } else {
            self.type_ = ::std::option::Option::Some(field_rules::Type::Fixed32(Fixed32Rules::new()));
        }
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Fixed32(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_fixed32(&mut self) -> Fixed32Rules {
        if self.has_fixed32() {
            match self.type_.take() {
                ::std::option::Option::Some(field_rules::Type::Fixed32(v)) => v,
                _ => panic!(),
            }
        } else {
            Fixed32Rules::new()
        }
    }

    // optional .validate.Fixed64Rules fixed64 = 10;

    pub fn fixed64(&self) -> &Fixed64Rules {
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Fixed64(ref v)) => v,
            _ => <Fixed64Rules as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_fixed64(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_fixed64(&self) -> bool {
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Fixed64(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_fixed64(&mut self, v: Fixed64Rules) {
        self.type_ = ::std::option::Option::Some(field_rules::Type::Fixed64(v))
    }

    // Mutable pointer to the field.
    pub fn mut_fixed64(&mut self) -> &mut Fixed64Rules {
        if let ::std::option::Option::Some(field_rules::Type::Fixed64(_)) = self.type_ {
        } else {
            self.type_ = ::std::option::Option::Some(field_rules::Type::Fixed64(Fixed64Rules::new()));
        }
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Fixed64(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_fixed64(&mut self) -> Fixed64Rules {
        if self.has_fixed64() {
            match self.type_.take() {
                ::std::option::Option::Some(field_rules::Type::Fixed64(v)) => v,
                _ => panic!(),
            }
        } else {
            Fixed64Rules::new()
        }
    }

    // optional .validate.SFixed32Rules sfixed32 = 11;

    pub fn sfixed32(&self) -> &SFixed32Rules {
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Sfixed32(ref v)) => v,
            _ => <SFixed32Rules as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_sfixed32(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_sfixed32(&self) -> bool {
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Sfixed32(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_sfixed32(&mut self, v: SFixed32Rules) {
        self.type_ = ::std::option::Option::Some(field_rules::Type::Sfixed32(v))
    }

    // Mutable pointer to the field.
    pub fn mut_sfixed32(&mut self) -> &mut SFixed32Rules {
        if let ::std::option::Option::Some(field_rules::Type::Sfixed32(_)) = self.type_ {
        } else {
            self.type_ = ::std::option::Option::Some(field_rules::Type::Sfixed32(SFixed32Rules::new()));
        }
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Sfixed32(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_sfixed32(&mut self) -> SFixed32Rules {
        if self.has_sfixed32() {
            match self.type_.take() {
                ::std::option::Option::Some(field_rules::Type::Sfixed32(v)) => v,
                _ => panic!(),
            }
        } else {
            SFixed32Rules::new()
        }
    }

    // optional .validate.SFixed64Rules sfixed64 = 12;

    pub fn sfixed64(&self) -> &SFixed64Rules {
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Sfixed64(ref v)) => v,
            _ => <SFixed64Rules as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_sfixed64(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_sfixed64(&self) -> bool {
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Sfixed64(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_sfixed64(&mut self, v: SFixed64Rules) {
        self.type_ = ::std::option::Option::Some(field_rules::Type::Sfixed64(v))
    }

    // Mutable pointer to the field.
    pub fn mut_sfixed64(&mut self) -> &mut SFixed64Rules {
        if let ::std::option::Option::Some(field_rules::Type::Sfixed64(_)) = self.type_ {
        } else {
            self.type_ = ::std::option::Option::Some(field_rules::Type::Sfixed64(SFixed64Rules::new()));
        }
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Sfixed64(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_sfixed64(&mut self) -> SFixed64Rules {
        if self.has_sfixed64() {
            match self.type_.take() {
                ::std::option::Option::Some(field_rules::Type::Sfixed64(v)) => v,
                _ => panic!(),
            }
        } else {
            SFixed64Rules::new()
        }
    }

    // optional .validate.BoolRules bool = 13;

    pub fn bool(&self) -> &BoolRules {
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Bool(ref v)) => v,
            _ => <BoolRules as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_bool(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_bool(&self) -> bool {
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Bool(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_bool(&mut self, v: BoolRules) {
        self.type_ = ::std::option::Option::Some(field_rules::Type::Bool(v))
    }

    // Mutable pointer to the field.
    pub fn mut_bool(&mut self) -> &mut BoolRules {
        if let ::std::option::Option::Some(field_rules::Type::Bool(_)) = self.type_ {
        } else {
            self.type_ = ::std::option::Option::Some(field_rules::Type::Bool(BoolRules::new()));
        }
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Bool(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_bool(&mut self) -> BoolRules {
        if self.has_bool() {
            match self.type_.take() {
                ::std::option::Option::Some(field_rules::Type::Bool(v)) => v,
                _ => panic!(),
            }
        } else {
            BoolRules::new()
        }
    }

    // optional .validate.StringRules string = 14;

    pub fn string(&self) -> &StringRules {
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::String(ref v)) => v,
            _ => <StringRules as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_string(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_string(&self) -> bool {
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::String(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_string(&mut self, v: StringRules) {
        self.type_ = ::std::option::Option::Some(field_rules::Type::String(v))
    }

    // Mutable pointer to the field.
    pub fn mut_string(&mut self) -> &mut StringRules {
        if let ::std::option::Option::Some(field_rules::Type::String(_)) = self.type_ {
        } else {
            self.type_ = ::std::option::Option::Some(field_rules::Type::String(StringRules::new()));
        }
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::String(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_string(&mut self) -> StringRules {
        if self.has_string() {
            match self.type_.take() {
                ::std::option::Option::Some(field_rules::Type::String(v)) => v,
                _ => panic!(),
            }
        } else {
            StringRules::new()
        }
    }

    // optional .validate.BytesRules bytes = 15;

    pub fn bytes(&self) -> &BytesRules {
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Bytes(ref v)) => v,
            _ => <BytesRules as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_bytes(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_bytes(&self) -> bool {
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Bytes(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_bytes(&mut self, v: BytesRules) {
        self.type_ = ::std::option::Option::Some(field_rules::Type::Bytes(v))
    }

    // Mutable pointer to the field.
    pub fn mut_bytes(&mut self) -> &mut BytesRules {
        if let ::std::option::Option::Some(field_rules::Type::Bytes(_)) = self.type_ {
        } else {
            self.type_ = ::std::option::Option::Some(field_rules::Type::Bytes(BytesRules::new()));
        }
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Bytes(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_bytes(&mut self) -> BytesRules {
        if self.has_bytes() {
            match self.type_.take() {
                ::std::option::Option::Some(field_rules::Type::Bytes(v)) => v,
                _ => panic!(),
            }
        } else {
            BytesRules::new()
        }
    }

    // optional .validate.EnumRules enum = 16;

    pub fn enum_(&self) -> &EnumRules {
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Enum(ref v)) => v,
            _ => <EnumRules as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_enum_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_enum(&self) -> bool {
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Enum(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_enum(&mut self, v: EnumRules) {
        self.type_ = ::std::option::Option::Some(field_rules::Type::Enum(v))
    }

    // Mutable pointer to the field.
    pub fn mut_enum(&mut self) -> &mut EnumRules {
        if let ::std::option::Option::Some(field_rules::Type::Enum(_)) = self.type_ {
        } else {
            self.type_ = ::std::option::Option::Some(field_rules::Type::Enum(EnumRules::new()));
        }
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Enum(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_enum_(&mut self) -> EnumRules {
        if self.has_enum() {
            match self.type_.take() {
                ::std::option::Option::Some(field_rules::Type::Enum(v)) => v,
                _ => panic!(),
            }
        } else {
            EnumRules::new()
        }
    }

    // optional .validate.RepeatedRules repeated = 18;

    pub fn repeated(&self) -> &RepeatedRules {
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Repeated(ref v)) => v,
            _ => <RepeatedRules as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_repeated(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_repeated(&self) -> bool {
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Repeated(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_repeated(&mut self, v: RepeatedRules) {
        self.type_ = ::std::option::Option::Some(field_rules::Type::Repeated(v))
    }

    // Mutable pointer to the field.
    pub fn mut_repeated(&mut self) -> &mut RepeatedRules {
        if let ::std::option::Option::Some(field_rules::Type::Repeated(_)) = self.type_ {
        } else {
            self.type_ = ::std::option::Option::Some(field_rules::Type::Repeated(RepeatedRules::new()));
        }
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Repeated(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_repeated(&mut self) -> RepeatedRules {
        if self.has_repeated() {
            match self.type_.take() {
                ::std::option::Option::Some(field_rules::Type::Repeated(v)) => v,
                _ => panic!(),
            }
        } else {
            RepeatedRules::new()
        }
    }

    // optional .validate.MapRules map = 19;

    pub fn map(&self) -> &MapRules {
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Map(ref v)) => v,
            _ => <MapRules as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_map(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_map(&self) -> bool {
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Map(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_map(&mut self, v: MapRules) {
        self.type_ = ::std::option::Option::Some(field_rules::Type::Map(v))
    }

    // Mutable pointer to the field.
    pub fn mut_map(&mut self) -> &mut MapRules {
        if let ::std::option::Option::Some(field_rules::Type::Map(_)) = self.type_ {
        } else {
            self.type_ = ::std::option::Option::Some(field_rules::Type::Map(MapRules::new()));
        }
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Map(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_map(&mut self) -> MapRules {
        if self.has_map() {
            match self.type_.take() {
                ::std::option::Option::Some(field_rules::Type::Map(v)) => v,
                _ => panic!(),
            }
        } else {
            MapRules::new()
        }
    }

    // optional .validate.AnyRules any = 20;

    pub fn any(&self) -> &AnyRules {
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Any(ref v)) => v,
            _ => <AnyRules as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_any(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_any(&self) -> bool {
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Any(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_any(&mut self, v: AnyRules) {
        self.type_ = ::std::option::Option::Some(field_rules::Type::Any(v))
    }

    // Mutable pointer to the field.
    pub fn mut_any(&mut self) -> &mut AnyRules {
        if let ::std::option::Option::Some(field_rules::Type::Any(_)) = self.type_ {
        } else {
            self.type_ = ::std::option::Option::Some(field_rules::Type::Any(AnyRules::new()));
        }
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Any(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_any(&mut self) -> AnyRules {
        if self.has_any() {
            match self.type_.take() {
                ::std::option::Option::Some(field_rules::Type::Any(v)) => v,
                _ => panic!(),
            }
        } else {
            AnyRules::new()
        }
    }

    // optional .validate.DurationRules duration = 21;

    pub fn duration(&self) -> &DurationRules {
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Duration(ref v)) => v,
            _ => <DurationRules as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_duration(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_duration(&self) -> bool {
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Duration(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_duration(&mut self, v: DurationRules) {
        self.type_ = ::std::option::Option::Some(field_rules::Type::Duration(v))
    }

    // Mutable pointer to the field.
    pub fn mut_duration(&mut self) -> &mut DurationRules {
        if let ::std::option::Option::Some(field_rules::Type::Duration(_)) = self.type_ {
        } else {
            self.type_ = ::std::option::Option::Some(field_rules::Type::Duration(DurationRules::new()));
        }
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Duration(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_duration(&mut self) -> DurationRules {
        if self.has_duration() {
            match self.type_.take() {
                ::std::option::Option::Some(field_rules::Type::Duration(v)) => v,
                _ => panic!(),
            }
        } else {
            DurationRules::new()
        }
    }

    // optional .validate.TimestampRules timestamp = 22;

    pub fn timestamp(&self) -> &TimestampRules {
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Timestamp(ref v)) => v,
            _ => <TimestampRules as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_timestamp(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_timestamp(&self) -> bool {
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Timestamp(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: TimestampRules) {
        self.type_ = ::std::option::Option::Some(field_rules::Type::Timestamp(v))
    }

    // Mutable pointer to the field.
    pub fn mut_timestamp(&mut self) -> &mut TimestampRules {
        if let ::std::option::Option::Some(field_rules::Type::Timestamp(_)) = self.type_ {
        } else {
            self.type_ = ::std::option::Option::Some(field_rules::Type::Timestamp(TimestampRules::new()));
        }
        match self.type_ {
            ::std::option::Option::Some(field_rules::Type::Timestamp(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_timestamp(&mut self) -> TimestampRules {
        if self.has_timestamp() {
            match self.type_.take() {
                ::std::option::Option::Some(field_rules::Type::Timestamp(v)) => v,
                _ => panic!(),
            }
        } else {
            TimestampRules::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(22);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, MessageRules>(
            "message",
            |m: &FieldRules| { &m.message },
            |m: &mut FieldRules| { &mut m.message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, FloatRules>(
            "float",
            FieldRules::has_float,
            FieldRules::float,
            FieldRules::mut_float,
            FieldRules::set_float,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, DoubleRules>(
            "double",
            FieldRules::has_double,
            FieldRules::double,
            FieldRules::mut_double,
            FieldRules::set_double,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Int32Rules>(
            "int32",
            FieldRules::has_int32,
            FieldRules::int32,
            FieldRules::mut_int32,
            FieldRules::set_int32,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Int64Rules>(
            "int64",
            FieldRules::has_int64,
            FieldRules::int64,
            FieldRules::mut_int64,
            FieldRules::set_int64,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, UInt32Rules>(
            "uint32",
            FieldRules::has_uint32,
            FieldRules::uint32,
            FieldRules::mut_uint32,
            FieldRules::set_uint32,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, UInt64Rules>(
            "uint64",
            FieldRules::has_uint64,
            FieldRules::uint64,
            FieldRules::mut_uint64,
            FieldRules::set_uint64,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, SInt32Rules>(
            "sint32",
            FieldRules::has_sint32,
            FieldRules::sint32,
            FieldRules::mut_sint32,
            FieldRules::set_sint32,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, SInt64Rules>(
            "sint64",
            FieldRules::has_sint64,
            FieldRules::sint64,
            FieldRules::mut_sint64,
            FieldRules::set_sint64,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Fixed32Rules>(
            "fixed32",
            FieldRules::has_fixed32,
            FieldRules::fixed32,
            FieldRules::mut_fixed32,
            FieldRules::set_fixed32,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Fixed64Rules>(
            "fixed64",
            FieldRules::has_fixed64,
            FieldRules::fixed64,
            FieldRules::mut_fixed64,
            FieldRules::set_fixed64,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, SFixed32Rules>(
            "sfixed32",
            FieldRules::has_sfixed32,
            FieldRules::sfixed32,
            FieldRules::mut_sfixed32,
            FieldRules::set_sfixed32,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, SFixed64Rules>(
            "sfixed64",
            FieldRules::has_sfixed64,
            FieldRules::sfixed64,
            FieldRules::mut_sfixed64,
            FieldRules::set_sfixed64,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, BoolRules>(
            "bool",
            FieldRules::has_bool,
            FieldRules::bool,
            FieldRules::mut_bool,
            FieldRules::set_bool,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, StringRules>(
            "string",
            FieldRules::has_string,
            FieldRules::string,
            FieldRules::mut_string,
            FieldRules::set_string,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, BytesRules>(
            "bytes",
            FieldRules::has_bytes,
            FieldRules::bytes,
            FieldRules::mut_bytes,
            FieldRules::set_bytes,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, EnumRules>(
            "enum",
            FieldRules::has_enum,
            FieldRules::enum_,
            FieldRules::mut_enum,
            FieldRules::set_enum,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, RepeatedRules>(
            "repeated",
            FieldRules::has_repeated,
            FieldRules::repeated,
            FieldRules::mut_repeated,
            FieldRules::set_repeated,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, MapRules>(
            "map",
            FieldRules::has_map,
            FieldRules::map,
            FieldRules::mut_map,
            FieldRules::set_map,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, AnyRules>(
            "any",
            FieldRules::has_any,
            FieldRules::any,
            FieldRules::mut_any,
            FieldRules::set_any,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, DurationRules>(
            "duration",
            FieldRules::has_duration,
            FieldRules::duration,
            FieldRules::mut_duration,
            FieldRules::set_duration,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, TimestampRules>(
            "timestamp",
            FieldRules::has_timestamp,
            FieldRules::timestamp,
            FieldRules::mut_timestamp,
            FieldRules::set_timestamp,
        ));
        oneofs.push(field_rules::Type::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FieldRules>(
            "FieldRules",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FieldRules {
    const NAME: &'static str = "FieldRules";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                138 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.message)?;
                },
                10 => {
                    self.type_ = ::std::option::Option::Some(field_rules::Type::Float(is.read_message()?));
                },
                18 => {
                    self.type_ = ::std::option::Option::Some(field_rules::Type::Double(is.read_message()?));
                },
                26 => {
                    self.type_ = ::std::option::Option::Some(field_rules::Type::Int32(is.read_message()?));
                },
                34 => {
                    self.type_ = ::std::option::Option::Some(field_rules::Type::Int64(is.read_message()?));
                },
                42 => {
                    self.type_ = ::std::option::Option::Some(field_rules::Type::Uint32(is.read_message()?));
                },
                50 => {
                    self.type_ = ::std::option::Option::Some(field_rules::Type::Uint64(is.read_message()?));
                },
                58 => {
                    self.type_ = ::std::option::Option::Some(field_rules::Type::Sint32(is.read_message()?));
                },
                66 => {
                    self.type_ = ::std::option::Option::Some(field_rules::Type::Sint64(is.read_message()?));
                },
                74 => {
                    self.type_ = ::std::option::Option::Some(field_rules::Type::Fixed32(is.read_message()?));
                },
                82 => {
                    self.type_ = ::std::option::Option::Some(field_rules::Type::Fixed64(is.read_message()?));
                },
                90 => {
                    self.type_ = ::std::option::Option::Some(field_rules::Type::Sfixed32(is.read_message()?));
                },
                98 => {
                    self.type_ = ::std::option::Option::Some(field_rules::Type::Sfixed64(is.read_message()?));
                },
                106 => {
                    self.type_ = ::std::option::Option::Some(field_rules::Type::Bool(is.read_message()?));
                },
                114 => {
                    self.type_ = ::std::option::Option::Some(field_rules::Type::String(is.read_message()?));
                },
                122 => {
                    self.type_ = ::std::option::Option::Some(field_rules::Type::Bytes(is.read_message()?));
                },
                130 => {
                    self.type_ = ::std::option::Option::Some(field_rules::Type::Enum(is.read_message()?));
                },
                146 => {
                    self.type_ = ::std::option::Option::Some(field_rules::Type::Repeated(is.read_message()?));
                },
                154 => {
                    self.type_ = ::std::option::Option::Some(field_rules::Type::Map(is.read_message()?));
                },
                162 => {
                    self.type_ = ::std::option::Option::Some(field_rules::Type::Any(is.read_message()?));
                },
                170 => {
                    self.type_ = ::std::option::Option::Some(field_rules::Type::Duration(is.read_message()?));
                },
                178 => {
                    self.type_ = ::std::option::Option::Some(field_rules::Type::Timestamp(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.message.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.type_ {
            match v {
                &field_rules::Type::Float(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &field_rules::Type::Double(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &field_rules::Type::Int32(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &field_rules::Type::Int64(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &field_rules::Type::Uint32(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &field_rules::Type::Uint64(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &field_rules::Type::Sint32(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &field_rules::Type::Sint64(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &field_rules::Type::Fixed32(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &field_rules::Type::Fixed64(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &field_rules::Type::Sfixed32(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &field_rules::Type::Sfixed64(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &field_rules::Type::Bool(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &field_rules::Type::String(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &field_rules::Type::Bytes(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &field_rules::Type::Enum(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &field_rules::Type::Repeated(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &field_rules::Type::Map(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &field_rules::Type::Any(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &field_rules::Type::Duration(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &field_rules::Type::Timestamp(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.message.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(17, v, os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.type_ {
            match v {
                &field_rules::Type::Float(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &field_rules::Type::Double(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &field_rules::Type::Int32(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &field_rules::Type::Int64(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &field_rules::Type::Uint32(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &field_rules::Type::Uint64(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
                &field_rules::Type::Sint32(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
                &field_rules::Type::Sint64(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
                &field_rules::Type::Fixed32(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
                },
                &field_rules::Type::Fixed64(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
                },
                &field_rules::Type::Sfixed32(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
                },
                &field_rules::Type::Sfixed64(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
                },
                &field_rules::Type::Bool(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
                },
                &field_rules::Type::String(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
                },
                &field_rules::Type::Bytes(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
                },
                &field_rules::Type::Enum(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(16, v, os)?;
                },
                &field_rules::Type::Repeated(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(18, v, os)?;
                },
                &field_rules::Type::Map(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(19, v, os)?;
                },
                &field_rules::Type::Any(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(20, v, os)?;
                },
                &field_rules::Type::Duration(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(21, v, os)?;
                },
                &field_rules::Type::Timestamp(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(22, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FieldRules {
        FieldRules::new()
    }

    fn clear(&mut self) {
        self.message.clear();
        self.type_ = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FieldRules {
        static instance: FieldRules = FieldRules {
            message: ::protobuf::MessageField::none(),
            type_: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FieldRules {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FieldRules").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FieldRules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FieldRules {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `FieldRules`
pub mod field_rules {

    #[derive(Clone,PartialEq,Debug)]
    // @@protoc_insertion_point(oneof:validate.FieldRules.type)
    pub enum Type {
        // @@protoc_insertion_point(oneof_field:validate.FieldRules.float)
        Float(super::FloatRules),
        // @@protoc_insertion_point(oneof_field:validate.FieldRules.double)
        Double(super::DoubleRules),
        // @@protoc_insertion_point(oneof_field:validate.FieldRules.int32)
        Int32(super::Int32Rules),
        // @@protoc_insertion_point(oneof_field:validate.FieldRules.int64)
        Int64(super::Int64Rules),
        // @@protoc_insertion_point(oneof_field:validate.FieldRules.uint32)
        Uint32(super::UInt32Rules),
        // @@protoc_insertion_point(oneof_field:validate.FieldRules.uint64)
        Uint64(super::UInt64Rules),
        // @@protoc_insertion_point(oneof_field:validate.FieldRules.sint32)
        Sint32(super::SInt32Rules),
        // @@protoc_insertion_point(oneof_field:validate.FieldRules.sint64)
        Sint64(super::SInt64Rules),
        // @@protoc_insertion_point(oneof_field:validate.FieldRules.fixed32)
        Fixed32(super::Fixed32Rules),
        // @@protoc_insertion_point(oneof_field:validate.FieldRules.fixed64)
        Fixed64(super::Fixed64Rules),
        // @@protoc_insertion_point(oneof_field:validate.FieldRules.sfixed32)
        Sfixed32(super::SFixed32Rules),
        // @@protoc_insertion_point(oneof_field:validate.FieldRules.sfixed64)
        Sfixed64(super::SFixed64Rules),
        // @@protoc_insertion_point(oneof_field:validate.FieldRules.bool)
        Bool(super::BoolRules),
        // @@protoc_insertion_point(oneof_field:validate.FieldRules.string)
        String(super::StringRules),
        // @@protoc_insertion_point(oneof_field:validate.FieldRules.bytes)
        Bytes(super::BytesRules),
        // @@protoc_insertion_point(oneof_field:validate.FieldRules.enum)
        Enum(super::EnumRules),
        // @@protoc_insertion_point(oneof_field:validate.FieldRules.repeated)
        Repeated(super::RepeatedRules),
        // @@protoc_insertion_point(oneof_field:validate.FieldRules.map)
        Map(super::MapRules),
        // @@protoc_insertion_point(oneof_field:validate.FieldRules.any)
        Any(super::AnyRules),
        // @@protoc_insertion_point(oneof_field:validate.FieldRules.duration)
        Duration(super::DurationRules),
        // @@protoc_insertion_point(oneof_field:validate.FieldRules.timestamp)
        Timestamp(super::TimestampRules),
    }

    impl ::protobuf::Oneof for Type {
    }

    impl ::protobuf::OneofFull for Type {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::FieldRules as ::protobuf::MessageFull>::descriptor().oneof_by_name("type").unwrap()).clone()
        }
    }

    impl Type {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Type>("type")
        }
    }
}

// @@protoc_insertion_point(message:validate.FloatRules)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct FloatRules {
    // message fields
    // @@protoc_insertion_point(field:validate.FloatRules.const)
    pub const_: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:validate.FloatRules.lt)
    pub lt: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:validate.FloatRules.lte)
    pub lte: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:validate.FloatRules.gt)
    pub gt: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:validate.FloatRules.gte)
    pub gte: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:validate.FloatRules.in)
    pub in_: ::std::vec::Vec<f32>,
    // @@protoc_insertion_point(field:validate.FloatRules.not_in)
    pub not_in: ::std::vec::Vec<f32>,
    // @@protoc_insertion_point(field:validate.FloatRules.ignore_empty)
    pub ignore_empty: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:validate.FloatRules.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FloatRules {
    fn default() -> &'a FloatRules {
        <FloatRules as ::protobuf::Message>::default_instance()
    }
}

impl FloatRules {
    pub fn new() -> FloatRules {
        ::std::default::Default::default()
    }

    // optional float const = 1;

    pub fn const_(&self) -> f32 {
        self.const_.unwrap_or(0.)
    }

    pub fn clear_const_(&mut self) {
        self.const_ = ::std::option::Option::None;
    }

    pub fn has_const(&self) -> bool {
        self.const_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_const(&mut self, v: f32) {
        self.const_ = ::std::option::Option::Some(v);
    }

    // optional float lt = 2;

    pub fn lt(&self) -> f32 {
        self.lt.unwrap_or(0.)
    }

    pub fn clear_lt(&mut self) {
        self.lt = ::std::option::Option::None;
    }

    pub fn has_lt(&self) -> bool {
        self.lt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lt(&mut self, v: f32) {
        self.lt = ::std::option::Option::Some(v);
    }

    // optional float lte = 3;

    pub fn lte(&self) -> f32 {
        self.lte.unwrap_or(0.)
    }

    pub fn clear_lte(&mut self) {
        self.lte = ::std::option::Option::None;
    }

    pub fn has_lte(&self) -> bool {
        self.lte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lte(&mut self, v: f32) {
        self.lte = ::std::option::Option::Some(v);
    }

    // optional float gt = 4;

    pub fn gt(&self) -> f32 {
        self.gt.unwrap_or(0.)
    }

    pub fn clear_gt(&mut self) {
        self.gt = ::std::option::Option::None;
    }

    pub fn has_gt(&self) -> bool {
        self.gt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gt(&mut self, v: f32) {
        self.gt = ::std::option::Option::Some(v);
    }

    // optional float gte = 5;

    pub fn gte(&self) -> f32 {
        self.gte.unwrap_or(0.)
    }

    pub fn clear_gte(&mut self) {
        self.gte = ::std::option::Option::None;
    }

    pub fn has_gte(&self) -> bool {
        self.gte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gte(&mut self, v: f32) {
        self.gte = ::std::option::Option::Some(v);
    }

    // optional bool ignore_empty = 8;

    pub fn ignore_empty(&self) -> bool {
        self.ignore_empty.unwrap_or(false)
    }

    pub fn clear_ignore_empty(&mut self) {
        self.ignore_empty = ::std::option::Option::None;
    }

    pub fn has_ignore_empty(&self) -> bool {
        self.ignore_empty.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ignore_empty(&mut self, v: bool) {
        self.ignore_empty = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "const",
            |m: &FloatRules| { &m.const_ },
            |m: &mut FloatRules| { &mut m.const_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "lt",
            |m: &FloatRules| { &m.lt },
            |m: &mut FloatRules| { &mut m.lt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "lte",
            |m: &FloatRules| { &m.lte },
            |m: &mut FloatRules| { &mut m.lte },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gt",
            |m: &FloatRules| { &m.gt },
            |m: &mut FloatRules| { &mut m.gt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gte",
            |m: &FloatRules| { &m.gte },
            |m: &mut FloatRules| { &mut m.gte },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "in",
            |m: &FloatRules| { &m.in_ },
            |m: &mut FloatRules| { &mut m.in_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "not_in",
            |m: &FloatRules| { &m.not_in },
            |m: &mut FloatRules| { &mut m.not_in },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ignore_empty",
            |m: &FloatRules| { &m.ignore_empty },
            |m: &mut FloatRules| { &mut m.ignore_empty },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FloatRules>(
            "FloatRules",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FloatRules {
    const NAME: &'static str = "FloatRules";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.const_ = ::std::option::Option::Some(is.read_float()?);
                },
                21 => {
                    self.lt = ::std::option::Option::Some(is.read_float()?);
                },
                29 => {
                    self.lte = ::std::option::Option::Some(is.read_float()?);
                },
                37 => {
                    self.gt = ::std::option::Option::Some(is.read_float()?);
                },
                45 => {
                    self.gte = ::std::option::Option::Some(is.read_float()?);
                },
                50 => {
                    is.read_repeated_packed_float_into(&mut self.in_)?;
                },
                53 => {
                    self.in_.push(is.read_float()?);
                },
                58 => {
                    is.read_repeated_packed_float_into(&mut self.not_in)?;
                },
                61 => {
                    self.not_in.push(is.read_float()?);
                },
                64 => {
                    self.ignore_empty = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.const_ {
            my_size += 1 + 4;
        }
        if let Some(v) = self.lt {
            my_size += 1 + 4;
        }
        if let Some(v) = self.lte {
            my_size += 1 + 4;
        }
        if let Some(v) = self.gt {
            my_size += 1 + 4;
        }
        if let Some(v) = self.gte {
            my_size += 1 + 4;
        }
        my_size += 5 * self.in_.len() as u64;
        my_size += 5 * self.not_in.len() as u64;
        if let Some(v) = self.ignore_empty {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.const_ {
            os.write_float(1, v)?;
        }
        if let Some(v) = self.lt {
            os.write_float(2, v)?;
        }
        if let Some(v) = self.lte {
            os.write_float(3, v)?;
        }
        if let Some(v) = self.gt {
            os.write_float(4, v)?;
        }
        if let Some(v) = self.gte {
            os.write_float(5, v)?;
        }
        for v in &self.in_ {
            os.write_float(6, *v)?;
        };
        for v in &self.not_in {
            os.write_float(7, *v)?;
        };
        if let Some(v) = self.ignore_empty {
            os.write_bool(8, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FloatRules {
        FloatRules::new()
    }

    fn clear(&mut self) {
        self.const_ = ::std::option::Option::None;
        self.lt = ::std::option::Option::None;
        self.lte = ::std::option::Option::None;
        self.gt = ::std::option::Option::None;
        self.gte = ::std::option::Option::None;
        self.in_.clear();
        self.not_in.clear();
        self.ignore_empty = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FloatRules {
        static instance: FloatRules = FloatRules {
            const_: ::std::option::Option::None,
            lt: ::std::option::Option::None,
            lte: ::std::option::Option::None,
            gt: ::std::option::Option::None,
            gte: ::std::option::Option::None,
            in_: ::std::vec::Vec::new(),
            not_in: ::std::vec::Vec::new(),
            ignore_empty: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FloatRules {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FloatRules").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FloatRules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FloatRules {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:validate.DoubleRules)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DoubleRules {
    // message fields
    // @@protoc_insertion_point(field:validate.DoubleRules.const)
    pub const_: ::std::option::Option<f64>,
    // @@protoc_insertion_point(field:validate.DoubleRules.lt)
    pub lt: ::std::option::Option<f64>,
    // @@protoc_insertion_point(field:validate.DoubleRules.lte)
    pub lte: ::std::option::Option<f64>,
    // @@protoc_insertion_point(field:validate.DoubleRules.gt)
    pub gt: ::std::option::Option<f64>,
    // @@protoc_insertion_point(field:validate.DoubleRules.gte)
    pub gte: ::std::option::Option<f64>,
    // @@protoc_insertion_point(field:validate.DoubleRules.in)
    pub in_: ::std::vec::Vec<f64>,
    // @@protoc_insertion_point(field:validate.DoubleRules.not_in)
    pub not_in: ::std::vec::Vec<f64>,
    // @@protoc_insertion_point(field:validate.DoubleRules.ignore_empty)
    pub ignore_empty: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:validate.DoubleRules.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DoubleRules {
    fn default() -> &'a DoubleRules {
        <DoubleRules as ::protobuf::Message>::default_instance()
    }
}

impl DoubleRules {
    pub fn new() -> DoubleRules {
        ::std::default::Default::default()
    }

    // optional double const = 1;

    pub fn const_(&self) -> f64 {
        self.const_.unwrap_or(0.)
    }

    pub fn clear_const_(&mut self) {
        self.const_ = ::std::option::Option::None;
    }

    pub fn has_const(&self) -> bool {
        self.const_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_const(&mut self, v: f64) {
        self.const_ = ::std::option::Option::Some(v);
    }

    // optional double lt = 2;

    pub fn lt(&self) -> f64 {
        self.lt.unwrap_or(0.)
    }

    pub fn clear_lt(&mut self) {
        self.lt = ::std::option::Option::None;
    }

    pub fn has_lt(&self) -> bool {
        self.lt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lt(&mut self, v: f64) {
        self.lt = ::std::option::Option::Some(v);
    }

    // optional double lte = 3;

    pub fn lte(&self) -> f64 {
        self.lte.unwrap_or(0.)
    }

    pub fn clear_lte(&mut self) {
        self.lte = ::std::option::Option::None;
    }

    pub fn has_lte(&self) -> bool {
        self.lte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lte(&mut self, v: f64) {
        self.lte = ::std::option::Option::Some(v);
    }

    // optional double gt = 4;

    pub fn gt(&self) -> f64 {
        self.gt.unwrap_or(0.)
    }

    pub fn clear_gt(&mut self) {
        self.gt = ::std::option::Option::None;
    }

    pub fn has_gt(&self) -> bool {
        self.gt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gt(&mut self, v: f64) {
        self.gt = ::std::option::Option::Some(v);
    }

    // optional double gte = 5;

    pub fn gte(&self) -> f64 {
        self.gte.unwrap_or(0.)
    }

    pub fn clear_gte(&mut self) {
        self.gte = ::std::option::Option::None;
    }

    pub fn has_gte(&self) -> bool {
        self.gte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gte(&mut self, v: f64) {
        self.gte = ::std::option::Option::Some(v);
    }

    // optional bool ignore_empty = 8;

    pub fn ignore_empty(&self) -> bool {
        self.ignore_empty.unwrap_or(false)
    }

    pub fn clear_ignore_empty(&mut self) {
        self.ignore_empty = ::std::option::Option::None;
    }

    pub fn has_ignore_empty(&self) -> bool {
        self.ignore_empty.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ignore_empty(&mut self, v: bool) {
        self.ignore_empty = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "const",
            |m: &DoubleRules| { &m.const_ },
            |m: &mut DoubleRules| { &mut m.const_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "lt",
            |m: &DoubleRules| { &m.lt },
            |m: &mut DoubleRules| { &mut m.lt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "lte",
            |m: &DoubleRules| { &m.lte },
            |m: &mut DoubleRules| { &mut m.lte },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gt",
            |m: &DoubleRules| { &m.gt },
            |m: &mut DoubleRules| { &mut m.gt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gte",
            |m: &DoubleRules| { &m.gte },
            |m: &mut DoubleRules| { &mut m.gte },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "in",
            |m: &DoubleRules| { &m.in_ },
            |m: &mut DoubleRules| { &mut m.in_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "not_in",
            |m: &DoubleRules| { &m.not_in },
            |m: &mut DoubleRules| { &mut m.not_in },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ignore_empty",
            |m: &DoubleRules| { &m.ignore_empty },
            |m: &mut DoubleRules| { &mut m.ignore_empty },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DoubleRules>(
            "DoubleRules",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DoubleRules {
    const NAME: &'static str = "DoubleRules";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.const_ = ::std::option::Option::Some(is.read_double()?);
                },
                17 => {
                    self.lt = ::std::option::Option::Some(is.read_double()?);
                },
                25 => {
                    self.lte = ::std::option::Option::Some(is.read_double()?);
                },
                33 => {
                    self.gt = ::std::option::Option::Some(is.read_double()?);
                },
                41 => {
                    self.gte = ::std::option::Option::Some(is.read_double()?);
                },
                50 => {
                    is.read_repeated_packed_double_into(&mut self.in_)?;
                },
                49 => {
                    self.in_.push(is.read_double()?);
                },
                58 => {
                    is.read_repeated_packed_double_into(&mut self.not_in)?;
                },
                57 => {
                    self.not_in.push(is.read_double()?);
                },
                64 => {
                    self.ignore_empty = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.const_ {
            my_size += 1 + 8;
        }
        if let Some(v) = self.lt {
            my_size += 1 + 8;
        }
        if let Some(v) = self.lte {
            my_size += 1 + 8;
        }
        if let Some(v) = self.gt {
            my_size += 1 + 8;
        }
        if let Some(v) = self.gte {
            my_size += 1 + 8;
        }
        my_size += 9 * self.in_.len() as u64;
        my_size += 9 * self.not_in.len() as u64;
        if let Some(v) = self.ignore_empty {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.const_ {
            os.write_double(1, v)?;
        }
        if let Some(v) = self.lt {
            os.write_double(2, v)?;
        }
        if let Some(v) = self.lte {
            os.write_double(3, v)?;
        }
        if let Some(v) = self.gt {
            os.write_double(4, v)?;
        }
        if let Some(v) = self.gte {
            os.write_double(5, v)?;
        }
        for v in &self.in_ {
            os.write_double(6, *v)?;
        };
        for v in &self.not_in {
            os.write_double(7, *v)?;
        };
        if let Some(v) = self.ignore_empty {
            os.write_bool(8, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DoubleRules {
        DoubleRules::new()
    }

    fn clear(&mut self) {
        self.const_ = ::std::option::Option::None;
        self.lt = ::std::option::Option::None;
        self.lte = ::std::option::Option::None;
        self.gt = ::std::option::Option::None;
        self.gte = ::std::option::Option::None;
        self.in_.clear();
        self.not_in.clear();
        self.ignore_empty = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DoubleRules {
        static instance: DoubleRules = DoubleRules {
            const_: ::std::option::Option::None,
            lt: ::std::option::Option::None,
            lte: ::std::option::Option::None,
            gt: ::std::option::Option::None,
            gte: ::std::option::Option::None,
            in_: ::std::vec::Vec::new(),
            not_in: ::std::vec::Vec::new(),
            ignore_empty: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DoubleRules {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DoubleRules").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DoubleRules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DoubleRules {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:validate.Int32Rules)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Int32Rules {
    // message fields
    // @@protoc_insertion_point(field:validate.Int32Rules.const)
    pub const_: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:validate.Int32Rules.lt)
    pub lt: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:validate.Int32Rules.lte)
    pub lte: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:validate.Int32Rules.gt)
    pub gt: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:validate.Int32Rules.gte)
    pub gte: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:validate.Int32Rules.in)
    pub in_: ::std::vec::Vec<i32>,
    // @@protoc_insertion_point(field:validate.Int32Rules.not_in)
    pub not_in: ::std::vec::Vec<i32>,
    // @@protoc_insertion_point(field:validate.Int32Rules.ignore_empty)
    pub ignore_empty: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:validate.Int32Rules.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Int32Rules {
    fn default() -> &'a Int32Rules {
        <Int32Rules as ::protobuf::Message>::default_instance()
    }
}

impl Int32Rules {
    pub fn new() -> Int32Rules {
        ::std::default::Default::default()
    }

    // optional int32 const = 1;

    pub fn const_(&self) -> i32 {
        self.const_.unwrap_or(0)
    }

    pub fn clear_const_(&mut self) {
        self.const_ = ::std::option::Option::None;
    }

    pub fn has_const(&self) -> bool {
        self.const_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_const(&mut self, v: i32) {
        self.const_ = ::std::option::Option::Some(v);
    }

    // optional int32 lt = 2;

    pub fn lt(&self) -> i32 {
        self.lt.unwrap_or(0)
    }

    pub fn clear_lt(&mut self) {
        self.lt = ::std::option::Option::None;
    }

    pub fn has_lt(&self) -> bool {
        self.lt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lt(&mut self, v: i32) {
        self.lt = ::std::option::Option::Some(v);
    }

    // optional int32 lte = 3;

    pub fn lte(&self) -> i32 {
        self.lte.unwrap_or(0)
    }

    pub fn clear_lte(&mut self) {
        self.lte = ::std::option::Option::None;
    }

    pub fn has_lte(&self) -> bool {
        self.lte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lte(&mut self, v: i32) {
        self.lte = ::std::option::Option::Some(v);
    }

    // optional int32 gt = 4;

    pub fn gt(&self) -> i32 {
        self.gt.unwrap_or(0)
    }

    pub fn clear_gt(&mut self) {
        self.gt = ::std::option::Option::None;
    }

    pub fn has_gt(&self) -> bool {
        self.gt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gt(&mut self, v: i32) {
        self.gt = ::std::option::Option::Some(v);
    }

    // optional int32 gte = 5;

    pub fn gte(&self) -> i32 {
        self.gte.unwrap_or(0)
    }

    pub fn clear_gte(&mut self) {
        self.gte = ::std::option::Option::None;
    }

    pub fn has_gte(&self) -> bool {
        self.gte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gte(&mut self, v: i32) {
        self.gte = ::std::option::Option::Some(v);
    }

    // optional bool ignore_empty = 8;

    pub fn ignore_empty(&self) -> bool {
        self.ignore_empty.unwrap_or(false)
    }

    pub fn clear_ignore_empty(&mut self) {
        self.ignore_empty = ::std::option::Option::None;
    }

    pub fn has_ignore_empty(&self) -> bool {
        self.ignore_empty.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ignore_empty(&mut self, v: bool) {
        self.ignore_empty = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "const",
            |m: &Int32Rules| { &m.const_ },
            |m: &mut Int32Rules| { &mut m.const_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "lt",
            |m: &Int32Rules| { &m.lt },
            |m: &mut Int32Rules| { &mut m.lt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "lte",
            |m: &Int32Rules| { &m.lte },
            |m: &mut Int32Rules| { &mut m.lte },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gt",
            |m: &Int32Rules| { &m.gt },
            |m: &mut Int32Rules| { &mut m.gt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gte",
            |m: &Int32Rules| { &m.gte },
            |m: &mut Int32Rules| { &mut m.gte },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "in",
            |m: &Int32Rules| { &m.in_ },
            |m: &mut Int32Rules| { &mut m.in_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "not_in",
            |m: &Int32Rules| { &m.not_in },
            |m: &mut Int32Rules| { &mut m.not_in },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ignore_empty",
            |m: &Int32Rules| { &m.ignore_empty },
            |m: &mut Int32Rules| { &mut m.ignore_empty },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Int32Rules>(
            "Int32Rules",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Int32Rules {
    const NAME: &'static str = "Int32Rules";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.const_ = ::std::option::Option::Some(is.read_int32()?);
                },
                16 => {
                    self.lt = ::std::option::Option::Some(is.read_int32()?);
                },
                24 => {
                    self.lte = ::std::option::Option::Some(is.read_int32()?);
                },
                32 => {
                    self.gt = ::std::option::Option::Some(is.read_int32()?);
                },
                40 => {
                    self.gte = ::std::option::Option::Some(is.read_int32()?);
                },
                50 => {
                    is.read_repeated_packed_int32_into(&mut self.in_)?;
                },
                48 => {
                    self.in_.push(is.read_int32()?);
                },
                58 => {
                    is.read_repeated_packed_int32_into(&mut self.not_in)?;
                },
                56 => {
                    self.not_in.push(is.read_int32()?);
                },
                64 => {
                    self.ignore_empty = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.const_ {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        if let Some(v) = self.lt {
            my_size += ::protobuf::rt::int32_size(2, v);
        }
        if let Some(v) = self.lte {
            my_size += ::protobuf::rt::int32_size(3, v);
        }
        if let Some(v) = self.gt {
            my_size += ::protobuf::rt::int32_size(4, v);
        }
        if let Some(v) = self.gte {
            my_size += ::protobuf::rt::int32_size(5, v);
        }
        for value in &self.in_ {
            my_size += ::protobuf::rt::int32_size(6, *value);
        };
        for value in &self.not_in {
            my_size += ::protobuf::rt::int32_size(7, *value);
        };
        if let Some(v) = self.ignore_empty {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.const_ {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.lt {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.lte {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.gt {
            os.write_int32(4, v)?;
        }
        if let Some(v) = self.gte {
            os.write_int32(5, v)?;
        }
        for v in &self.in_ {
            os.write_int32(6, *v)?;
        };
        for v in &self.not_in {
            os.write_int32(7, *v)?;
        };
        if let Some(v) = self.ignore_empty {
            os.write_bool(8, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Int32Rules {
        Int32Rules::new()
    }

    fn clear(&mut self) {
        self.const_ = ::std::option::Option::None;
        self.lt = ::std::option::Option::None;
        self.lte = ::std::option::Option::None;
        self.gt = ::std::option::Option::None;
        self.gte = ::std::option::Option::None;
        self.in_.clear();
        self.not_in.clear();
        self.ignore_empty = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Int32Rules {
        static instance: Int32Rules = Int32Rules {
            const_: ::std::option::Option::None,
            lt: ::std::option::Option::None,
            lte: ::std::option::Option::None,
            gt: ::std::option::Option::None,
            gte: ::std::option::Option::None,
            in_: ::std::vec::Vec::new(),
            not_in: ::std::vec::Vec::new(),
            ignore_empty: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Int32Rules {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Int32Rules").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Int32Rules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Int32Rules {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:validate.Int64Rules)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Int64Rules {
    // message fields
    // @@protoc_insertion_point(field:validate.Int64Rules.const)
    pub const_: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:validate.Int64Rules.lt)
    pub lt: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:validate.Int64Rules.lte)
    pub lte: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:validate.Int64Rules.gt)
    pub gt: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:validate.Int64Rules.gte)
    pub gte: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:validate.Int64Rules.in)
    pub in_: ::std::vec::Vec<i64>,
    // @@protoc_insertion_point(field:validate.Int64Rules.not_in)
    pub not_in: ::std::vec::Vec<i64>,
    // @@protoc_insertion_point(field:validate.Int64Rules.ignore_empty)
    pub ignore_empty: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:validate.Int64Rules.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Int64Rules {
    fn default() -> &'a Int64Rules {
        <Int64Rules as ::protobuf::Message>::default_instance()
    }
}

impl Int64Rules {
    pub fn new() -> Int64Rules {
        ::std::default::Default::default()
    }

    // optional int64 const = 1;

    pub fn const_(&self) -> i64 {
        self.const_.unwrap_or(0)
    }

    pub fn clear_const_(&mut self) {
        self.const_ = ::std::option::Option::None;
    }

    pub fn has_const(&self) -> bool {
        self.const_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_const(&mut self, v: i64) {
        self.const_ = ::std::option::Option::Some(v);
    }

    // optional int64 lt = 2;

    pub fn lt(&self) -> i64 {
        self.lt.unwrap_or(0)
    }

    pub fn clear_lt(&mut self) {
        self.lt = ::std::option::Option::None;
    }

    pub fn has_lt(&self) -> bool {
        self.lt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lt(&mut self, v: i64) {
        self.lt = ::std::option::Option::Some(v);
    }

    // optional int64 lte = 3;

    pub fn lte(&self) -> i64 {
        self.lte.unwrap_or(0)
    }

    pub fn clear_lte(&mut self) {
        self.lte = ::std::option::Option::None;
    }

    pub fn has_lte(&self) -> bool {
        self.lte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lte(&mut self, v: i64) {
        self.lte = ::std::option::Option::Some(v);
    }

    // optional int64 gt = 4;

    pub fn gt(&self) -> i64 {
        self.gt.unwrap_or(0)
    }

    pub fn clear_gt(&mut self) {
        self.gt = ::std::option::Option::None;
    }

    pub fn has_gt(&self) -> bool {
        self.gt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gt(&mut self, v: i64) {
        self.gt = ::std::option::Option::Some(v);
    }

    // optional int64 gte = 5;

    pub fn gte(&self) -> i64 {
        self.gte.unwrap_or(0)
    }

    pub fn clear_gte(&mut self) {
        self.gte = ::std::option::Option::None;
    }

    pub fn has_gte(&self) -> bool {
        self.gte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gte(&mut self, v: i64) {
        self.gte = ::std::option::Option::Some(v);
    }

    // optional bool ignore_empty = 8;

    pub fn ignore_empty(&self) -> bool {
        self.ignore_empty.unwrap_or(false)
    }

    pub fn clear_ignore_empty(&mut self) {
        self.ignore_empty = ::std::option::Option::None;
    }

    pub fn has_ignore_empty(&self) -> bool {
        self.ignore_empty.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ignore_empty(&mut self, v: bool) {
        self.ignore_empty = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "const",
            |m: &Int64Rules| { &m.const_ },
            |m: &mut Int64Rules| { &mut m.const_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "lt",
            |m: &Int64Rules| { &m.lt },
            |m: &mut Int64Rules| { &mut m.lt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "lte",
            |m: &Int64Rules| { &m.lte },
            |m: &mut Int64Rules| { &mut m.lte },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gt",
            |m: &Int64Rules| { &m.gt },
            |m: &mut Int64Rules| { &mut m.gt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gte",
            |m: &Int64Rules| { &m.gte },
            |m: &mut Int64Rules| { &mut m.gte },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "in",
            |m: &Int64Rules| { &m.in_ },
            |m: &mut Int64Rules| { &mut m.in_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "not_in",
            |m: &Int64Rules| { &m.not_in },
            |m: &mut Int64Rules| { &mut m.not_in },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ignore_empty",
            |m: &Int64Rules| { &m.ignore_empty },
            |m: &mut Int64Rules| { &mut m.ignore_empty },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Int64Rules>(
            "Int64Rules",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Int64Rules {
    const NAME: &'static str = "Int64Rules";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.const_ = ::std::option::Option::Some(is.read_int64()?);
                },
                16 => {
                    self.lt = ::std::option::Option::Some(is.read_int64()?);
                },
                24 => {
                    self.lte = ::std::option::Option::Some(is.read_int64()?);
                },
                32 => {
                    self.gt = ::std::option::Option::Some(is.read_int64()?);
                },
                40 => {
                    self.gte = ::std::option::Option::Some(is.read_int64()?);
                },
                50 => {
                    is.read_repeated_packed_int64_into(&mut self.in_)?;
                },
                48 => {
                    self.in_.push(is.read_int64()?);
                },
                58 => {
                    is.read_repeated_packed_int64_into(&mut self.not_in)?;
                },
                56 => {
                    self.not_in.push(is.read_int64()?);
                },
                64 => {
                    self.ignore_empty = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.const_ {
            my_size += ::protobuf::rt::int64_size(1, v);
        }
        if let Some(v) = self.lt {
            my_size += ::protobuf::rt::int64_size(2, v);
        }
        if let Some(v) = self.lte {
            my_size += ::protobuf::rt::int64_size(3, v);
        }
        if let Some(v) = self.gt {
            my_size += ::protobuf::rt::int64_size(4, v);
        }
        if let Some(v) = self.gte {
            my_size += ::protobuf::rt::int64_size(5, v);
        }
        for value in &self.in_ {
            my_size += ::protobuf::rt::int64_size(6, *value);
        };
        for value in &self.not_in {
            my_size += ::protobuf::rt::int64_size(7, *value);
        };
        if let Some(v) = self.ignore_empty {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.const_ {
            os.write_int64(1, v)?;
        }
        if let Some(v) = self.lt {
            os.write_int64(2, v)?;
        }
        if let Some(v) = self.lte {
            os.write_int64(3, v)?;
        }
        if let Some(v) = self.gt {
            os.write_int64(4, v)?;
        }
        if let Some(v) = self.gte {
            os.write_int64(5, v)?;
        }
        for v in &self.in_ {
            os.write_int64(6, *v)?;
        };
        for v in &self.not_in {
            os.write_int64(7, *v)?;
        };
        if let Some(v) = self.ignore_empty {
            os.write_bool(8, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Int64Rules {
        Int64Rules::new()
    }

    fn clear(&mut self) {
        self.const_ = ::std::option::Option::None;
        self.lt = ::std::option::Option::None;
        self.lte = ::std::option::Option::None;
        self.gt = ::std::option::Option::None;
        self.gte = ::std::option::Option::None;
        self.in_.clear();
        self.not_in.clear();
        self.ignore_empty = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Int64Rules {
        static instance: Int64Rules = Int64Rules {
            const_: ::std::option::Option::None,
            lt: ::std::option::Option::None,
            lte: ::std::option::Option::None,
            gt: ::std::option::Option::None,
            gte: ::std::option::Option::None,
            in_: ::std::vec::Vec::new(),
            not_in: ::std::vec::Vec::new(),
            ignore_empty: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Int64Rules {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Int64Rules").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Int64Rules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Int64Rules {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:validate.UInt32Rules)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UInt32Rules {
    // message fields
    // @@protoc_insertion_point(field:validate.UInt32Rules.const)
    pub const_: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:validate.UInt32Rules.lt)
    pub lt: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:validate.UInt32Rules.lte)
    pub lte: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:validate.UInt32Rules.gt)
    pub gt: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:validate.UInt32Rules.gte)
    pub gte: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:validate.UInt32Rules.in)
    pub in_: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:validate.UInt32Rules.not_in)
    pub not_in: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:validate.UInt32Rules.ignore_empty)
    pub ignore_empty: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:validate.UInt32Rules.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UInt32Rules {
    fn default() -> &'a UInt32Rules {
        <UInt32Rules as ::protobuf::Message>::default_instance()
    }
}

impl UInt32Rules {
    pub fn new() -> UInt32Rules {
        ::std::default::Default::default()
    }

    // optional uint32 const = 1;

    pub fn const_(&self) -> u32 {
        self.const_.unwrap_or(0)
    }

    pub fn clear_const_(&mut self) {
        self.const_ = ::std::option::Option::None;
    }

    pub fn has_const(&self) -> bool {
        self.const_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_const(&mut self, v: u32) {
        self.const_ = ::std::option::Option::Some(v);
    }

    // optional uint32 lt = 2;

    pub fn lt(&self) -> u32 {
        self.lt.unwrap_or(0)
    }

    pub fn clear_lt(&mut self) {
        self.lt = ::std::option::Option::None;
    }

    pub fn has_lt(&self) -> bool {
        self.lt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lt(&mut self, v: u32) {
        self.lt = ::std::option::Option::Some(v);
    }

    // optional uint32 lte = 3;

    pub fn lte(&self) -> u32 {
        self.lte.unwrap_or(0)
    }

    pub fn clear_lte(&mut self) {
        self.lte = ::std::option::Option::None;
    }

    pub fn has_lte(&self) -> bool {
        self.lte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lte(&mut self, v: u32) {
        self.lte = ::std::option::Option::Some(v);
    }

    // optional uint32 gt = 4;

    pub fn gt(&self) -> u32 {
        self.gt.unwrap_or(0)
    }

    pub fn clear_gt(&mut self) {
        self.gt = ::std::option::Option::None;
    }

    pub fn has_gt(&self) -> bool {
        self.gt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gt(&mut self, v: u32) {
        self.gt = ::std::option::Option::Some(v);
    }

    // optional uint32 gte = 5;

    pub fn gte(&self) -> u32 {
        self.gte.unwrap_or(0)
    }

    pub fn clear_gte(&mut self) {
        self.gte = ::std::option::Option::None;
    }

    pub fn has_gte(&self) -> bool {
        self.gte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gte(&mut self, v: u32) {
        self.gte = ::std::option::Option::Some(v);
    }

    // optional bool ignore_empty = 8;

    pub fn ignore_empty(&self) -> bool {
        self.ignore_empty.unwrap_or(false)
    }

    pub fn clear_ignore_empty(&mut self) {
        self.ignore_empty = ::std::option::Option::None;
    }

    pub fn has_ignore_empty(&self) -> bool {
        self.ignore_empty.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ignore_empty(&mut self, v: bool) {
        self.ignore_empty = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "const",
            |m: &UInt32Rules| { &m.const_ },
            |m: &mut UInt32Rules| { &mut m.const_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "lt",
            |m: &UInt32Rules| { &m.lt },
            |m: &mut UInt32Rules| { &mut m.lt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "lte",
            |m: &UInt32Rules| { &m.lte },
            |m: &mut UInt32Rules| { &mut m.lte },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gt",
            |m: &UInt32Rules| { &m.gt },
            |m: &mut UInt32Rules| { &mut m.gt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gte",
            |m: &UInt32Rules| { &m.gte },
            |m: &mut UInt32Rules| { &mut m.gte },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "in",
            |m: &UInt32Rules| { &m.in_ },
            |m: &mut UInt32Rules| { &mut m.in_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "not_in",
            |m: &UInt32Rules| { &m.not_in },
            |m: &mut UInt32Rules| { &mut m.not_in },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ignore_empty",
            |m: &UInt32Rules| { &m.ignore_empty },
            |m: &mut UInt32Rules| { &mut m.ignore_empty },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UInt32Rules>(
            "UInt32Rules",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UInt32Rules {
    const NAME: &'static str = "UInt32Rules";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.const_ = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.lt = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.lte = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.gt = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.gte = ::std::option::Option::Some(is.read_uint32()?);
                },
                50 => {
                    is.read_repeated_packed_uint32_into(&mut self.in_)?;
                },
                48 => {
                    self.in_.push(is.read_uint32()?);
                },
                58 => {
                    is.read_repeated_packed_uint32_into(&mut self.not_in)?;
                },
                56 => {
                    self.not_in.push(is.read_uint32()?);
                },
                64 => {
                    self.ignore_empty = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.const_ {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.lt {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.lte {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.gt {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.gte {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        for value in &self.in_ {
            my_size += ::protobuf::rt::uint32_size(6, *value);
        };
        for value in &self.not_in {
            my_size += ::protobuf::rt::uint32_size(7, *value);
        };
        if let Some(v) = self.ignore_empty {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.const_ {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.lt {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.lte {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.gt {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.gte {
            os.write_uint32(5, v)?;
        }
        for v in &self.in_ {
            os.write_uint32(6, *v)?;
        };
        for v in &self.not_in {
            os.write_uint32(7, *v)?;
        };
        if let Some(v) = self.ignore_empty {
            os.write_bool(8, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UInt32Rules {
        UInt32Rules::new()
    }

    fn clear(&mut self) {
        self.const_ = ::std::option::Option::None;
        self.lt = ::std::option::Option::None;
        self.lte = ::std::option::Option::None;
        self.gt = ::std::option::Option::None;
        self.gte = ::std::option::Option::None;
        self.in_.clear();
        self.not_in.clear();
        self.ignore_empty = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UInt32Rules {
        static instance: UInt32Rules = UInt32Rules {
            const_: ::std::option::Option::None,
            lt: ::std::option::Option::None,
            lte: ::std::option::Option::None,
            gt: ::std::option::Option::None,
            gte: ::std::option::Option::None,
            in_: ::std::vec::Vec::new(),
            not_in: ::std::vec::Vec::new(),
            ignore_empty: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UInt32Rules {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UInt32Rules").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UInt32Rules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UInt32Rules {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:validate.UInt64Rules)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UInt64Rules {
    // message fields
    // @@protoc_insertion_point(field:validate.UInt64Rules.const)
    pub const_: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:validate.UInt64Rules.lt)
    pub lt: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:validate.UInt64Rules.lte)
    pub lte: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:validate.UInt64Rules.gt)
    pub gt: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:validate.UInt64Rules.gte)
    pub gte: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:validate.UInt64Rules.in)
    pub in_: ::std::vec::Vec<u64>,
    // @@protoc_insertion_point(field:validate.UInt64Rules.not_in)
    pub not_in: ::std::vec::Vec<u64>,
    // @@protoc_insertion_point(field:validate.UInt64Rules.ignore_empty)
    pub ignore_empty: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:validate.UInt64Rules.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UInt64Rules {
    fn default() -> &'a UInt64Rules {
        <UInt64Rules as ::protobuf::Message>::default_instance()
    }
}

impl UInt64Rules {
    pub fn new() -> UInt64Rules {
        ::std::default::Default::default()
    }

    // optional uint64 const = 1;

    pub fn const_(&self) -> u64 {
        self.const_.unwrap_or(0)
    }

    pub fn clear_const_(&mut self) {
        self.const_ = ::std::option::Option::None;
    }

    pub fn has_const(&self) -> bool {
        self.const_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_const(&mut self, v: u64) {
        self.const_ = ::std::option::Option::Some(v);
    }

    // optional uint64 lt = 2;

    pub fn lt(&self) -> u64 {
        self.lt.unwrap_or(0)
    }

    pub fn clear_lt(&mut self) {
        self.lt = ::std::option::Option::None;
    }

    pub fn has_lt(&self) -> bool {
        self.lt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lt(&mut self, v: u64) {
        self.lt = ::std::option::Option::Some(v);
    }

    // optional uint64 lte = 3;

    pub fn lte(&self) -> u64 {
        self.lte.unwrap_or(0)
    }

    pub fn clear_lte(&mut self) {
        self.lte = ::std::option::Option::None;
    }

    pub fn has_lte(&self) -> bool {
        self.lte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lte(&mut self, v: u64) {
        self.lte = ::std::option::Option::Some(v);
    }

    // optional uint64 gt = 4;

    pub fn gt(&self) -> u64 {
        self.gt.unwrap_or(0)
    }

    pub fn clear_gt(&mut self) {
        self.gt = ::std::option::Option::None;
    }

    pub fn has_gt(&self) -> bool {
        self.gt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gt(&mut self, v: u64) {
        self.gt = ::std::option::Option::Some(v);
    }

    // optional uint64 gte = 5;

    pub fn gte(&self) -> u64 {
        self.gte.unwrap_or(0)
    }

    pub fn clear_gte(&mut self) {
        self.gte = ::std::option::Option::None;
    }

    pub fn has_gte(&self) -> bool {
        self.gte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gte(&mut self, v: u64) {
        self.gte = ::std::option::Option::Some(v);
    }

    // optional bool ignore_empty = 8;

    pub fn ignore_empty(&self) -> bool {
        self.ignore_empty.unwrap_or(false)
    }

    pub fn clear_ignore_empty(&mut self) {
        self.ignore_empty = ::std::option::Option::None;
    }

    pub fn has_ignore_empty(&self) -> bool {
        self.ignore_empty.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ignore_empty(&mut self, v: bool) {
        self.ignore_empty = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "const",
            |m: &UInt64Rules| { &m.const_ },
            |m: &mut UInt64Rules| { &mut m.const_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "lt",
            |m: &UInt64Rules| { &m.lt },
            |m: &mut UInt64Rules| { &mut m.lt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "lte",
            |m: &UInt64Rules| { &m.lte },
            |m: &mut UInt64Rules| { &mut m.lte },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gt",
            |m: &UInt64Rules| { &m.gt },
            |m: &mut UInt64Rules| { &mut m.gt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gte",
            |m: &UInt64Rules| { &m.gte },
            |m: &mut UInt64Rules| { &mut m.gte },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "in",
            |m: &UInt64Rules| { &m.in_ },
            |m: &mut UInt64Rules| { &mut m.in_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "not_in",
            |m: &UInt64Rules| { &m.not_in },
            |m: &mut UInt64Rules| { &mut m.not_in },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ignore_empty",
            |m: &UInt64Rules| { &m.ignore_empty },
            |m: &mut UInt64Rules| { &mut m.ignore_empty },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UInt64Rules>(
            "UInt64Rules",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UInt64Rules {
    const NAME: &'static str = "UInt64Rules";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.const_ = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.lt = ::std::option::Option::Some(is.read_uint64()?);
                },
                24 => {
                    self.lte = ::std::option::Option::Some(is.read_uint64()?);
                },
                32 => {
                    self.gt = ::std::option::Option::Some(is.read_uint64()?);
                },
                40 => {
                    self.gte = ::std::option::Option::Some(is.read_uint64()?);
                },
                50 => {
                    is.read_repeated_packed_uint64_into(&mut self.in_)?;
                },
                48 => {
                    self.in_.push(is.read_uint64()?);
                },
                58 => {
                    is.read_repeated_packed_uint64_into(&mut self.not_in)?;
                },
                56 => {
                    self.not_in.push(is.read_uint64()?);
                },
                64 => {
                    self.ignore_empty = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.const_ {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.lt {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.lte {
            my_size += ::protobuf::rt::uint64_size(3, v);
        }
        if let Some(v) = self.gt {
            my_size += ::protobuf::rt::uint64_size(4, v);
        }
        if let Some(v) = self.gte {
            my_size += ::protobuf::rt::uint64_size(5, v);
        }
        for value in &self.in_ {
            my_size += ::protobuf::rt::uint64_size(6, *value);
        };
        for value in &self.not_in {
            my_size += ::protobuf::rt::uint64_size(7, *value);
        };
        if let Some(v) = self.ignore_empty {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.const_ {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.lt {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.lte {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.gt {
            os.write_uint64(4, v)?;
        }
        if let Some(v) = self.gte {
            os.write_uint64(5, v)?;
        }
        for v in &self.in_ {
            os.write_uint64(6, *v)?;
        };
        for v in &self.not_in {
            os.write_uint64(7, *v)?;
        };
        if let Some(v) = self.ignore_empty {
            os.write_bool(8, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UInt64Rules {
        UInt64Rules::new()
    }

    fn clear(&mut self) {
        self.const_ = ::std::option::Option::None;
        self.lt = ::std::option::Option::None;
        self.lte = ::std::option::Option::None;
        self.gt = ::std::option::Option::None;
        self.gte = ::std::option::Option::None;
        self.in_.clear();
        self.not_in.clear();
        self.ignore_empty = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UInt64Rules {
        static instance: UInt64Rules = UInt64Rules {
            const_: ::std::option::Option::None,
            lt: ::std::option::Option::None,
            lte: ::std::option::Option::None,
            gt: ::std::option::Option::None,
            gte: ::std::option::Option::None,
            in_: ::std::vec::Vec::new(),
            not_in: ::std::vec::Vec::new(),
            ignore_empty: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UInt64Rules {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UInt64Rules").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UInt64Rules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UInt64Rules {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:validate.SInt32Rules)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SInt32Rules {
    // message fields
    // @@protoc_insertion_point(field:validate.SInt32Rules.const)
    pub const_: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:validate.SInt32Rules.lt)
    pub lt: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:validate.SInt32Rules.lte)
    pub lte: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:validate.SInt32Rules.gt)
    pub gt: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:validate.SInt32Rules.gte)
    pub gte: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:validate.SInt32Rules.in)
    pub in_: ::std::vec::Vec<i32>,
    // @@protoc_insertion_point(field:validate.SInt32Rules.not_in)
    pub not_in: ::std::vec::Vec<i32>,
    // @@protoc_insertion_point(field:validate.SInt32Rules.ignore_empty)
    pub ignore_empty: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:validate.SInt32Rules.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SInt32Rules {
    fn default() -> &'a SInt32Rules {
        <SInt32Rules as ::protobuf::Message>::default_instance()
    }
}

impl SInt32Rules {
    pub fn new() -> SInt32Rules {
        ::std::default::Default::default()
    }

    // optional sint32 const = 1;

    pub fn const_(&self) -> i32 {
        self.const_.unwrap_or(0)
    }

    pub fn clear_const_(&mut self) {
        self.const_ = ::std::option::Option::None;
    }

    pub fn has_const(&self) -> bool {
        self.const_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_const(&mut self, v: i32) {
        self.const_ = ::std::option::Option::Some(v);
    }

    // optional sint32 lt = 2;

    pub fn lt(&self) -> i32 {
        self.lt.unwrap_or(0)
    }

    pub fn clear_lt(&mut self) {
        self.lt = ::std::option::Option::None;
    }

    pub fn has_lt(&self) -> bool {
        self.lt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lt(&mut self, v: i32) {
        self.lt = ::std::option::Option::Some(v);
    }

    // optional sint32 lte = 3;

    pub fn lte(&self) -> i32 {
        self.lte.unwrap_or(0)
    }

    pub fn clear_lte(&mut self) {
        self.lte = ::std::option::Option::None;
    }

    pub fn has_lte(&self) -> bool {
        self.lte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lte(&mut self, v: i32) {
        self.lte = ::std::option::Option::Some(v);
    }

    // optional sint32 gt = 4;

    pub fn gt(&self) -> i32 {
        self.gt.unwrap_or(0)
    }

    pub fn clear_gt(&mut self) {
        self.gt = ::std::option::Option::None;
    }

    pub fn has_gt(&self) -> bool {
        self.gt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gt(&mut self, v: i32) {
        self.gt = ::std::option::Option::Some(v);
    }

    // optional sint32 gte = 5;

    pub fn gte(&self) -> i32 {
        self.gte.unwrap_or(0)
    }

    pub fn clear_gte(&mut self) {
        self.gte = ::std::option::Option::None;
    }

    pub fn has_gte(&self) -> bool {
        self.gte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gte(&mut self, v: i32) {
        self.gte = ::std::option::Option::Some(v);
    }

    // optional bool ignore_empty = 8;

    pub fn ignore_empty(&self) -> bool {
        self.ignore_empty.unwrap_or(false)
    }

    pub fn clear_ignore_empty(&mut self) {
        self.ignore_empty = ::std::option::Option::None;
    }

    pub fn has_ignore_empty(&self) -> bool {
        self.ignore_empty.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ignore_empty(&mut self, v: bool) {
        self.ignore_empty = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "const",
            |m: &SInt32Rules| { &m.const_ },
            |m: &mut SInt32Rules| { &mut m.const_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "lt",
            |m: &SInt32Rules| { &m.lt },
            |m: &mut SInt32Rules| { &mut m.lt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "lte",
            |m: &SInt32Rules| { &m.lte },
            |m: &mut SInt32Rules| { &mut m.lte },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gt",
            |m: &SInt32Rules| { &m.gt },
            |m: &mut SInt32Rules| { &mut m.gt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gte",
            |m: &SInt32Rules| { &m.gte },
            |m: &mut SInt32Rules| { &mut m.gte },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "in",
            |m: &SInt32Rules| { &m.in_ },
            |m: &mut SInt32Rules| { &mut m.in_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "not_in",
            |m: &SInt32Rules| { &m.not_in },
            |m: &mut SInt32Rules| { &mut m.not_in },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ignore_empty",
            |m: &SInt32Rules| { &m.ignore_empty },
            |m: &mut SInt32Rules| { &mut m.ignore_empty },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SInt32Rules>(
            "SInt32Rules",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SInt32Rules {
    const NAME: &'static str = "SInt32Rules";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.const_ = ::std::option::Option::Some(is.read_sint32()?);
                },
                16 => {
                    self.lt = ::std::option::Option::Some(is.read_sint32()?);
                },
                24 => {
                    self.lte = ::std::option::Option::Some(is.read_sint32()?);
                },
                32 => {
                    self.gt = ::std::option::Option::Some(is.read_sint32()?);
                },
                40 => {
                    self.gte = ::std::option::Option::Some(is.read_sint32()?);
                },
                50 => {
                    is.read_repeated_packed_sint32_into(&mut self.in_)?;
                },
                48 => {
                    self.in_.push(is.read_sint32()?);
                },
                58 => {
                    is.read_repeated_packed_sint32_into(&mut self.not_in)?;
                },
                56 => {
                    self.not_in.push(is.read_sint32()?);
                },
                64 => {
                    self.ignore_empty = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.const_ {
            my_size += ::protobuf::rt::sint32_size(1, v);
        }
        if let Some(v) = self.lt {
            my_size += ::protobuf::rt::sint32_size(2, v);
        }
        if let Some(v) = self.lte {
            my_size += ::protobuf::rt::sint32_size(3, v);
        }
        if let Some(v) = self.gt {
            my_size += ::protobuf::rt::sint32_size(4, v);
        }
        if let Some(v) = self.gte {
            my_size += ::protobuf::rt::sint32_size(5, v);
        }
        for value in &self.in_ {
            my_size += ::protobuf::rt::sint32_size(6, *value);
        };
        for value in &self.not_in {
            my_size += ::protobuf::rt::sint32_size(7, *value);
        };
        if let Some(v) = self.ignore_empty {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.const_ {
            os.write_sint32(1, v)?;
        }
        if let Some(v) = self.lt {
            os.write_sint32(2, v)?;
        }
        if let Some(v) = self.lte {
            os.write_sint32(3, v)?;
        }
        if let Some(v) = self.gt {
            os.write_sint32(4, v)?;
        }
        if let Some(v) = self.gte {
            os.write_sint32(5, v)?;
        }
        for v in &self.in_ {
            os.write_sint32(6, *v)?;
        };
        for v in &self.not_in {
            os.write_sint32(7, *v)?;
        };
        if let Some(v) = self.ignore_empty {
            os.write_bool(8, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SInt32Rules {
        SInt32Rules::new()
    }

    fn clear(&mut self) {
        self.const_ = ::std::option::Option::None;
        self.lt = ::std::option::Option::None;
        self.lte = ::std::option::Option::None;
        self.gt = ::std::option::Option::None;
        self.gte = ::std::option::Option::None;
        self.in_.clear();
        self.not_in.clear();
        self.ignore_empty = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SInt32Rules {
        static instance: SInt32Rules = SInt32Rules {
            const_: ::std::option::Option::None,
            lt: ::std::option::Option::None,
            lte: ::std::option::Option::None,
            gt: ::std::option::Option::None,
            gte: ::std::option::Option::None,
            in_: ::std::vec::Vec::new(),
            not_in: ::std::vec::Vec::new(),
            ignore_empty: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SInt32Rules {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SInt32Rules").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SInt32Rules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SInt32Rules {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:validate.SInt64Rules)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SInt64Rules {
    // message fields
    // @@protoc_insertion_point(field:validate.SInt64Rules.const)
    pub const_: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:validate.SInt64Rules.lt)
    pub lt: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:validate.SInt64Rules.lte)
    pub lte: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:validate.SInt64Rules.gt)
    pub gt: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:validate.SInt64Rules.gte)
    pub gte: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:validate.SInt64Rules.in)
    pub in_: ::std::vec::Vec<i64>,
    // @@protoc_insertion_point(field:validate.SInt64Rules.not_in)
    pub not_in: ::std::vec::Vec<i64>,
    // @@protoc_insertion_point(field:validate.SInt64Rules.ignore_empty)
    pub ignore_empty: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:validate.SInt64Rules.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SInt64Rules {
    fn default() -> &'a SInt64Rules {
        <SInt64Rules as ::protobuf::Message>::default_instance()
    }
}

impl SInt64Rules {
    pub fn new() -> SInt64Rules {
        ::std::default::Default::default()
    }

    // optional sint64 const = 1;

    pub fn const_(&self) -> i64 {
        self.const_.unwrap_or(0)
    }

    pub fn clear_const_(&mut self) {
        self.const_ = ::std::option::Option::None;
    }

    pub fn has_const(&self) -> bool {
        self.const_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_const(&mut self, v: i64) {
        self.const_ = ::std::option::Option::Some(v);
    }

    // optional sint64 lt = 2;

    pub fn lt(&self) -> i64 {
        self.lt.unwrap_or(0)
    }

    pub fn clear_lt(&mut self) {
        self.lt = ::std::option::Option::None;
    }

    pub fn has_lt(&self) -> bool {
        self.lt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lt(&mut self, v: i64) {
        self.lt = ::std::option::Option::Some(v);
    }

    // optional sint64 lte = 3;

    pub fn lte(&self) -> i64 {
        self.lte.unwrap_or(0)
    }

    pub fn clear_lte(&mut self) {
        self.lte = ::std::option::Option::None;
    }

    pub fn has_lte(&self) -> bool {
        self.lte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lte(&mut self, v: i64) {
        self.lte = ::std::option::Option::Some(v);
    }

    // optional sint64 gt = 4;

    pub fn gt(&self) -> i64 {
        self.gt.unwrap_or(0)
    }

    pub fn clear_gt(&mut self) {
        self.gt = ::std::option::Option::None;
    }

    pub fn has_gt(&self) -> bool {
        self.gt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gt(&mut self, v: i64) {
        self.gt = ::std::option::Option::Some(v);
    }

    // optional sint64 gte = 5;

    pub fn gte(&self) -> i64 {
        self.gte.unwrap_or(0)
    }

    pub fn clear_gte(&mut self) {
        self.gte = ::std::option::Option::None;
    }

    pub fn has_gte(&self) -> bool {
        self.gte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gte(&mut self, v: i64) {
        self.gte = ::std::option::Option::Some(v);
    }

    // optional bool ignore_empty = 8;

    pub fn ignore_empty(&self) -> bool {
        self.ignore_empty.unwrap_or(false)
    }

    pub fn clear_ignore_empty(&mut self) {
        self.ignore_empty = ::std::option::Option::None;
    }

    pub fn has_ignore_empty(&self) -> bool {
        self.ignore_empty.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ignore_empty(&mut self, v: bool) {
        self.ignore_empty = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "const",
            |m: &SInt64Rules| { &m.const_ },
            |m: &mut SInt64Rules| { &mut m.const_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "lt",
            |m: &SInt64Rules| { &m.lt },
            |m: &mut SInt64Rules| { &mut m.lt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "lte",
            |m: &SInt64Rules| { &m.lte },
            |m: &mut SInt64Rules| { &mut m.lte },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gt",
            |m: &SInt64Rules| { &m.gt },
            |m: &mut SInt64Rules| { &mut m.gt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gte",
            |m: &SInt64Rules| { &m.gte },
            |m: &mut SInt64Rules| { &mut m.gte },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "in",
            |m: &SInt64Rules| { &m.in_ },
            |m: &mut SInt64Rules| { &mut m.in_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "not_in",
            |m: &SInt64Rules| { &m.not_in },
            |m: &mut SInt64Rules| { &mut m.not_in },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ignore_empty",
            |m: &SInt64Rules| { &m.ignore_empty },
            |m: &mut SInt64Rules| { &mut m.ignore_empty },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SInt64Rules>(
            "SInt64Rules",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SInt64Rules {
    const NAME: &'static str = "SInt64Rules";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.const_ = ::std::option::Option::Some(is.read_sint64()?);
                },
                16 => {
                    self.lt = ::std::option::Option::Some(is.read_sint64()?);
                },
                24 => {
                    self.lte = ::std::option::Option::Some(is.read_sint64()?);
                },
                32 => {
                    self.gt = ::std::option::Option::Some(is.read_sint64()?);
                },
                40 => {
                    self.gte = ::std::option::Option::Some(is.read_sint64()?);
                },
                50 => {
                    is.read_repeated_packed_sint64_into(&mut self.in_)?;
                },
                48 => {
                    self.in_.push(is.read_sint64()?);
                },
                58 => {
                    is.read_repeated_packed_sint64_into(&mut self.not_in)?;
                },
                56 => {
                    self.not_in.push(is.read_sint64()?);
                },
                64 => {
                    self.ignore_empty = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.const_ {
            my_size += ::protobuf::rt::sint64_size(1, v);
        }
        if let Some(v) = self.lt {
            my_size += ::protobuf::rt::sint64_size(2, v);
        }
        if let Some(v) = self.lte {
            my_size += ::protobuf::rt::sint64_size(3, v);
        }
        if let Some(v) = self.gt {
            my_size += ::protobuf::rt::sint64_size(4, v);
        }
        if let Some(v) = self.gte {
            my_size += ::protobuf::rt::sint64_size(5, v);
        }
        for value in &self.in_ {
            my_size += ::protobuf::rt::sint64_size(6, *value);
        };
        for value in &self.not_in {
            my_size += ::protobuf::rt::sint64_size(7, *value);
        };
        if let Some(v) = self.ignore_empty {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.const_ {
            os.write_sint64(1, v)?;
        }
        if let Some(v) = self.lt {
            os.write_sint64(2, v)?;
        }
        if let Some(v) = self.lte {
            os.write_sint64(3, v)?;
        }
        if let Some(v) = self.gt {
            os.write_sint64(4, v)?;
        }
        if let Some(v) = self.gte {
            os.write_sint64(5, v)?;
        }
        for v in &self.in_ {
            os.write_sint64(6, *v)?;
        };
        for v in &self.not_in {
            os.write_sint64(7, *v)?;
        };
        if let Some(v) = self.ignore_empty {
            os.write_bool(8, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SInt64Rules {
        SInt64Rules::new()
    }

    fn clear(&mut self) {
        self.const_ = ::std::option::Option::None;
        self.lt = ::std::option::Option::None;
        self.lte = ::std::option::Option::None;
        self.gt = ::std::option::Option::None;
        self.gte = ::std::option::Option::None;
        self.in_.clear();
        self.not_in.clear();
        self.ignore_empty = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SInt64Rules {
        static instance: SInt64Rules = SInt64Rules {
            const_: ::std::option::Option::None,
            lt: ::std::option::Option::None,
            lte: ::std::option::Option::None,
            gt: ::std::option::Option::None,
            gte: ::std::option::Option::None,
            in_: ::std::vec::Vec::new(),
            not_in: ::std::vec::Vec::new(),
            ignore_empty: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SInt64Rules {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SInt64Rules").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SInt64Rules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SInt64Rules {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:validate.Fixed32Rules)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Fixed32Rules {
    // message fields
    // @@protoc_insertion_point(field:validate.Fixed32Rules.const)
    pub const_: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:validate.Fixed32Rules.lt)
    pub lt: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:validate.Fixed32Rules.lte)
    pub lte: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:validate.Fixed32Rules.gt)
    pub gt: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:validate.Fixed32Rules.gte)
    pub gte: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:validate.Fixed32Rules.in)
    pub in_: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:validate.Fixed32Rules.not_in)
    pub not_in: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:validate.Fixed32Rules.ignore_empty)
    pub ignore_empty: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:validate.Fixed32Rules.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Fixed32Rules {
    fn default() -> &'a Fixed32Rules {
        <Fixed32Rules as ::protobuf::Message>::default_instance()
    }
}

impl Fixed32Rules {
    pub fn new() -> Fixed32Rules {
        ::std::default::Default::default()
    }

    // optional fixed32 const = 1;

    pub fn const_(&self) -> u32 {
        self.const_.unwrap_or(0)
    }

    pub fn clear_const_(&mut self) {
        self.const_ = ::std::option::Option::None;
    }

    pub fn has_const(&self) -> bool {
        self.const_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_const(&mut self, v: u32) {
        self.const_ = ::std::option::Option::Some(v);
    }

    // optional fixed32 lt = 2;

    pub fn lt(&self) -> u32 {
        self.lt.unwrap_or(0)
    }

    pub fn clear_lt(&mut self) {
        self.lt = ::std::option::Option::None;
    }

    pub fn has_lt(&self) -> bool {
        self.lt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lt(&mut self, v: u32) {
        self.lt = ::std::option::Option::Some(v);
    }

    // optional fixed32 lte = 3;

    pub fn lte(&self) -> u32 {
        self.lte.unwrap_or(0)
    }

    pub fn clear_lte(&mut self) {
        self.lte = ::std::option::Option::None;
    }

    pub fn has_lte(&self) -> bool {
        self.lte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lte(&mut self, v: u32) {
        self.lte = ::std::option::Option::Some(v);
    }

    // optional fixed32 gt = 4;

    pub fn gt(&self) -> u32 {
        self.gt.unwrap_or(0)
    }

    pub fn clear_gt(&mut self) {
        self.gt = ::std::option::Option::None;
    }

    pub fn has_gt(&self) -> bool {
        self.gt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gt(&mut self, v: u32) {
        self.gt = ::std::option::Option::Some(v);
    }

    // optional fixed32 gte = 5;

    pub fn gte(&self) -> u32 {
        self.gte.unwrap_or(0)
    }

    pub fn clear_gte(&mut self) {
        self.gte = ::std::option::Option::None;
    }

    pub fn has_gte(&self) -> bool {
        self.gte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gte(&mut self, v: u32) {
        self.gte = ::std::option::Option::Some(v);
    }

    // optional bool ignore_empty = 8;

    pub fn ignore_empty(&self) -> bool {
        self.ignore_empty.unwrap_or(false)
    }

    pub fn clear_ignore_empty(&mut self) {
        self.ignore_empty = ::std::option::Option::None;
    }

    pub fn has_ignore_empty(&self) -> bool {
        self.ignore_empty.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ignore_empty(&mut self, v: bool) {
        self.ignore_empty = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "const",
            |m: &Fixed32Rules| { &m.const_ },
            |m: &mut Fixed32Rules| { &mut m.const_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "lt",
            |m: &Fixed32Rules| { &m.lt },
            |m: &mut Fixed32Rules| { &mut m.lt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "lte",
            |m: &Fixed32Rules| { &m.lte },
            |m: &mut Fixed32Rules| { &mut m.lte },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gt",
            |m: &Fixed32Rules| { &m.gt },
            |m: &mut Fixed32Rules| { &mut m.gt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gte",
            |m: &Fixed32Rules| { &m.gte },
            |m: &mut Fixed32Rules| { &mut m.gte },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "in",
            |m: &Fixed32Rules| { &m.in_ },
            |m: &mut Fixed32Rules| { &mut m.in_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "not_in",
            |m: &Fixed32Rules| { &m.not_in },
            |m: &mut Fixed32Rules| { &mut m.not_in },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ignore_empty",
            |m: &Fixed32Rules| { &m.ignore_empty },
            |m: &mut Fixed32Rules| { &mut m.ignore_empty },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Fixed32Rules>(
            "Fixed32Rules",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Fixed32Rules {
    const NAME: &'static str = "Fixed32Rules";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.const_ = ::std::option::Option::Some(is.read_fixed32()?);
                },
                21 => {
                    self.lt = ::std::option::Option::Some(is.read_fixed32()?);
                },
                29 => {
                    self.lte = ::std::option::Option::Some(is.read_fixed32()?);
                },
                37 => {
                    self.gt = ::std::option::Option::Some(is.read_fixed32()?);
                },
                45 => {
                    self.gte = ::std::option::Option::Some(is.read_fixed32()?);
                },
                50 => {
                    is.read_repeated_packed_fixed32_into(&mut self.in_)?;
                },
                53 => {
                    self.in_.push(is.read_fixed32()?);
                },
                58 => {
                    is.read_repeated_packed_fixed32_into(&mut self.not_in)?;
                },
                61 => {
                    self.not_in.push(is.read_fixed32()?);
                },
                64 => {
                    self.ignore_empty = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.const_ {
            my_size += 1 + 4;
        }
        if let Some(v) = self.lt {
            my_size += 1 + 4;
        }
        if let Some(v) = self.lte {
            my_size += 1 + 4;
        }
        if let Some(v) = self.gt {
            my_size += 1 + 4;
        }
        if let Some(v) = self.gte {
            my_size += 1 + 4;
        }
        my_size += 5 * self.in_.len() as u64;
        my_size += 5 * self.not_in.len() as u64;
        if let Some(v) = self.ignore_empty {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.const_ {
            os.write_fixed32(1, v)?;
        }
        if let Some(v) = self.lt {
            os.write_fixed32(2, v)?;
        }
        if let Some(v) = self.lte {
            os.write_fixed32(3, v)?;
        }
        if let Some(v) = self.gt {
            os.write_fixed32(4, v)?;
        }
        if let Some(v) = self.gte {
            os.write_fixed32(5, v)?;
        }
        for v in &self.in_ {
            os.write_fixed32(6, *v)?;
        };
        for v in &self.not_in {
            os.write_fixed32(7, *v)?;
        };
        if let Some(v) = self.ignore_empty {
            os.write_bool(8, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Fixed32Rules {
        Fixed32Rules::new()
    }

    fn clear(&mut self) {
        self.const_ = ::std::option::Option::None;
        self.lt = ::std::option::Option::None;
        self.lte = ::std::option::Option::None;
        self.gt = ::std::option::Option::None;
        self.gte = ::std::option::Option::None;
        self.in_.clear();
        self.not_in.clear();
        self.ignore_empty = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Fixed32Rules {
        static instance: Fixed32Rules = Fixed32Rules {
            const_: ::std::option::Option::None,
            lt: ::std::option::Option::None,
            lte: ::std::option::Option::None,
            gt: ::std::option::Option::None,
            gte: ::std::option::Option::None,
            in_: ::std::vec::Vec::new(),
            not_in: ::std::vec::Vec::new(),
            ignore_empty: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Fixed32Rules {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Fixed32Rules").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Fixed32Rules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Fixed32Rules {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:validate.Fixed64Rules)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Fixed64Rules {
    // message fields
    // @@protoc_insertion_point(field:validate.Fixed64Rules.const)
    pub const_: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:validate.Fixed64Rules.lt)
    pub lt: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:validate.Fixed64Rules.lte)
    pub lte: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:validate.Fixed64Rules.gt)
    pub gt: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:validate.Fixed64Rules.gte)
    pub gte: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:validate.Fixed64Rules.in)
    pub in_: ::std::vec::Vec<u64>,
    // @@protoc_insertion_point(field:validate.Fixed64Rules.not_in)
    pub not_in: ::std::vec::Vec<u64>,
    // @@protoc_insertion_point(field:validate.Fixed64Rules.ignore_empty)
    pub ignore_empty: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:validate.Fixed64Rules.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Fixed64Rules {
    fn default() -> &'a Fixed64Rules {
        <Fixed64Rules as ::protobuf::Message>::default_instance()
    }
}

impl Fixed64Rules {
    pub fn new() -> Fixed64Rules {
        ::std::default::Default::default()
    }

    // optional fixed64 const = 1;

    pub fn const_(&self) -> u64 {
        self.const_.unwrap_or(0)
    }

    pub fn clear_const_(&mut self) {
        self.const_ = ::std::option::Option::None;
    }

    pub fn has_const(&self) -> bool {
        self.const_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_const(&mut self, v: u64) {
        self.const_ = ::std::option::Option::Some(v);
    }

    // optional fixed64 lt = 2;

    pub fn lt(&self) -> u64 {
        self.lt.unwrap_or(0)
    }

    pub fn clear_lt(&mut self) {
        self.lt = ::std::option::Option::None;
    }

    pub fn has_lt(&self) -> bool {
        self.lt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lt(&mut self, v: u64) {
        self.lt = ::std::option::Option::Some(v);
    }

    // optional fixed64 lte = 3;

    pub fn lte(&self) -> u64 {
        self.lte.unwrap_or(0)
    }

    pub fn clear_lte(&mut self) {
        self.lte = ::std::option::Option::None;
    }

    pub fn has_lte(&self) -> bool {
        self.lte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lte(&mut self, v: u64) {
        self.lte = ::std::option::Option::Some(v);
    }

    // optional fixed64 gt = 4;

    pub fn gt(&self) -> u64 {
        self.gt.unwrap_or(0)
    }

    pub fn clear_gt(&mut self) {
        self.gt = ::std::option::Option::None;
    }

    pub fn has_gt(&self) -> bool {
        self.gt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gt(&mut self, v: u64) {
        self.gt = ::std::option::Option::Some(v);
    }

    // optional fixed64 gte = 5;

    pub fn gte(&self) -> u64 {
        self.gte.unwrap_or(0)
    }

    pub fn clear_gte(&mut self) {
        self.gte = ::std::option::Option::None;
    }

    pub fn has_gte(&self) -> bool {
        self.gte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gte(&mut self, v: u64) {
        self.gte = ::std::option::Option::Some(v);
    }

    // optional bool ignore_empty = 8;

    pub fn ignore_empty(&self) -> bool {
        self.ignore_empty.unwrap_or(false)
    }

    pub fn clear_ignore_empty(&mut self) {
        self.ignore_empty = ::std::option::Option::None;
    }

    pub fn has_ignore_empty(&self) -> bool {
        self.ignore_empty.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ignore_empty(&mut self, v: bool) {
        self.ignore_empty = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "const",
            |m: &Fixed64Rules| { &m.const_ },
            |m: &mut Fixed64Rules| { &mut m.const_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "lt",
            |m: &Fixed64Rules| { &m.lt },
            |m: &mut Fixed64Rules| { &mut m.lt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "lte",
            |m: &Fixed64Rules| { &m.lte },
            |m: &mut Fixed64Rules| { &mut m.lte },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gt",
            |m: &Fixed64Rules| { &m.gt },
            |m: &mut Fixed64Rules| { &mut m.gt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gte",
            |m: &Fixed64Rules| { &m.gte },
            |m: &mut Fixed64Rules| { &mut m.gte },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "in",
            |m: &Fixed64Rules| { &m.in_ },
            |m: &mut Fixed64Rules| { &mut m.in_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "not_in",
            |m: &Fixed64Rules| { &m.not_in },
            |m: &mut Fixed64Rules| { &mut m.not_in },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ignore_empty",
            |m: &Fixed64Rules| { &m.ignore_empty },
            |m: &mut Fixed64Rules| { &mut m.ignore_empty },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Fixed64Rules>(
            "Fixed64Rules",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Fixed64Rules {
    const NAME: &'static str = "Fixed64Rules";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.const_ = ::std::option::Option::Some(is.read_fixed64()?);
                },
                17 => {
                    self.lt = ::std::option::Option::Some(is.read_fixed64()?);
                },
                25 => {
                    self.lte = ::std::option::Option::Some(is.read_fixed64()?);
                },
                33 => {
                    self.gt = ::std::option::Option::Some(is.read_fixed64()?);
                },
                41 => {
                    self.gte = ::std::option::Option::Some(is.read_fixed64()?);
                },
                50 => {
                    is.read_repeated_packed_fixed64_into(&mut self.in_)?;
                },
                49 => {
                    self.in_.push(is.read_fixed64()?);
                },
                58 => {
                    is.read_repeated_packed_fixed64_into(&mut self.not_in)?;
                },
                57 => {
                    self.not_in.push(is.read_fixed64()?);
                },
                64 => {
                    self.ignore_empty = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.const_ {
            my_size += 1 + 8;
        }
        if let Some(v) = self.lt {
            my_size += 1 + 8;
        }
        if let Some(v) = self.lte {
            my_size += 1 + 8;
        }
        if let Some(v) = self.gt {
            my_size += 1 + 8;
        }
        if let Some(v) = self.gte {
            my_size += 1 + 8;
        }
        my_size += 9 * self.in_.len() as u64;
        my_size += 9 * self.not_in.len() as u64;
        if let Some(v) = self.ignore_empty {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.const_ {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.lt {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.lte {
            os.write_fixed64(3, v)?;
        }
        if let Some(v) = self.gt {
            os.write_fixed64(4, v)?;
        }
        if let Some(v) = self.gte {
            os.write_fixed64(5, v)?;
        }
        for v in &self.in_ {
            os.write_fixed64(6, *v)?;
        };
        for v in &self.not_in {
            os.write_fixed64(7, *v)?;
        };
        if let Some(v) = self.ignore_empty {
            os.write_bool(8, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Fixed64Rules {
        Fixed64Rules::new()
    }

    fn clear(&mut self) {
        self.const_ = ::std::option::Option::None;
        self.lt = ::std::option::Option::None;
        self.lte = ::std::option::Option::None;
        self.gt = ::std::option::Option::None;
        self.gte = ::std::option::Option::None;
        self.in_.clear();
        self.not_in.clear();
        self.ignore_empty = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Fixed64Rules {
        static instance: Fixed64Rules = Fixed64Rules {
            const_: ::std::option::Option::None,
            lt: ::std::option::Option::None,
            lte: ::std::option::Option::None,
            gt: ::std::option::Option::None,
            gte: ::std::option::Option::None,
            in_: ::std::vec::Vec::new(),
            not_in: ::std::vec::Vec::new(),
            ignore_empty: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Fixed64Rules {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Fixed64Rules").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Fixed64Rules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Fixed64Rules {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:validate.SFixed32Rules)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SFixed32Rules {
    // message fields
    // @@protoc_insertion_point(field:validate.SFixed32Rules.const)
    pub const_: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:validate.SFixed32Rules.lt)
    pub lt: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:validate.SFixed32Rules.lte)
    pub lte: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:validate.SFixed32Rules.gt)
    pub gt: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:validate.SFixed32Rules.gte)
    pub gte: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:validate.SFixed32Rules.in)
    pub in_: ::std::vec::Vec<i32>,
    // @@protoc_insertion_point(field:validate.SFixed32Rules.not_in)
    pub not_in: ::std::vec::Vec<i32>,
    // @@protoc_insertion_point(field:validate.SFixed32Rules.ignore_empty)
    pub ignore_empty: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:validate.SFixed32Rules.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SFixed32Rules {
    fn default() -> &'a SFixed32Rules {
        <SFixed32Rules as ::protobuf::Message>::default_instance()
    }
}

impl SFixed32Rules {
    pub fn new() -> SFixed32Rules {
        ::std::default::Default::default()
    }

    // optional sfixed32 const = 1;

    pub fn const_(&self) -> i32 {
        self.const_.unwrap_or(0)
    }

    pub fn clear_const_(&mut self) {
        self.const_ = ::std::option::Option::None;
    }

    pub fn has_const(&self) -> bool {
        self.const_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_const(&mut self, v: i32) {
        self.const_ = ::std::option::Option::Some(v);
    }

    // optional sfixed32 lt = 2;

    pub fn lt(&self) -> i32 {
        self.lt.unwrap_or(0)
    }

    pub fn clear_lt(&mut self) {
        self.lt = ::std::option::Option::None;
    }

    pub fn has_lt(&self) -> bool {
        self.lt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lt(&mut self, v: i32) {
        self.lt = ::std::option::Option::Some(v);
    }

    // optional sfixed32 lte = 3;

    pub fn lte(&self) -> i32 {
        self.lte.unwrap_or(0)
    }

    pub fn clear_lte(&mut self) {
        self.lte = ::std::option::Option::None;
    }

    pub fn has_lte(&self) -> bool {
        self.lte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lte(&mut self, v: i32) {
        self.lte = ::std::option::Option::Some(v);
    }

    // optional sfixed32 gt = 4;

    pub fn gt(&self) -> i32 {
        self.gt.unwrap_or(0)
    }

    pub fn clear_gt(&mut self) {
        self.gt = ::std::option::Option::None;
    }

    pub fn has_gt(&self) -> bool {
        self.gt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gt(&mut self, v: i32) {
        self.gt = ::std::option::Option::Some(v);
    }

    // optional sfixed32 gte = 5;

    pub fn gte(&self) -> i32 {
        self.gte.unwrap_or(0)
    }

    pub fn clear_gte(&mut self) {
        self.gte = ::std::option::Option::None;
    }

    pub fn has_gte(&self) -> bool {
        self.gte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gte(&mut self, v: i32) {
        self.gte = ::std::option::Option::Some(v);
    }

    // optional bool ignore_empty = 8;

    pub fn ignore_empty(&self) -> bool {
        self.ignore_empty.unwrap_or(false)
    }

    pub fn clear_ignore_empty(&mut self) {
        self.ignore_empty = ::std::option::Option::None;
    }

    pub fn has_ignore_empty(&self) -> bool {
        self.ignore_empty.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ignore_empty(&mut self, v: bool) {
        self.ignore_empty = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "const",
            |m: &SFixed32Rules| { &m.const_ },
            |m: &mut SFixed32Rules| { &mut m.const_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "lt",
            |m: &SFixed32Rules| { &m.lt },
            |m: &mut SFixed32Rules| { &mut m.lt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "lte",
            |m: &SFixed32Rules| { &m.lte },
            |m: &mut SFixed32Rules| { &mut m.lte },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gt",
            |m: &SFixed32Rules| { &m.gt },
            |m: &mut SFixed32Rules| { &mut m.gt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gte",
            |m: &SFixed32Rules| { &m.gte },
            |m: &mut SFixed32Rules| { &mut m.gte },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "in",
            |m: &SFixed32Rules| { &m.in_ },
            |m: &mut SFixed32Rules| { &mut m.in_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "not_in",
            |m: &SFixed32Rules| { &m.not_in },
            |m: &mut SFixed32Rules| { &mut m.not_in },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ignore_empty",
            |m: &SFixed32Rules| { &m.ignore_empty },
            |m: &mut SFixed32Rules| { &mut m.ignore_empty },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SFixed32Rules>(
            "SFixed32Rules",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SFixed32Rules {
    const NAME: &'static str = "SFixed32Rules";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.const_ = ::std::option::Option::Some(is.read_sfixed32()?);
                },
                21 => {
                    self.lt = ::std::option::Option::Some(is.read_sfixed32()?);
                },
                29 => {
                    self.lte = ::std::option::Option::Some(is.read_sfixed32()?);
                },
                37 => {
                    self.gt = ::std::option::Option::Some(is.read_sfixed32()?);
                },
                45 => {
                    self.gte = ::std::option::Option::Some(is.read_sfixed32()?);
                },
                50 => {
                    is.read_repeated_packed_sfixed32_into(&mut self.in_)?;
                },
                53 => {
                    self.in_.push(is.read_sfixed32()?);
                },
                58 => {
                    is.read_repeated_packed_sfixed32_into(&mut self.not_in)?;
                },
                61 => {
                    self.not_in.push(is.read_sfixed32()?);
                },
                64 => {
                    self.ignore_empty = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.const_ {
            my_size += 1 + 4;
        }
        if let Some(v) = self.lt {
            my_size += 1 + 4;
        }
        if let Some(v) = self.lte {
            my_size += 1 + 4;
        }
        if let Some(v) = self.gt {
            my_size += 1 + 4;
        }
        if let Some(v) = self.gte {
            my_size += 1 + 4;
        }
        my_size += 5 * self.in_.len() as u64;
        my_size += 5 * self.not_in.len() as u64;
        if let Some(v) = self.ignore_empty {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.const_ {
            os.write_sfixed32(1, v)?;
        }
        if let Some(v) = self.lt {
            os.write_sfixed32(2, v)?;
        }
        if let Some(v) = self.lte {
            os.write_sfixed32(3, v)?;
        }
        if let Some(v) = self.gt {
            os.write_sfixed32(4, v)?;
        }
        if let Some(v) = self.gte {
            os.write_sfixed32(5, v)?;
        }
        for v in &self.in_ {
            os.write_sfixed32(6, *v)?;
        };
        for v in &self.not_in {
            os.write_sfixed32(7, *v)?;
        };
        if let Some(v) = self.ignore_empty {
            os.write_bool(8, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SFixed32Rules {
        SFixed32Rules::new()
    }

    fn clear(&mut self) {
        self.const_ = ::std::option::Option::None;
        self.lt = ::std::option::Option::None;
        self.lte = ::std::option::Option::None;
        self.gt = ::std::option::Option::None;
        self.gte = ::std::option::Option::None;
        self.in_.clear();
        self.not_in.clear();
        self.ignore_empty = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SFixed32Rules {
        static instance: SFixed32Rules = SFixed32Rules {
            const_: ::std::option::Option::None,
            lt: ::std::option::Option::None,
            lte: ::std::option::Option::None,
            gt: ::std::option::Option::None,
            gte: ::std::option::Option::None,
            in_: ::std::vec::Vec::new(),
            not_in: ::std::vec::Vec::new(),
            ignore_empty: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SFixed32Rules {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SFixed32Rules").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SFixed32Rules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SFixed32Rules {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:validate.SFixed64Rules)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SFixed64Rules {
    // message fields
    // @@protoc_insertion_point(field:validate.SFixed64Rules.const)
    pub const_: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:validate.SFixed64Rules.lt)
    pub lt: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:validate.SFixed64Rules.lte)
    pub lte: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:validate.SFixed64Rules.gt)
    pub gt: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:validate.SFixed64Rules.gte)
    pub gte: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:validate.SFixed64Rules.in)
    pub in_: ::std::vec::Vec<i64>,
    // @@protoc_insertion_point(field:validate.SFixed64Rules.not_in)
    pub not_in: ::std::vec::Vec<i64>,
    // @@protoc_insertion_point(field:validate.SFixed64Rules.ignore_empty)
    pub ignore_empty: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:validate.SFixed64Rules.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SFixed64Rules {
    fn default() -> &'a SFixed64Rules {
        <SFixed64Rules as ::protobuf::Message>::default_instance()
    }
}

impl SFixed64Rules {
    pub fn new() -> SFixed64Rules {
        ::std::default::Default::default()
    }

    // optional sfixed64 const = 1;

    pub fn const_(&self) -> i64 {
        self.const_.unwrap_or(0)
    }

    pub fn clear_const_(&mut self) {
        self.const_ = ::std::option::Option::None;
    }

    pub fn has_const(&self) -> bool {
        self.const_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_const(&mut self, v: i64) {
        self.const_ = ::std::option::Option::Some(v);
    }

    // optional sfixed64 lt = 2;

    pub fn lt(&self) -> i64 {
        self.lt.unwrap_or(0)
    }

    pub fn clear_lt(&mut self) {
        self.lt = ::std::option::Option::None;
    }

    pub fn has_lt(&self) -> bool {
        self.lt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lt(&mut self, v: i64) {
        self.lt = ::std::option::Option::Some(v);
    }

    // optional sfixed64 lte = 3;

    pub fn lte(&self) -> i64 {
        self.lte.unwrap_or(0)
    }

    pub fn clear_lte(&mut self) {
        self.lte = ::std::option::Option::None;
    }

    pub fn has_lte(&self) -> bool {
        self.lte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lte(&mut self, v: i64) {
        self.lte = ::std::option::Option::Some(v);
    }

    // optional sfixed64 gt = 4;

    pub fn gt(&self) -> i64 {
        self.gt.unwrap_or(0)
    }

    pub fn clear_gt(&mut self) {
        self.gt = ::std::option::Option::None;
    }

    pub fn has_gt(&self) -> bool {
        self.gt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gt(&mut self, v: i64) {
        self.gt = ::std::option::Option::Some(v);
    }

    // optional sfixed64 gte = 5;

    pub fn gte(&self) -> i64 {
        self.gte.unwrap_or(0)
    }

    pub fn clear_gte(&mut self) {
        self.gte = ::std::option::Option::None;
    }

    pub fn has_gte(&self) -> bool {
        self.gte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gte(&mut self, v: i64) {
        self.gte = ::std::option::Option::Some(v);
    }

    // optional bool ignore_empty = 8;

    pub fn ignore_empty(&self) -> bool {
        self.ignore_empty.unwrap_or(false)
    }

    pub fn clear_ignore_empty(&mut self) {
        self.ignore_empty = ::std::option::Option::None;
    }

    pub fn has_ignore_empty(&self) -> bool {
        self.ignore_empty.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ignore_empty(&mut self, v: bool) {
        self.ignore_empty = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "const",
            |m: &SFixed64Rules| { &m.const_ },
            |m: &mut SFixed64Rules| { &mut m.const_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "lt",
            |m: &SFixed64Rules| { &m.lt },
            |m: &mut SFixed64Rules| { &mut m.lt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "lte",
            |m: &SFixed64Rules| { &m.lte },
            |m: &mut SFixed64Rules| { &mut m.lte },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gt",
            |m: &SFixed64Rules| { &m.gt },
            |m: &mut SFixed64Rules| { &mut m.gt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gte",
            |m: &SFixed64Rules| { &m.gte },
            |m: &mut SFixed64Rules| { &mut m.gte },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "in",
            |m: &SFixed64Rules| { &m.in_ },
            |m: &mut SFixed64Rules| { &mut m.in_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "not_in",
            |m: &SFixed64Rules| { &m.not_in },
            |m: &mut SFixed64Rules| { &mut m.not_in },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ignore_empty",
            |m: &SFixed64Rules| { &m.ignore_empty },
            |m: &mut SFixed64Rules| { &mut m.ignore_empty },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SFixed64Rules>(
            "SFixed64Rules",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SFixed64Rules {
    const NAME: &'static str = "SFixed64Rules";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.const_ = ::std::option::Option::Some(is.read_sfixed64()?);
                },
                17 => {
                    self.lt = ::std::option::Option::Some(is.read_sfixed64()?);
                },
                25 => {
                    self.lte = ::std::option::Option::Some(is.read_sfixed64()?);
                },
                33 => {
                    self.gt = ::std::option::Option::Some(is.read_sfixed64()?);
                },
                41 => {
                    self.gte = ::std::option::Option::Some(is.read_sfixed64()?);
                },
                50 => {
                    is.read_repeated_packed_sfixed64_into(&mut self.in_)?;
                },
                49 => {
                    self.in_.push(is.read_sfixed64()?);
                },
                58 => {
                    is.read_repeated_packed_sfixed64_into(&mut self.not_in)?;
                },
                57 => {
                    self.not_in.push(is.read_sfixed64()?);
                },
                64 => {
                    self.ignore_empty = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.const_ {
            my_size += 1 + 8;
        }
        if let Some(v) = self.lt {
            my_size += 1 + 8;
        }
        if let Some(v) = self.lte {
            my_size += 1 + 8;
        }
        if let Some(v) = self.gt {
            my_size += 1 + 8;
        }
        if let Some(v) = self.gte {
            my_size += 1 + 8;
        }
        my_size += 9 * self.in_.len() as u64;
        my_size += 9 * self.not_in.len() as u64;
        if let Some(v) = self.ignore_empty {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.const_ {
            os.write_sfixed64(1, v)?;
        }
        if let Some(v) = self.lt {
            os.write_sfixed64(2, v)?;
        }
        if let Some(v) = self.lte {
            os.write_sfixed64(3, v)?;
        }
        if let Some(v) = self.gt {
            os.write_sfixed64(4, v)?;
        }
        if let Some(v) = self.gte {
            os.write_sfixed64(5, v)?;
        }
        for v in &self.in_ {
            os.write_sfixed64(6, *v)?;
        };
        for v in &self.not_in {
            os.write_sfixed64(7, *v)?;
        };
        if let Some(v) = self.ignore_empty {
            os.write_bool(8, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SFixed64Rules {
        SFixed64Rules::new()
    }

    fn clear(&mut self) {
        self.const_ = ::std::option::Option::None;
        self.lt = ::std::option::Option::None;
        self.lte = ::std::option::Option::None;
        self.gt = ::std::option::Option::None;
        self.gte = ::std::option::Option::None;
        self.in_.clear();
        self.not_in.clear();
        self.ignore_empty = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SFixed64Rules {
        static instance: SFixed64Rules = SFixed64Rules {
            const_: ::std::option::Option::None,
            lt: ::std::option::Option::None,
            lte: ::std::option::Option::None,
            gt: ::std::option::Option::None,
            gte: ::std::option::Option::None,
            in_: ::std::vec::Vec::new(),
            not_in: ::std::vec::Vec::new(),
            ignore_empty: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SFixed64Rules {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SFixed64Rules").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SFixed64Rules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SFixed64Rules {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:validate.BoolRules)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BoolRules {
    // message fields
    // @@protoc_insertion_point(field:validate.BoolRules.const)
    pub const_: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:validate.BoolRules.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BoolRules {
    fn default() -> &'a BoolRules {
        <BoolRules as ::protobuf::Message>::default_instance()
    }
}

impl BoolRules {
    pub fn new() -> BoolRules {
        ::std::default::Default::default()
    }

    // optional bool const = 1;

    pub fn const_(&self) -> bool {
        self.const_.unwrap_or(false)
    }

    pub fn clear_const_(&mut self) {
        self.const_ = ::std::option::Option::None;
    }

    pub fn has_const(&self) -> bool {
        self.const_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_const(&mut self, v: bool) {
        self.const_ = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "const",
            |m: &BoolRules| { &m.const_ },
            |m: &mut BoolRules| { &mut m.const_ },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BoolRules>(
            "BoolRules",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BoolRules {
    const NAME: &'static str = "BoolRules";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.const_ = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.const_ {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.const_ {
            os.write_bool(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BoolRules {
        BoolRules::new()
    }

    fn clear(&mut self) {
        self.const_ = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BoolRules {
        static instance: BoolRules = BoolRules {
            const_: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BoolRules {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BoolRules").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BoolRules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BoolRules {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:validate.StringRules)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StringRules {
    // message fields
    // @@protoc_insertion_point(field:validate.StringRules.const)
    pub const_: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:validate.StringRules.len)
    pub len: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:validate.StringRules.min_len)
    pub min_len: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:validate.StringRules.max_len)
    pub max_len: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:validate.StringRules.len_bytes)
    pub len_bytes: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:validate.StringRules.min_bytes)
    pub min_bytes: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:validate.StringRules.max_bytes)
    pub max_bytes: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:validate.StringRules.pattern)
    pub pattern: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:validate.StringRules.prefix)
    pub prefix: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:validate.StringRules.suffix)
    pub suffix: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:validate.StringRules.contains)
    pub contains: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:validate.StringRules.not_contains)
    pub not_contains: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:validate.StringRules.in)
    pub in_: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:validate.StringRules.not_in)
    pub not_in: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:validate.StringRules.strict)
    pub strict: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:validate.StringRules.ignore_empty)
    pub ignore_empty: ::std::option::Option<bool>,
    // message oneof groups
    pub well_known: ::std::option::Option<string_rules::Well_known>,
    // special fields
    // @@protoc_insertion_point(special_field:validate.StringRules.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StringRules {
    fn default() -> &'a StringRules {
        <StringRules as ::protobuf::Message>::default_instance()
    }
}

impl StringRules {
    pub fn new() -> StringRules {
        ::std::default::Default::default()
    }

    // optional string const = 1;

    pub fn const_(&self) -> &str {
        match self.const_.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_const_(&mut self) {
        self.const_ = ::std::option::Option::None;
    }

    pub fn has_const(&self) -> bool {
        self.const_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_const(&mut self, v: ::std::string::String) {
        self.const_ = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_const(&mut self) -> &mut ::std::string::String {
        if self.const_.is_none() {
            self.const_ = ::std::option::Option::Some(::std::string::String::new());
        }
        self.const_.as_mut().unwrap()
    }

    // Take field
    pub fn take_const_(&mut self) -> ::std::string::String {
        self.const_.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 len = 19;

    pub fn len(&self) -> u64 {
        self.len.unwrap_or(0)
    }

    pub fn clear_len(&mut self) {
        self.len = ::std::option::Option::None;
    }

    pub fn has_len(&self) -> bool {
        self.len.is_some()
    }

    // Param is passed by value, moved
    pub fn set_len(&mut self, v: u64) {
        self.len = ::std::option::Option::Some(v);
    }

    // optional uint64 min_len = 2;

    pub fn min_len(&self) -> u64 {
        self.min_len.unwrap_or(0)
    }

    pub fn clear_min_len(&mut self) {
        self.min_len = ::std::option::Option::None;
    }

    pub fn has_min_len(&self) -> bool {
        self.min_len.is_some()
    }

    // Param is passed by value, moved
    pub fn set_min_len(&mut self, v: u64) {
        self.min_len = ::std::option::Option::Some(v);
    }

    // optional uint64 max_len = 3;

    pub fn max_len(&self) -> u64 {
        self.max_len.unwrap_or(0)
    }

    pub fn clear_max_len(&mut self) {
        self.max_len = ::std::option::Option::None;
    }

    pub fn has_max_len(&self) -> bool {
        self.max_len.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_len(&mut self, v: u64) {
        self.max_len = ::std::option::Option::Some(v);
    }

    // optional uint64 len_bytes = 20;

    pub fn len_bytes(&self) -> u64 {
        self.len_bytes.unwrap_or(0)
    }

    pub fn clear_len_bytes(&mut self) {
        self.len_bytes = ::std::option::Option::None;
    }

    pub fn has_len_bytes(&self) -> bool {
        self.len_bytes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_len_bytes(&mut self, v: u64) {
        self.len_bytes = ::std::option::Option::Some(v);
    }

    // optional uint64 min_bytes = 4;

    pub fn min_bytes(&self) -> u64 {
        self.min_bytes.unwrap_or(0)
    }

    pub fn clear_min_bytes(&mut self) {
        self.min_bytes = ::std::option::Option::None;
    }

    pub fn has_min_bytes(&self) -> bool {
        self.min_bytes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_min_bytes(&mut self, v: u64) {
        self.min_bytes = ::std::option::Option::Some(v);
    }

    // optional uint64 max_bytes = 5;

    pub fn max_bytes(&self) -> u64 {
        self.max_bytes.unwrap_or(0)
    }

    pub fn clear_max_bytes(&mut self) {
        self.max_bytes = ::std::option::Option::None;
    }

    pub fn has_max_bytes(&self) -> bool {
        self.max_bytes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_bytes(&mut self, v: u64) {
        self.max_bytes = ::std::option::Option::Some(v);
    }

    // optional string pattern = 6;

    pub fn pattern(&self) -> &str {
        match self.pattern.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_pattern(&mut self) {
        self.pattern = ::std::option::Option::None;
    }

    pub fn has_pattern(&self) -> bool {
        self.pattern.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pattern(&mut self, v: ::std::string::String) {
        self.pattern = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pattern(&mut self) -> &mut ::std::string::String {
        if self.pattern.is_none() {
            self.pattern = ::std::option::Option::Some(::std::string::String::new());
        }
        self.pattern.as_mut().unwrap()
    }

    // Take field
    pub fn take_pattern(&mut self) -> ::std::string::String {
        self.pattern.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string prefix = 7;

    pub fn prefix(&self) -> &str {
        match self.prefix.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_prefix(&mut self) {
        self.prefix = ::std::option::Option::None;
    }

    pub fn has_prefix(&self) -> bool {
        self.prefix.is_some()
    }

    // Param is passed by value, moved
    pub fn set_prefix(&mut self, v: ::std::string::String) {
        self.prefix = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prefix(&mut self) -> &mut ::std::string::String {
        if self.prefix.is_none() {
            self.prefix = ::std::option::Option::Some(::std::string::String::new());
        }
        self.prefix.as_mut().unwrap()
    }

    // Take field
    pub fn take_prefix(&mut self) -> ::std::string::String {
        self.prefix.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string suffix = 8;

    pub fn suffix(&self) -> &str {
        match self.suffix.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_suffix(&mut self) {
        self.suffix = ::std::option::Option::None;
    }

    pub fn has_suffix(&self) -> bool {
        self.suffix.is_some()
    }

    // Param is passed by value, moved
    pub fn set_suffix(&mut self, v: ::std::string::String) {
        self.suffix = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_suffix(&mut self) -> &mut ::std::string::String {
        if self.suffix.is_none() {
            self.suffix = ::std::option::Option::Some(::std::string::String::new());
        }
        self.suffix.as_mut().unwrap()
    }

    // Take field
    pub fn take_suffix(&mut self) -> ::std::string::String {
        self.suffix.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string contains = 9;

    pub fn contains(&self) -> &str {
        match self.contains.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_contains(&mut self) {
        self.contains = ::std::option::Option::None;
    }

    pub fn has_contains(&self) -> bool {
        self.contains.is_some()
    }

    // Param is passed by value, moved
    pub fn set_contains(&mut self, v: ::std::string::String) {
        self.contains = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contains(&mut self) -> &mut ::std::string::String {
        if self.contains.is_none() {
            self.contains = ::std::option::Option::Some(::std::string::String::new());
        }
        self.contains.as_mut().unwrap()
    }

    // Take field
    pub fn take_contains(&mut self) -> ::std::string::String {
        self.contains.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string not_contains = 23;

    pub fn not_contains(&self) -> &str {
        match self.not_contains.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_not_contains(&mut self) {
        self.not_contains = ::std::option::Option::None;
    }

    pub fn has_not_contains(&self) -> bool {
        self.not_contains.is_some()
    }

    // Param is passed by value, moved
    pub fn set_not_contains(&mut self, v: ::std::string::String) {
        self.not_contains = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_not_contains(&mut self) -> &mut ::std::string::String {
        if self.not_contains.is_none() {
            self.not_contains = ::std::option::Option::Some(::std::string::String::new());
        }
        self.not_contains.as_mut().unwrap()
    }

    // Take field
    pub fn take_not_contains(&mut self) -> ::std::string::String {
        self.not_contains.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool email = 12;

    pub fn email(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(string_rules::Well_known::Email(v)) => v,
            _ => false,
        }
    }

    pub fn clear_email(&mut self) {
        self.well_known = ::std::option::Option::None;
    }

    pub fn has_email(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(string_rules::Well_known::Email(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_email(&mut self, v: bool) {
        self.well_known = ::std::option::Option::Some(string_rules::Well_known::Email(v))
    }

    // optional bool hostname = 13;

    pub fn hostname(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(string_rules::Well_known::Hostname(v)) => v,
            _ => false,
        }
    }

    pub fn clear_hostname(&mut self) {
        self.well_known = ::std::option::Option::None;
    }

    pub fn has_hostname(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(string_rules::Well_known::Hostname(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_hostname(&mut self, v: bool) {
        self.well_known = ::std::option::Option::Some(string_rules::Well_known::Hostname(v))
    }

    // optional bool ip = 14;

    pub fn ip(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(string_rules::Well_known::Ip(v)) => v,
            _ => false,
        }
    }

    pub fn clear_ip(&mut self) {
        self.well_known = ::std::option::Option::None;
    }

    pub fn has_ip(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(string_rules::Well_known::Ip(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ip(&mut self, v: bool) {
        self.well_known = ::std::option::Option::Some(string_rules::Well_known::Ip(v))
    }

    // optional bool ipv4 = 15;

    pub fn ipv4(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(string_rules::Well_known::Ipv4(v)) => v,
            _ => false,
        }
    }

    pub fn clear_ipv4(&mut self) {
        self.well_known = ::std::option::Option::None;
    }

    pub fn has_ipv4(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(string_rules::Well_known::Ipv4(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ipv4(&mut self, v: bool) {
        self.well_known = ::std::option::Option::Some(string_rules::Well_known::Ipv4(v))
    }

    // optional bool ipv6 = 16;

    pub fn ipv6(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(string_rules::Well_known::Ipv6(v)) => v,
            _ => false,
        }
    }

    pub fn clear_ipv6(&mut self) {
        self.well_known = ::std::option::Option::None;
    }

    pub fn has_ipv6(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(string_rules::Well_known::Ipv6(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ipv6(&mut self, v: bool) {
        self.well_known = ::std::option::Option::Some(string_rules::Well_known::Ipv6(v))
    }

    // optional bool uri = 17;

    pub fn uri(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(string_rules::Well_known::Uri(v)) => v,
            _ => false,
        }
    }

    pub fn clear_uri(&mut self) {
        self.well_known = ::std::option::Option::None;
    }

    pub fn has_uri(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(string_rules::Well_known::Uri(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_uri(&mut self, v: bool) {
        self.well_known = ::std::option::Option::Some(string_rules::Well_known::Uri(v))
    }

    // optional bool uri_ref = 18;

    pub fn uri_ref(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(string_rules::Well_known::UriRef(v)) => v,
            _ => false,
        }
    }

    pub fn clear_uri_ref(&mut self) {
        self.well_known = ::std::option::Option::None;
    }

    pub fn has_uri_ref(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(string_rules::Well_known::UriRef(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_uri_ref(&mut self, v: bool) {
        self.well_known = ::std::option::Option::Some(string_rules::Well_known::UriRef(v))
    }

    // optional bool address = 21;

    pub fn address(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(string_rules::Well_known::Address(v)) => v,
            _ => false,
        }
    }

    pub fn clear_address(&mut self) {
        self.well_known = ::std::option::Option::None;
    }

    pub fn has_address(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(string_rules::Well_known::Address(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: bool) {
        self.well_known = ::std::option::Option::Some(string_rules::Well_known::Address(v))
    }

    // optional bool uuid = 22;

    pub fn uuid(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(string_rules::Well_known::Uuid(v)) => v,
            _ => false,
        }
    }

    pub fn clear_uuid(&mut self) {
        self.well_known = ::std::option::Option::None;
    }

    pub fn has_uuid(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(string_rules::Well_known::Uuid(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_uuid(&mut self, v: bool) {
        self.well_known = ::std::option::Option::Some(string_rules::Well_known::Uuid(v))
    }

    // optional .validate.KnownRegex well_known_regex = 24;

    pub fn well_known_regex(&self) -> KnownRegex {
        match self.well_known {
            ::std::option::Option::Some(string_rules::Well_known::WellKnownRegex(v)) => ::protobuf::EnumOrUnknown::enum_value_or_default(&v),
            _ => KnownRegex::UNKNOWN,
        }
    }

    pub fn clear_well_known_regex(&mut self) {
        self.well_known = ::std::option::Option::None;
    }

    pub fn has_well_known_regex(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(string_rules::Well_known::WellKnownRegex(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_well_known_regex(&mut self, v: KnownRegex) {
        self.well_known = ::std::option::Option::Some(string_rules::Well_known::WellKnownRegex(::protobuf::EnumOrUnknown::new(v)))
    }

    // optional bool strict = 25;

    pub fn strict(&self) -> bool {
        self.strict.unwrap_or(true)
    }

    pub fn clear_strict(&mut self) {
        self.strict = ::std::option::Option::None;
    }

    pub fn has_strict(&self) -> bool {
        self.strict.is_some()
    }

    // Param is passed by value, moved
    pub fn set_strict(&mut self, v: bool) {
        self.strict = ::std::option::Option::Some(v);
    }

    // optional bool ignore_empty = 26;

    pub fn ignore_empty(&self) -> bool {
        self.ignore_empty.unwrap_or(false)
    }

    pub fn clear_ignore_empty(&mut self) {
        self.ignore_empty = ::std::option::Option::None;
    }

    pub fn has_ignore_empty(&self) -> bool {
        self.ignore_empty.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ignore_empty(&mut self, v: bool) {
        self.ignore_empty = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(26);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "const",
            |m: &StringRules| { &m.const_ },
            |m: &mut StringRules| { &mut m.const_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "len",
            |m: &StringRules| { &m.len },
            |m: &mut StringRules| { &mut m.len },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "min_len",
            |m: &StringRules| { &m.min_len },
            |m: &mut StringRules| { &mut m.min_len },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "max_len",
            |m: &StringRules| { &m.max_len },
            |m: &mut StringRules| { &mut m.max_len },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "len_bytes",
            |m: &StringRules| { &m.len_bytes },
            |m: &mut StringRules| { &mut m.len_bytes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "min_bytes",
            |m: &StringRules| { &m.min_bytes },
            |m: &mut StringRules| { &mut m.min_bytes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "max_bytes",
            |m: &StringRules| { &m.max_bytes },
            |m: &mut StringRules| { &mut m.max_bytes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "pattern",
            |m: &StringRules| { &m.pattern },
            |m: &mut StringRules| { &mut m.pattern },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "prefix",
            |m: &StringRules| { &m.prefix },
            |m: &mut StringRules| { &mut m.prefix },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "suffix",
            |m: &StringRules| { &m.suffix },
            |m: &mut StringRules| { &mut m.suffix },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "contains",
            |m: &StringRules| { &m.contains },
            |m: &mut StringRules| { &mut m.contains },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "not_contains",
            |m: &StringRules| { &m.not_contains },
            |m: &mut StringRules| { &mut m.not_contains },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "in",
            |m: &StringRules| { &m.in_ },
            |m: &mut StringRules| { &mut m.in_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "not_in",
            |m: &StringRules| { &m.not_in },
            |m: &mut StringRules| { &mut m.not_in },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "email",
            StringRules::has_email,
            StringRules::email,
            StringRules::set_email,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "hostname",
            StringRules::has_hostname,
            StringRules::hostname,
            StringRules::set_hostname,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "ip",
            StringRules::has_ip,
            StringRules::ip,
            StringRules::set_ip,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "ipv4",
            StringRules::has_ipv4,
            StringRules::ipv4,
            StringRules::set_ipv4,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "ipv6",
            StringRules::has_ipv6,
            StringRules::ipv6,
            StringRules::set_ipv6,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "uri",
            StringRules::has_uri,
            StringRules::uri,
            StringRules::set_uri,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "uri_ref",
            StringRules::has_uri_ref,
            StringRules::uri_ref,
            StringRules::set_uri_ref,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "address",
            StringRules::has_address,
            StringRules::address,
            StringRules::set_address,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "uuid",
            StringRules::has_uuid,
            StringRules::uuid,
            StringRules::set_uuid,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_enum_accessors::<_, _>(
            "well_known_regex",
            |message: &StringRules| match &message.well_known {
                ::std::option::Option::Some(string_rules::Well_known::WellKnownRegex(e)) => ::std::option::Option::Some(*e),
                _ => ::std::option::Option::None,
            },
            |message: &mut StringRules, e: ::protobuf::EnumOrUnknown<KnownRegex>| {
                message.well_known = ::std::option::Option::Some(string_rules::Well_known::WellKnownRegex(e));
            },
            KnownRegex::UNKNOWN,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "strict",
            |m: &StringRules| { &m.strict },
            |m: &mut StringRules| { &mut m.strict },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ignore_empty",
            |m: &StringRules| { &m.ignore_empty },
            |m: &mut StringRules| { &mut m.ignore_empty },
        ));
        oneofs.push(string_rules::Well_known::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StringRules>(
            "StringRules",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StringRules {
    const NAME: &'static str = "StringRules";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.const_ = ::std::option::Option::Some(is.read_string()?);
                },
                152 => {
                    self.len = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.min_len = ::std::option::Option::Some(is.read_uint64()?);
                },
                24 => {
                    self.max_len = ::std::option::Option::Some(is.read_uint64()?);
                },
                160 => {
                    self.len_bytes = ::std::option::Option::Some(is.read_uint64()?);
                },
                32 => {
                    self.min_bytes = ::std::option::Option::Some(is.read_uint64()?);
                },
                40 => {
                    self.max_bytes = ::std::option::Option::Some(is.read_uint64()?);
                },
                50 => {
                    self.pattern = ::std::option::Option::Some(is.read_string()?);
                },
                58 => {
                    self.prefix = ::std::option::Option::Some(is.read_string()?);
                },
                66 => {
                    self.suffix = ::std::option::Option::Some(is.read_string()?);
                },
                74 => {
                    self.contains = ::std::option::Option::Some(is.read_string()?);
                },
                186 => {
                    self.not_contains = ::std::option::Option::Some(is.read_string()?);
                },
                82 => {
                    self.in_.push(is.read_string()?);
                },
                90 => {
                    self.not_in.push(is.read_string()?);
                },
                96 => {
                    self.well_known = ::std::option::Option::Some(string_rules::Well_known::Email(is.read_bool()?));
                },
                104 => {
                    self.well_known = ::std::option::Option::Some(string_rules::Well_known::Hostname(is.read_bool()?));
                },
                112 => {
                    self.well_known = ::std::option::Option::Some(string_rules::Well_known::Ip(is.read_bool()?));
                },
                120 => {
                    self.well_known = ::std::option::Option::Some(string_rules::Well_known::Ipv4(is.read_bool()?));
                },
                128 => {
                    self.well_known = ::std::option::Option::Some(string_rules::Well_known::Ipv6(is.read_bool()?));
                },
                136 => {
                    self.well_known = ::std::option::Option::Some(string_rules::Well_known::Uri(is.read_bool()?));
                },
                144 => {
                    self.well_known = ::std::option::Option::Some(string_rules::Well_known::UriRef(is.read_bool()?));
                },
                168 => {
                    self.well_known = ::std::option::Option::Some(string_rules::Well_known::Address(is.read_bool()?));
                },
                176 => {
                    self.well_known = ::std::option::Option::Some(string_rules::Well_known::Uuid(is.read_bool()?));
                },
                192 => {
                    self.well_known = ::std::option::Option::Some(string_rules::Well_known::WellKnownRegex(is.read_enum_or_unknown()?));
                },
                200 => {
                    self.strict = ::std::option::Option::Some(is.read_bool()?);
                },
                208 => {
                    self.ignore_empty = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.const_.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.len {
            my_size += ::protobuf::rt::uint64_size(19, v);
        }
        if let Some(v) = self.min_len {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.max_len {
            my_size += ::protobuf::rt::uint64_size(3, v);
        }
        if let Some(v) = self.len_bytes {
            my_size += ::protobuf::rt::uint64_size(20, v);
        }
        if let Some(v) = self.min_bytes {
            my_size += ::protobuf::rt::uint64_size(4, v);
        }
        if let Some(v) = self.max_bytes {
            my_size += ::protobuf::rt::uint64_size(5, v);
        }
        if let Some(v) = self.pattern.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        if let Some(v) = self.prefix.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        if let Some(v) = self.suffix.as_ref() {
            my_size += ::protobuf::rt::string_size(8, &v);
        }
        if let Some(v) = self.contains.as_ref() {
            my_size += ::protobuf::rt::string_size(9, &v);
        }
        if let Some(v) = self.not_contains.as_ref() {
            my_size += ::protobuf::rt::string_size(23, &v);
        }
        for value in &self.in_ {
            my_size += ::protobuf::rt::string_size(10, &value);
        };
        for value in &self.not_in {
            my_size += ::protobuf::rt::string_size(11, &value);
        };
        if let Some(v) = self.strict {
            my_size += 2 + 1;
        }
        if let Some(v) = self.ignore_empty {
            my_size += 2 + 1;
        }
        if let ::std::option::Option::Some(ref v) = self.well_known {
            match v {
                &string_rules::Well_known::Email(v) => {
                    my_size += 1 + 1;
                },
                &string_rules::Well_known::Hostname(v) => {
                    my_size += 1 + 1;
                },
                &string_rules::Well_known::Ip(v) => {
                    my_size += 1 + 1;
                },
                &string_rules::Well_known::Ipv4(v) => {
                    my_size += 1 + 1;
                },
                &string_rules::Well_known::Ipv6(v) => {
                    my_size += 2 + 1;
                },
                &string_rules::Well_known::Uri(v) => {
                    my_size += 2 + 1;
                },
                &string_rules::Well_known::UriRef(v) => {
                    my_size += 2 + 1;
                },
                &string_rules::Well_known::Address(v) => {
                    my_size += 2 + 1;
                },
                &string_rules::Well_known::Uuid(v) => {
                    my_size += 2 + 1;
                },
                &string_rules::Well_known::WellKnownRegex(v) => {
                    my_size += ::protobuf::rt::int32_size(24, v.value());
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.const_.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.len {
            os.write_uint64(19, v)?;
        }
        if let Some(v) = self.min_len {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.max_len {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.len_bytes {
            os.write_uint64(20, v)?;
        }
        if let Some(v) = self.min_bytes {
            os.write_uint64(4, v)?;
        }
        if let Some(v) = self.max_bytes {
            os.write_uint64(5, v)?;
        }
        if let Some(v) = self.pattern.as_ref() {
            os.write_string(6, v)?;
        }
        if let Some(v) = self.prefix.as_ref() {
            os.write_string(7, v)?;
        }
        if let Some(v) = self.suffix.as_ref() {
            os.write_string(8, v)?;
        }
        if let Some(v) = self.contains.as_ref() {
            os.write_string(9, v)?;
        }
        if let Some(v) = self.not_contains.as_ref() {
            os.write_string(23, v)?;
        }
        for v in &self.in_ {
            os.write_string(10, &v)?;
        };
        for v in &self.not_in {
            os.write_string(11, &v)?;
        };
        if let Some(v) = self.strict {
            os.write_bool(25, v)?;
        }
        if let Some(v) = self.ignore_empty {
            os.write_bool(26, v)?;
        }
        if let ::std::option::Option::Some(ref v) = self.well_known {
            match v {
                &string_rules::Well_known::Email(v) => {
                    os.write_bool(12, v)?;
                },
                &string_rules::Well_known::Hostname(v) => {
                    os.write_bool(13, v)?;
                },
                &string_rules::Well_known::Ip(v) => {
                    os.write_bool(14, v)?;
                },
                &string_rules::Well_known::Ipv4(v) => {
                    os.write_bool(15, v)?;
                },
                &string_rules::Well_known::Ipv6(v) => {
                    os.write_bool(16, v)?;
                },
                &string_rules::Well_known::Uri(v) => {
                    os.write_bool(17, v)?;
                },
                &string_rules::Well_known::UriRef(v) => {
                    os.write_bool(18, v)?;
                },
                &string_rules::Well_known::Address(v) => {
                    os.write_bool(21, v)?;
                },
                &string_rules::Well_known::Uuid(v) => {
                    os.write_bool(22, v)?;
                },
                &string_rules::Well_known::WellKnownRegex(v) => {
                    os.write_enum(24, ::protobuf::EnumOrUnknown::value(&v))?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StringRules {
        StringRules::new()
    }

    fn clear(&mut self) {
        self.const_ = ::std::option::Option::None;
        self.len = ::std::option::Option::None;
        self.min_len = ::std::option::Option::None;
        self.max_len = ::std::option::Option::None;
        self.len_bytes = ::std::option::Option::None;
        self.min_bytes = ::std::option::Option::None;
        self.max_bytes = ::std::option::Option::None;
        self.pattern = ::std::option::Option::None;
        self.prefix = ::std::option::Option::None;
        self.suffix = ::std::option::Option::None;
        self.contains = ::std::option::Option::None;
        self.not_contains = ::std::option::Option::None;
        self.in_.clear();
        self.not_in.clear();
        self.well_known = ::std::option::Option::None;
        self.well_known = ::std::option::Option::None;
        self.well_known = ::std::option::Option::None;
        self.well_known = ::std::option::Option::None;
        self.well_known = ::std::option::Option::None;
        self.well_known = ::std::option::Option::None;
        self.well_known = ::std::option::Option::None;
        self.well_known = ::std::option::Option::None;
        self.well_known = ::std::option::Option::None;
        self.well_known = ::std::option::Option::None;
        self.strict = ::std::option::Option::None;
        self.ignore_empty = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StringRules {
        static instance: StringRules = StringRules {
            const_: ::std::option::Option::None,
            len: ::std::option::Option::None,
            min_len: ::std::option::Option::None,
            max_len: ::std::option::Option::None,
            len_bytes: ::std::option::Option::None,
            min_bytes: ::std::option::Option::None,
            max_bytes: ::std::option::Option::None,
            pattern: ::std::option::Option::None,
            prefix: ::std::option::Option::None,
            suffix: ::std::option::Option::None,
            contains: ::std::option::Option::None,
            not_contains: ::std::option::Option::None,
            in_: ::std::vec::Vec::new(),
            not_in: ::std::vec::Vec::new(),
            strict: ::std::option::Option::None,
            ignore_empty: ::std::option::Option::None,
            well_known: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StringRules {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StringRules").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StringRules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StringRules {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `StringRules`
pub mod string_rules {

    #[derive(Clone,PartialEq,Debug)]
    // @@protoc_insertion_point(oneof:validate.StringRules.well_known)
    pub enum Well_known {
        // @@protoc_insertion_point(oneof_field:validate.StringRules.email)
        Email(bool),
        // @@protoc_insertion_point(oneof_field:validate.StringRules.hostname)
        Hostname(bool),
        // @@protoc_insertion_point(oneof_field:validate.StringRules.ip)
        Ip(bool),
        // @@protoc_insertion_point(oneof_field:validate.StringRules.ipv4)
        Ipv4(bool),
        // @@protoc_insertion_point(oneof_field:validate.StringRules.ipv6)
        Ipv6(bool),
        // @@protoc_insertion_point(oneof_field:validate.StringRules.uri)
        Uri(bool),
        // @@protoc_insertion_point(oneof_field:validate.StringRules.uri_ref)
        UriRef(bool),
        // @@protoc_insertion_point(oneof_field:validate.StringRules.address)
        Address(bool),
        // @@protoc_insertion_point(oneof_field:validate.StringRules.uuid)
        Uuid(bool),
        // @@protoc_insertion_point(oneof_field:validate.StringRules.well_known_regex)
        WellKnownRegex(::protobuf::EnumOrUnknown<super::KnownRegex>),
    }

    impl ::protobuf::Oneof for Well_known {
    }

    impl ::protobuf::OneofFull for Well_known {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::StringRules as ::protobuf::MessageFull>::descriptor().oneof_by_name("well_known").unwrap()).clone()
        }
    }

    impl Well_known {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Well_known>("well_known")
        }
    }
}

// @@protoc_insertion_point(message:validate.BytesRules)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BytesRules {
    // message fields
    // @@protoc_insertion_point(field:validate.BytesRules.const)
    pub const_: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:validate.BytesRules.len)
    pub len: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:validate.BytesRules.min_len)
    pub min_len: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:validate.BytesRules.max_len)
    pub max_len: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:validate.BytesRules.pattern)
    pub pattern: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:validate.BytesRules.prefix)
    pub prefix: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:validate.BytesRules.suffix)
    pub suffix: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:validate.BytesRules.contains)
    pub contains: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:validate.BytesRules.in)
    pub in_: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:validate.BytesRules.not_in)
    pub not_in: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:validate.BytesRules.ignore_empty)
    pub ignore_empty: ::std::option::Option<bool>,
    // message oneof groups
    pub well_known: ::std::option::Option<bytes_rules::Well_known>,
    // special fields
    // @@protoc_insertion_point(special_field:validate.BytesRules.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BytesRules {
    fn default() -> &'a BytesRules {
        <BytesRules as ::protobuf::Message>::default_instance()
    }
}

impl BytesRules {
    pub fn new() -> BytesRules {
        ::std::default::Default::default()
    }

    // optional bytes const = 1;

    pub fn const_(&self) -> &[u8] {
        match self.const_.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_const_(&mut self) {
        self.const_ = ::std::option::Option::None;
    }

    pub fn has_const(&self) -> bool {
        self.const_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_const(&mut self, v: ::std::vec::Vec<u8>) {
        self.const_ = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_const(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.const_.is_none() {
            self.const_ = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.const_.as_mut().unwrap()
    }

    // Take field
    pub fn take_const_(&mut self) -> ::std::vec::Vec<u8> {
        self.const_.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional uint64 len = 13;

    pub fn len(&self) -> u64 {
        self.len.unwrap_or(0)
    }

    pub fn clear_len(&mut self) {
        self.len = ::std::option::Option::None;
    }

    pub fn has_len(&self) -> bool {
        self.len.is_some()
    }

    // Param is passed by value, moved
    pub fn set_len(&mut self, v: u64) {
        self.len = ::std::option::Option::Some(v);
    }

    // optional uint64 min_len = 2;

    pub fn min_len(&self) -> u64 {
        self.min_len.unwrap_or(0)
    }

    pub fn clear_min_len(&mut self) {
        self.min_len = ::std::option::Option::None;
    }

    pub fn has_min_len(&self) -> bool {
        self.min_len.is_some()
    }

    // Param is passed by value, moved
    pub fn set_min_len(&mut self, v: u64) {
        self.min_len = ::std::option::Option::Some(v);
    }

    // optional uint64 max_len = 3;

    pub fn max_len(&self) -> u64 {
        self.max_len.unwrap_or(0)
    }

    pub fn clear_max_len(&mut self) {
        self.max_len = ::std::option::Option::None;
    }

    pub fn has_max_len(&self) -> bool {
        self.max_len.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_len(&mut self, v: u64) {
        self.max_len = ::std::option::Option::Some(v);
    }

    // optional string pattern = 4;

    pub fn pattern(&self) -> &str {
        match self.pattern.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_pattern(&mut self) {
        self.pattern = ::std::option::Option::None;
    }

    pub fn has_pattern(&self) -> bool {
        self.pattern.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pattern(&mut self, v: ::std::string::String) {
        self.pattern = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pattern(&mut self) -> &mut ::std::string::String {
        if self.pattern.is_none() {
            self.pattern = ::std::option::Option::Some(::std::string::String::new());
        }
        self.pattern.as_mut().unwrap()
    }

    // Take field
    pub fn take_pattern(&mut self) -> ::std::string::String {
        self.pattern.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bytes prefix = 5;

    pub fn prefix(&self) -> &[u8] {
        match self.prefix.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_prefix(&mut self) {
        self.prefix = ::std::option::Option::None;
    }

    pub fn has_prefix(&self) -> bool {
        self.prefix.is_some()
    }

    // Param is passed by value, moved
    pub fn set_prefix(&mut self, v: ::std::vec::Vec<u8>) {
        self.prefix = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prefix(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.prefix.is_none() {
            self.prefix = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.prefix.as_mut().unwrap()
    }

    // Take field
    pub fn take_prefix(&mut self) -> ::std::vec::Vec<u8> {
        self.prefix.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes suffix = 6;

    pub fn suffix(&self) -> &[u8] {
        match self.suffix.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_suffix(&mut self) {
        self.suffix = ::std::option::Option::None;
    }

    pub fn has_suffix(&self) -> bool {
        self.suffix.is_some()
    }

    // Param is passed by value, moved
    pub fn set_suffix(&mut self, v: ::std::vec::Vec<u8>) {
        self.suffix = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_suffix(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.suffix.is_none() {
            self.suffix = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.suffix.as_mut().unwrap()
    }

    // Take field
    pub fn take_suffix(&mut self) -> ::std::vec::Vec<u8> {
        self.suffix.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes contains = 7;

    pub fn contains(&self) -> &[u8] {
        match self.contains.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_contains(&mut self) {
        self.contains = ::std::option::Option::None;
    }

    pub fn has_contains(&self) -> bool {
        self.contains.is_some()
    }

    // Param is passed by value, moved
    pub fn set_contains(&mut self, v: ::std::vec::Vec<u8>) {
        self.contains = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contains(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.contains.is_none() {
            self.contains = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.contains.as_mut().unwrap()
    }

    // Take field
    pub fn take_contains(&mut self) -> ::std::vec::Vec<u8> {
        self.contains.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bool ip = 10;

    pub fn ip(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(bytes_rules::Well_known::Ip(v)) => v,
            _ => false,
        }
    }

    pub fn clear_ip(&mut self) {
        self.well_known = ::std::option::Option::None;
    }

    pub fn has_ip(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(bytes_rules::Well_known::Ip(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ip(&mut self, v: bool) {
        self.well_known = ::std::option::Option::Some(bytes_rules::Well_known::Ip(v))
    }

    // optional bool ipv4 = 11;

    pub fn ipv4(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(bytes_rules::Well_known::Ipv4(v)) => v,
            _ => false,
        }
    }

    pub fn clear_ipv4(&mut self) {
        self.well_known = ::std::option::Option::None;
    }

    pub fn has_ipv4(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(bytes_rules::Well_known::Ipv4(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ipv4(&mut self, v: bool) {
        self.well_known = ::std::option::Option::Some(bytes_rules::Well_known::Ipv4(v))
    }

    // optional bool ipv6 = 12;

    pub fn ipv6(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(bytes_rules::Well_known::Ipv6(v)) => v,
            _ => false,
        }
    }

    pub fn clear_ipv6(&mut self) {
        self.well_known = ::std::option::Option::None;
    }

    pub fn has_ipv6(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(bytes_rules::Well_known::Ipv6(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ipv6(&mut self, v: bool) {
        self.well_known = ::std::option::Option::Some(bytes_rules::Well_known::Ipv6(v))
    }

    // optional bool ignore_empty = 14;

    pub fn ignore_empty(&self) -> bool {
        self.ignore_empty.unwrap_or(false)
    }

    pub fn clear_ignore_empty(&mut self) {
        self.ignore_empty = ::std::option::Option::None;
    }

    pub fn has_ignore_empty(&self) -> bool {
        self.ignore_empty.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ignore_empty(&mut self, v: bool) {
        self.ignore_empty = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(14);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "const",
            |m: &BytesRules| { &m.const_ },
            |m: &mut BytesRules| { &mut m.const_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "len",
            |m: &BytesRules| { &m.len },
            |m: &mut BytesRules| { &mut m.len },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "min_len",
            |m: &BytesRules| { &m.min_len },
            |m: &mut BytesRules| { &mut m.min_len },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "max_len",
            |m: &BytesRules| { &m.max_len },
            |m: &mut BytesRules| { &mut m.max_len },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "pattern",
            |m: &BytesRules| { &m.pattern },
            |m: &mut BytesRules| { &mut m.pattern },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "prefix",
            |m: &BytesRules| { &m.prefix },
            |m: &mut BytesRules| { &mut m.prefix },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "suffix",
            |m: &BytesRules| { &m.suffix },
            |m: &mut BytesRules| { &mut m.suffix },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "contains",
            |m: &BytesRules| { &m.contains },
            |m: &mut BytesRules| { &mut m.contains },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "in",
            |m: &BytesRules| { &m.in_ },
            |m: &mut BytesRules| { &mut m.in_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "not_in",
            |m: &BytesRules| { &m.not_in },
            |m: &mut BytesRules| { &mut m.not_in },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "ip",
            BytesRules::has_ip,
            BytesRules::ip,
            BytesRules::set_ip,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "ipv4",
            BytesRules::has_ipv4,
            BytesRules::ipv4,
            BytesRules::set_ipv4,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "ipv6",
            BytesRules::has_ipv6,
            BytesRules::ipv6,
            BytesRules::set_ipv6,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ignore_empty",
            |m: &BytesRules| { &m.ignore_empty },
            |m: &mut BytesRules| { &mut m.ignore_empty },
        ));
        oneofs.push(bytes_rules::Well_known::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BytesRules>(
            "BytesRules",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BytesRules {
    const NAME: &'static str = "BytesRules";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.const_ = ::std::option::Option::Some(is.read_bytes()?);
                },
                104 => {
                    self.len = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.min_len = ::std::option::Option::Some(is.read_uint64()?);
                },
                24 => {
                    self.max_len = ::std::option::Option::Some(is.read_uint64()?);
                },
                34 => {
                    self.pattern = ::std::option::Option::Some(is.read_string()?);
                },
                42 => {
                    self.prefix = ::std::option::Option::Some(is.read_bytes()?);
                },
                50 => {
                    self.suffix = ::std::option::Option::Some(is.read_bytes()?);
                },
                58 => {
                    self.contains = ::std::option::Option::Some(is.read_bytes()?);
                },
                66 => {
                    self.in_.push(is.read_bytes()?);
                },
                74 => {
                    self.not_in.push(is.read_bytes()?);
                },
                80 => {
                    self.well_known = ::std::option::Option::Some(bytes_rules::Well_known::Ip(is.read_bool()?));
                },
                88 => {
                    self.well_known = ::std::option::Option::Some(bytes_rules::Well_known::Ipv4(is.read_bool()?));
                },
                96 => {
                    self.well_known = ::std::option::Option::Some(bytes_rules::Well_known::Ipv6(is.read_bool()?));
                },
                112 => {
                    self.ignore_empty = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.const_.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.len {
            my_size += ::protobuf::rt::uint64_size(13, v);
        }
        if let Some(v) = self.min_len {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.max_len {
            my_size += ::protobuf::rt::uint64_size(3, v);
        }
        if let Some(v) = self.pattern.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.prefix.as_ref() {
            my_size += ::protobuf::rt::bytes_size(5, &v);
        }
        if let Some(v) = self.suffix.as_ref() {
            my_size += ::protobuf::rt::bytes_size(6, &v);
        }
        if let Some(v) = self.contains.as_ref() {
            my_size += ::protobuf::rt::bytes_size(7, &v);
        }
        for value in &self.in_ {
            my_size += ::protobuf::rt::bytes_size(8, &value);
        };
        for value in &self.not_in {
            my_size += ::protobuf::rt::bytes_size(9, &value);
        };
        if let Some(v) = self.ignore_empty {
            my_size += 1 + 1;
        }
        if let ::std::option::Option::Some(ref v) = self.well_known {
            match v {
                &bytes_rules::Well_known::Ip(v) => {
                    my_size += 1 + 1;
                },
                &bytes_rules::Well_known::Ipv4(v) => {
                    my_size += 1 + 1;
                },
                &bytes_rules::Well_known::Ipv6(v) => {
                    my_size += 1 + 1;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.const_.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.len {
            os.write_uint64(13, v)?;
        }
        if let Some(v) = self.min_len {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.max_len {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.pattern.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.prefix.as_ref() {
            os.write_bytes(5, v)?;
        }
        if let Some(v) = self.suffix.as_ref() {
            os.write_bytes(6, v)?;
        }
        if let Some(v) = self.contains.as_ref() {
            os.write_bytes(7, v)?;
        }
        for v in &self.in_ {
            os.write_bytes(8, &v)?;
        };
        for v in &self.not_in {
            os.write_bytes(9, &v)?;
        };
        if let Some(v) = self.ignore_empty {
            os.write_bool(14, v)?;
        }
        if let ::std::option::Option::Some(ref v) = self.well_known {
            match v {
                &bytes_rules::Well_known::Ip(v) => {
                    os.write_bool(10, v)?;
                },
                &bytes_rules::Well_known::Ipv4(v) => {
                    os.write_bool(11, v)?;
                },
                &bytes_rules::Well_known::Ipv6(v) => {
                    os.write_bool(12, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BytesRules {
        BytesRules::new()
    }

    fn clear(&mut self) {
        self.const_ = ::std::option::Option::None;
        self.len = ::std::option::Option::None;
        self.min_len = ::std::option::Option::None;
        self.max_len = ::std::option::Option::None;
        self.pattern = ::std::option::Option::None;
        self.prefix = ::std::option::Option::None;
        self.suffix = ::std::option::Option::None;
        self.contains = ::std::option::Option::None;
        self.in_.clear();
        self.not_in.clear();
        self.well_known = ::std::option::Option::None;
        self.well_known = ::std::option::Option::None;
        self.well_known = ::std::option::Option::None;
        self.ignore_empty = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BytesRules {
        static instance: BytesRules = BytesRules {
            const_: ::std::option::Option::None,
            len: ::std::option::Option::None,
            min_len: ::std::option::Option::None,
            max_len: ::std::option::Option::None,
            pattern: ::std::option::Option::None,
            prefix: ::std::option::Option::None,
            suffix: ::std::option::Option::None,
            contains: ::std::option::Option::None,
            in_: ::std::vec::Vec::new(),
            not_in: ::std::vec::Vec::new(),
            ignore_empty: ::std::option::Option::None,
            well_known: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BytesRules {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BytesRules").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BytesRules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BytesRules {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `BytesRules`
pub mod bytes_rules {

    #[derive(Clone,PartialEq,Debug)]
    // @@protoc_insertion_point(oneof:validate.BytesRules.well_known)
    pub enum Well_known {
        // @@protoc_insertion_point(oneof_field:validate.BytesRules.ip)
        Ip(bool),
        // @@protoc_insertion_point(oneof_field:validate.BytesRules.ipv4)
        Ipv4(bool),
        // @@protoc_insertion_point(oneof_field:validate.BytesRules.ipv6)
        Ipv6(bool),
    }

    impl ::protobuf::Oneof for Well_known {
    }

    impl ::protobuf::OneofFull for Well_known {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::BytesRules as ::protobuf::MessageFull>::descriptor().oneof_by_name("well_known").unwrap()).clone()
        }
    }

    impl Well_known {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Well_known>("well_known")
        }
    }
}

// @@protoc_insertion_point(message:validate.EnumRules)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EnumRules {
    // message fields
    // @@protoc_insertion_point(field:validate.EnumRules.const)
    pub const_: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:validate.EnumRules.defined_only)
    pub defined_only: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:validate.EnumRules.in)
    pub in_: ::std::vec::Vec<i32>,
    // @@protoc_insertion_point(field:validate.EnumRules.not_in)
    pub not_in: ::std::vec::Vec<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:validate.EnumRules.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EnumRules {
    fn default() -> &'a EnumRules {
        <EnumRules as ::protobuf::Message>::default_instance()
    }
}

impl EnumRules {
    pub fn new() -> EnumRules {
        ::std::default::Default::default()
    }

    // optional int32 const = 1;

    pub fn const_(&self) -> i32 {
        self.const_.unwrap_or(0)
    }

    pub fn clear_const_(&mut self) {
        self.const_ = ::std::option::Option::None;
    }

    pub fn has_const(&self) -> bool {
        self.const_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_const(&mut self, v: i32) {
        self.const_ = ::std::option::Option::Some(v);
    }

    // optional bool defined_only = 2;

    pub fn defined_only(&self) -> bool {
        self.defined_only.unwrap_or(false)
    }

    pub fn clear_defined_only(&mut self) {
        self.defined_only = ::std::option::Option::None;
    }

    pub fn has_defined_only(&self) -> bool {
        self.defined_only.is_some()
    }

    // Param is passed by value, moved
    pub fn set_defined_only(&mut self, v: bool) {
        self.defined_only = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "const",
            |m: &EnumRules| { &m.const_ },
            |m: &mut EnumRules| { &mut m.const_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "defined_only",
            |m: &EnumRules| { &m.defined_only },
            |m: &mut EnumRules| { &mut m.defined_only },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "in",
            |m: &EnumRules| { &m.in_ },
            |m: &mut EnumRules| { &mut m.in_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "not_in",
            |m: &EnumRules| { &m.not_in },
            |m: &mut EnumRules| { &mut m.not_in },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EnumRules>(
            "EnumRules",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EnumRules {
    const NAME: &'static str = "EnumRules";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.const_ = ::std::option::Option::Some(is.read_int32()?);
                },
                16 => {
                    self.defined_only = ::std::option::Option::Some(is.read_bool()?);
                },
                26 => {
                    is.read_repeated_packed_int32_into(&mut self.in_)?;
                },
                24 => {
                    self.in_.push(is.read_int32()?);
                },
                34 => {
                    is.read_repeated_packed_int32_into(&mut self.not_in)?;
                },
                32 => {
                    self.not_in.push(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.const_ {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        if let Some(v) = self.defined_only {
            my_size += 1 + 1;
        }
        for value in &self.in_ {
            my_size += ::protobuf::rt::int32_size(3, *value);
        };
        for value in &self.not_in {
            my_size += ::protobuf::rt::int32_size(4, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.const_ {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.defined_only {
            os.write_bool(2, v)?;
        }
        for v in &self.in_ {
            os.write_int32(3, *v)?;
        };
        for v in &self.not_in {
            os.write_int32(4, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EnumRules {
        EnumRules::new()
    }

    fn clear(&mut self) {
        self.const_ = ::std::option::Option::None;
        self.defined_only = ::std::option::Option::None;
        self.in_.clear();
        self.not_in.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EnumRules {
        static instance: EnumRules = EnumRules {
            const_: ::std::option::Option::None,
            defined_only: ::std::option::Option::None,
            in_: ::std::vec::Vec::new(),
            not_in: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EnumRules {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EnumRules").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EnumRules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EnumRules {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:validate.MessageRules)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MessageRules {
    // message fields
    // @@protoc_insertion_point(field:validate.MessageRules.skip)
    pub skip: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:validate.MessageRules.required)
    pub required: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:validate.MessageRules.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MessageRules {
    fn default() -> &'a MessageRules {
        <MessageRules as ::protobuf::Message>::default_instance()
    }
}

impl MessageRules {
    pub fn new() -> MessageRules {
        ::std::default::Default::default()
    }

    // optional bool skip = 1;

    pub fn skip(&self) -> bool {
        self.skip.unwrap_or(false)
    }

    pub fn clear_skip(&mut self) {
        self.skip = ::std::option::Option::None;
    }

    pub fn has_skip(&self) -> bool {
        self.skip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_skip(&mut self, v: bool) {
        self.skip = ::std::option::Option::Some(v);
    }

    // optional bool required = 2;

    pub fn required(&self) -> bool {
        self.required.unwrap_or(false)
    }

    pub fn clear_required(&mut self) {
        self.required = ::std::option::Option::None;
    }

    pub fn has_required(&self) -> bool {
        self.required.is_some()
    }

    // Param is passed by value, moved
    pub fn set_required(&mut self, v: bool) {
        self.required = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "skip",
            |m: &MessageRules| { &m.skip },
            |m: &mut MessageRules| { &mut m.skip },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "required",
            |m: &MessageRules| { &m.required },
            |m: &mut MessageRules| { &mut m.required },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MessageRules>(
            "MessageRules",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MessageRules {
    const NAME: &'static str = "MessageRules";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.skip = ::std::option::Option::Some(is.read_bool()?);
                },
                16 => {
                    self.required = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.skip {
            my_size += 1 + 1;
        }
        if let Some(v) = self.required {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.skip {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.required {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MessageRules {
        MessageRules::new()
    }

    fn clear(&mut self) {
        self.skip = ::std::option::Option::None;
        self.required = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MessageRules {
        static instance: MessageRules = MessageRules {
            skip: ::std::option::Option::None,
            required: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MessageRules {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MessageRules").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MessageRules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MessageRules {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:validate.RepeatedRules)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RepeatedRules {
    // message fields
    // @@protoc_insertion_point(field:validate.RepeatedRules.min_items)
    pub min_items: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:validate.RepeatedRules.max_items)
    pub max_items: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:validate.RepeatedRules.unique)
    pub unique: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:validate.RepeatedRules.items)
    pub items: ::protobuf::MessageField<FieldRules>,
    // @@protoc_insertion_point(field:validate.RepeatedRules.ignore_empty)
    pub ignore_empty: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:validate.RepeatedRules.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RepeatedRules {
    fn default() -> &'a RepeatedRules {
        <RepeatedRules as ::protobuf::Message>::default_instance()
    }
}

impl RepeatedRules {
    pub fn new() -> RepeatedRules {
        ::std::default::Default::default()
    }

    // optional uint64 min_items = 1;

    pub fn min_items(&self) -> u64 {
        self.min_items.unwrap_or(0)
    }

    pub fn clear_min_items(&mut self) {
        self.min_items = ::std::option::Option::None;
    }

    pub fn has_min_items(&self) -> bool {
        self.min_items.is_some()
    }

    // Param is passed by value, moved
    pub fn set_min_items(&mut self, v: u64) {
        self.min_items = ::std::option::Option::Some(v);
    }

    // optional uint64 max_items = 2;

    pub fn max_items(&self) -> u64 {
        self.max_items.unwrap_or(0)
    }

    pub fn clear_max_items(&mut self) {
        self.max_items = ::std::option::Option::None;
    }

    pub fn has_max_items(&self) -> bool {
        self.max_items.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_items(&mut self, v: u64) {
        self.max_items = ::std::option::Option::Some(v);
    }

    // optional bool unique = 3;

    pub fn unique(&self) -> bool {
        self.unique.unwrap_or(false)
    }

    pub fn clear_unique(&mut self) {
        self.unique = ::std::option::Option::None;
    }

    pub fn has_unique(&self) -> bool {
        self.unique.is_some()
    }

    // Param is passed by value, moved
    pub fn set_unique(&mut self, v: bool) {
        self.unique = ::std::option::Option::Some(v);
    }

    // optional bool ignore_empty = 5;

    pub fn ignore_empty(&self) -> bool {
        self.ignore_empty.unwrap_or(false)
    }

    pub fn clear_ignore_empty(&mut self) {
        self.ignore_empty = ::std::option::Option::None;
    }

    pub fn has_ignore_empty(&self) -> bool {
        self.ignore_empty.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ignore_empty(&mut self, v: bool) {
        self.ignore_empty = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "min_items",
            |m: &RepeatedRules| { &m.min_items },
            |m: &mut RepeatedRules| { &mut m.min_items },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "max_items",
            |m: &RepeatedRules| { &m.max_items },
            |m: &mut RepeatedRules| { &mut m.max_items },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "unique",
            |m: &RepeatedRules| { &m.unique },
            |m: &mut RepeatedRules| { &mut m.unique },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, FieldRules>(
            "items",
            |m: &RepeatedRules| { &m.items },
            |m: &mut RepeatedRules| { &mut m.items },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ignore_empty",
            |m: &RepeatedRules| { &m.ignore_empty },
            |m: &mut RepeatedRules| { &mut m.ignore_empty },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RepeatedRules>(
            "RepeatedRules",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RepeatedRules {
    const NAME: &'static str = "RepeatedRules";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.min_items = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.max_items = ::std::option::Option::Some(is.read_uint64()?);
                },
                24 => {
                    self.unique = ::std::option::Option::Some(is.read_bool()?);
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.items)?;
                },
                40 => {
                    self.ignore_empty = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.min_items {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.max_items {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.unique {
            my_size += 1 + 1;
        }
        if let Some(v) = self.items.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.ignore_empty {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.min_items {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.max_items {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.unique {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.items.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.ignore_empty {
            os.write_bool(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RepeatedRules {
        RepeatedRules::new()
    }

    fn clear(&mut self) {
        self.min_items = ::std::option::Option::None;
        self.max_items = ::std::option::Option::None;
        self.unique = ::std::option::Option::None;
        self.items.clear();
        self.ignore_empty = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RepeatedRules {
        static instance: RepeatedRules = RepeatedRules {
            min_items: ::std::option::Option::None,
            max_items: ::std::option::Option::None,
            unique: ::std::option::Option::None,
            items: ::protobuf::MessageField::none(),
            ignore_empty: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RepeatedRules {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RepeatedRules").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RepeatedRules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RepeatedRules {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:validate.MapRules)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MapRules {
    // message fields
    // @@protoc_insertion_point(field:validate.MapRules.min_pairs)
    pub min_pairs: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:validate.MapRules.max_pairs)
    pub max_pairs: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:validate.MapRules.no_sparse)
    pub no_sparse: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:validate.MapRules.keys)
    pub keys: ::protobuf::MessageField<FieldRules>,
    // @@protoc_insertion_point(field:validate.MapRules.values)
    pub values: ::protobuf::MessageField<FieldRules>,
    // @@protoc_insertion_point(field:validate.MapRules.ignore_empty)
    pub ignore_empty: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:validate.MapRules.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MapRules {
    fn default() -> &'a MapRules {
        <MapRules as ::protobuf::Message>::default_instance()
    }
}

impl MapRules {
    pub fn new() -> MapRules {
        ::std::default::Default::default()
    }

    // optional uint64 min_pairs = 1;

    pub fn min_pairs(&self) -> u64 {
        self.min_pairs.unwrap_or(0)
    }

    pub fn clear_min_pairs(&mut self) {
        self.min_pairs = ::std::option::Option::None;
    }

    pub fn has_min_pairs(&self) -> bool {
        self.min_pairs.is_some()
    }

    // Param is passed by value, moved
    pub fn set_min_pairs(&mut self, v: u64) {
        self.min_pairs = ::std::option::Option::Some(v);
    }

    // optional uint64 max_pairs = 2;

    pub fn max_pairs(&self) -> u64 {
        self.max_pairs.unwrap_or(0)
    }

    pub fn clear_max_pairs(&mut self) {
        self.max_pairs = ::std::option::Option::None;
    }

    pub fn has_max_pairs(&self) -> bool {
        self.max_pairs.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_pairs(&mut self, v: u64) {
        self.max_pairs = ::std::option::Option::Some(v);
    }

    // optional bool no_sparse = 3;

    pub fn no_sparse(&self) -> bool {
        self.no_sparse.unwrap_or(false)
    }

    pub fn clear_no_sparse(&mut self) {
        self.no_sparse = ::std::option::Option::None;
    }

    pub fn has_no_sparse(&self) -> bool {
        self.no_sparse.is_some()
    }

    // Param is passed by value, moved
    pub fn set_no_sparse(&mut self, v: bool) {
        self.no_sparse = ::std::option::Option::Some(v);
    }

    // optional bool ignore_empty = 6;

    pub fn ignore_empty(&self) -> bool {
        self.ignore_empty.unwrap_or(false)
    }

    pub fn clear_ignore_empty(&mut self) {
        self.ignore_empty = ::std::option::Option::None;
    }

    pub fn has_ignore_empty(&self) -> bool {
        self.ignore_empty.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ignore_empty(&mut self, v: bool) {
        self.ignore_empty = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "min_pairs",
            |m: &MapRules| { &m.min_pairs },
            |m: &mut MapRules| { &mut m.min_pairs },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "max_pairs",
            |m: &MapRules| { &m.max_pairs },
            |m: &mut MapRules| { &mut m.max_pairs },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "no_sparse",
            |m: &MapRules| { &m.no_sparse },
            |m: &mut MapRules| { &mut m.no_sparse },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, FieldRules>(
            "keys",
            |m: &MapRules| { &m.keys },
            |m: &mut MapRules| { &mut m.keys },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, FieldRules>(
            "values",
            |m: &MapRules| { &m.values },
            |m: &mut MapRules| { &mut m.values },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ignore_empty",
            |m: &MapRules| { &m.ignore_empty },
            |m: &mut MapRules| { &mut m.ignore_empty },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MapRules>(
            "MapRules",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MapRules {
    const NAME: &'static str = "MapRules";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.min_pairs = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.max_pairs = ::std::option::Option::Some(is.read_uint64()?);
                },
                24 => {
                    self.no_sparse = ::std::option::Option::Some(is.read_bool()?);
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.keys)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.values)?;
                },
                48 => {
                    self.ignore_empty = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.min_pairs {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.max_pairs {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.no_sparse {
            my_size += 1 + 1;
        }
        if let Some(v) = self.keys.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.values.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.ignore_empty {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.min_pairs {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.max_pairs {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.no_sparse {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.keys.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.values.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.ignore_empty {
            os.write_bool(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MapRules {
        MapRules::new()
    }

    fn clear(&mut self) {
        self.min_pairs = ::std::option::Option::None;
        self.max_pairs = ::std::option::Option::None;
        self.no_sparse = ::std::option::Option::None;
        self.keys.clear();
        self.values.clear();
        self.ignore_empty = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MapRules {
        static instance: MapRules = MapRules {
            min_pairs: ::std::option::Option::None,
            max_pairs: ::std::option::Option::None,
            no_sparse: ::std::option::Option::None,
            keys: ::protobuf::MessageField::none(),
            values: ::protobuf::MessageField::none(),
            ignore_empty: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MapRules {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MapRules").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MapRules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MapRules {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:validate.AnyRules)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AnyRules {
    // message fields
    // @@protoc_insertion_point(field:validate.AnyRules.required)
    pub required: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:validate.AnyRules.in)
    pub in_: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:validate.AnyRules.not_in)
    pub not_in: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:validate.AnyRules.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AnyRules {
    fn default() -> &'a AnyRules {
        <AnyRules as ::protobuf::Message>::default_instance()
    }
}

impl AnyRules {
    pub fn new() -> AnyRules {
        ::std::default::Default::default()
    }

    // optional bool required = 1;

    pub fn required(&self) -> bool {
        self.required.unwrap_or(false)
    }

    pub fn clear_required(&mut self) {
        self.required = ::std::option::Option::None;
    }

    pub fn has_required(&self) -> bool {
        self.required.is_some()
    }

    // Param is passed by value, moved
    pub fn set_required(&mut self, v: bool) {
        self.required = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "required",
            |m: &AnyRules| { &m.required },
            |m: &mut AnyRules| { &mut m.required },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "in",
            |m: &AnyRules| { &m.in_ },
            |m: &mut AnyRules| { &mut m.in_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "not_in",
            |m: &AnyRules| { &m.not_in },
            |m: &mut AnyRules| { &mut m.not_in },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AnyRules>(
            "AnyRules",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AnyRules {
    const NAME: &'static str = "AnyRules";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.required = ::std::option::Option::Some(is.read_bool()?);
                },
                18 => {
                    self.in_.push(is.read_string()?);
                },
                26 => {
                    self.not_in.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.required {
            my_size += 1 + 1;
        }
        for value in &self.in_ {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        for value in &self.not_in {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.required {
            os.write_bool(1, v)?;
        }
        for v in &self.in_ {
            os.write_string(2, &v)?;
        };
        for v in &self.not_in {
            os.write_string(3, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AnyRules {
        AnyRules::new()
    }

    fn clear(&mut self) {
        self.required = ::std::option::Option::None;
        self.in_.clear();
        self.not_in.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AnyRules {
        static instance: AnyRules = AnyRules {
            required: ::std::option::Option::None,
            in_: ::std::vec::Vec::new(),
            not_in: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AnyRules {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AnyRules").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AnyRules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AnyRules {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:validate.DurationRules)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DurationRules {
    // message fields
    // @@protoc_insertion_point(field:validate.DurationRules.required)
    pub required: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:validate.DurationRules.const)
    pub const_: ::protobuf::MessageField<::protobuf::well_known_types::duration::Duration>,
    // @@protoc_insertion_point(field:validate.DurationRules.lt)
    pub lt: ::protobuf::MessageField<::protobuf::well_known_types::duration::Duration>,
    // @@protoc_insertion_point(field:validate.DurationRules.lte)
    pub lte: ::protobuf::MessageField<::protobuf::well_known_types::duration::Duration>,
    // @@protoc_insertion_point(field:validate.DurationRules.gt)
    pub gt: ::protobuf::MessageField<::protobuf::well_known_types::duration::Duration>,
    // @@protoc_insertion_point(field:validate.DurationRules.gte)
    pub gte: ::protobuf::MessageField<::protobuf::well_known_types::duration::Duration>,
    // @@protoc_insertion_point(field:validate.DurationRules.in)
    pub in_: ::std::vec::Vec<::protobuf::well_known_types::duration::Duration>,
    // @@protoc_insertion_point(field:validate.DurationRules.not_in)
    pub not_in: ::std::vec::Vec<::protobuf::well_known_types::duration::Duration>,
    // special fields
    // @@protoc_insertion_point(special_field:validate.DurationRules.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DurationRules {
    fn default() -> &'a DurationRules {
        <DurationRules as ::protobuf::Message>::default_instance()
    }
}

impl DurationRules {
    pub fn new() -> DurationRules {
        ::std::default::Default::default()
    }

    // optional bool required = 1;

    pub fn required(&self) -> bool {
        self.required.unwrap_or(false)
    }

    pub fn clear_required(&mut self) {
        self.required = ::std::option::Option::None;
    }

    pub fn has_required(&self) -> bool {
        self.required.is_some()
    }

    // Param is passed by value, moved
    pub fn set_required(&mut self, v: bool) {
        self.required = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "required",
            |m: &DurationRules| { &m.required },
            |m: &mut DurationRules| { &mut m.required },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::duration::Duration>(
            "const",
            |m: &DurationRules| { &m.const_ },
            |m: &mut DurationRules| { &mut m.const_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::duration::Duration>(
            "lt",
            |m: &DurationRules| { &m.lt },
            |m: &mut DurationRules| { &mut m.lt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::duration::Duration>(
            "lte",
            |m: &DurationRules| { &m.lte },
            |m: &mut DurationRules| { &mut m.lte },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::duration::Duration>(
            "gt",
            |m: &DurationRules| { &m.gt },
            |m: &mut DurationRules| { &mut m.gt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::duration::Duration>(
            "gte",
            |m: &DurationRules| { &m.gte },
            |m: &mut DurationRules| { &mut m.gte },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "in",
            |m: &DurationRules| { &m.in_ },
            |m: &mut DurationRules| { &mut m.in_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "not_in",
            |m: &DurationRules| { &m.not_in },
            |m: &mut DurationRules| { &mut m.not_in },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DurationRules>(
            "DurationRules",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DurationRules {
    const NAME: &'static str = "DurationRules";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.required = ::std::option::Option::Some(is.read_bool()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.const_)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.lt)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.lte)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.gt)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.gte)?;
                },
                58 => {
                    self.in_.push(is.read_message()?);
                },
                66 => {
                    self.not_in.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.required {
            my_size += 1 + 1;
        }
        if let Some(v) = self.const_.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.lt.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.lte.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.gt.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.gte.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.in_ {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.not_in {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.required {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.const_.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.lt.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.lte.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.gt.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.gte.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        for v in &self.in_ {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        for v in &self.not_in {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DurationRules {
        DurationRules::new()
    }

    fn clear(&mut self) {
        self.required = ::std::option::Option::None;
        self.const_.clear();
        self.lt.clear();
        self.lte.clear();
        self.gt.clear();
        self.gte.clear();
        self.in_.clear();
        self.not_in.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DurationRules {
        static instance: DurationRules = DurationRules {
            required: ::std::option::Option::None,
            const_: ::protobuf::MessageField::none(),
            lt: ::protobuf::MessageField::none(),
            lte: ::protobuf::MessageField::none(),
            gt: ::protobuf::MessageField::none(),
            gte: ::protobuf::MessageField::none(),
            in_: ::std::vec::Vec::new(),
            not_in: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DurationRules {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DurationRules").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DurationRules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DurationRules {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:validate.TimestampRules)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TimestampRules {
    // message fields
    // @@protoc_insertion_point(field:validate.TimestampRules.required)
    pub required: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:validate.TimestampRules.const)
    pub const_: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:validate.TimestampRules.lt)
    pub lt: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:validate.TimestampRules.lte)
    pub lte: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:validate.TimestampRules.gt)
    pub gt: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:validate.TimestampRules.gte)
    pub gte: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:validate.TimestampRules.lt_now)
    pub lt_now: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:validate.TimestampRules.gt_now)
    pub gt_now: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:validate.TimestampRules.within)
    pub within: ::protobuf::MessageField<::protobuf::well_known_types::duration::Duration>,
    // special fields
    // @@protoc_insertion_point(special_field:validate.TimestampRules.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TimestampRules {
    fn default() -> &'a TimestampRules {
        <TimestampRules as ::protobuf::Message>::default_instance()
    }
}

impl TimestampRules {
    pub fn new() -> TimestampRules {
        ::std::default::Default::default()
    }

    // optional bool required = 1;

    pub fn required(&self) -> bool {
        self.required.unwrap_or(false)
    }

    pub fn clear_required(&mut self) {
        self.required = ::std::option::Option::None;
    }

    pub fn has_required(&self) -> bool {
        self.required.is_some()
    }

    // Param is passed by value, moved
    pub fn set_required(&mut self, v: bool) {
        self.required = ::std::option::Option::Some(v);
    }

    // optional bool lt_now = 7;

    pub fn lt_now(&self) -> bool {
        self.lt_now.unwrap_or(false)
    }

    pub fn clear_lt_now(&mut self) {
        self.lt_now = ::std::option::Option::None;
    }

    pub fn has_lt_now(&self) -> bool {
        self.lt_now.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lt_now(&mut self, v: bool) {
        self.lt_now = ::std::option::Option::Some(v);
    }

    // optional bool gt_now = 8;

    pub fn gt_now(&self) -> bool {
        self.gt_now.unwrap_or(false)
    }

    pub fn clear_gt_now(&mut self) {
        self.gt_now = ::std::option::Option::None;
    }

    pub fn has_gt_now(&self) -> bool {
        self.gt_now.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gt_now(&mut self, v: bool) {
        self.gt_now = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "required",
            |m: &TimestampRules| { &m.required },
            |m: &mut TimestampRules| { &mut m.required },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "const",
            |m: &TimestampRules| { &m.const_ },
            |m: &mut TimestampRules| { &mut m.const_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "lt",
            |m: &TimestampRules| { &m.lt },
            |m: &mut TimestampRules| { &mut m.lt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "lte",
            |m: &TimestampRules| { &m.lte },
            |m: &mut TimestampRules| { &mut m.lte },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "gt",
            |m: &TimestampRules| { &m.gt },
            |m: &mut TimestampRules| { &mut m.gt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "gte",
            |m: &TimestampRules| { &m.gte },
            |m: &mut TimestampRules| { &mut m.gte },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "lt_now",
            |m: &TimestampRules| { &m.lt_now },
            |m: &mut TimestampRules| { &mut m.lt_now },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gt_now",
            |m: &TimestampRules| { &m.gt_now },
            |m: &mut TimestampRules| { &mut m.gt_now },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::duration::Duration>(
            "within",
            |m: &TimestampRules| { &m.within },
            |m: &mut TimestampRules| { &mut m.within },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TimestampRules>(
            "TimestampRules",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TimestampRules {
    const NAME: &'static str = "TimestampRules";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.required = ::std::option::Option::Some(is.read_bool()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.const_)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.lt)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.lte)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.gt)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.gte)?;
                },
                56 => {
                    self.lt_now = ::std::option::Option::Some(is.read_bool()?);
                },
                64 => {
                    self.gt_now = ::std::option::Option::Some(is.read_bool()?);
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.within)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.required {
            my_size += 1 + 1;
        }
        if let Some(v) = self.const_.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.lt.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.lte.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.gt.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.gte.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.lt_now {
            my_size += 1 + 1;
        }
        if let Some(v) = self.gt_now {
            my_size += 1 + 1;
        }
        if let Some(v) = self.within.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.required {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.const_.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.lt.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.lte.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.gt.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.gte.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if let Some(v) = self.lt_now {
            os.write_bool(7, v)?;
        }
        if let Some(v) = self.gt_now {
            os.write_bool(8, v)?;
        }
        if let Some(v) = self.within.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TimestampRules {
        TimestampRules::new()
    }

    fn clear(&mut self) {
        self.required = ::std::option::Option::None;
        self.const_.clear();
        self.lt.clear();
        self.lte.clear();
        self.gt.clear();
        self.gte.clear();
        self.lt_now = ::std::option::Option::None;
        self.gt_now = ::std::option::Option::None;
        self.within.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TimestampRules {
        static instance: TimestampRules = TimestampRules {
            required: ::std::option::Option::None,
            const_: ::protobuf::MessageField::none(),
            lt: ::protobuf::MessageField::none(),
            lte: ::protobuf::MessageField::none(),
            gt: ::protobuf::MessageField::none(),
            gte: ::protobuf::MessageField::none(),
            lt_now: ::std::option::Option::None,
            gt_now: ::std::option::Option::None,
            within: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TimestampRules {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TimestampRules").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TimestampRules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TimestampRules {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:validate.KnownRegex)
pub enum KnownRegex {
    // @@protoc_insertion_point(enum_value:validate.KnownRegex.UNKNOWN)
    UNKNOWN = 0,
    // @@protoc_insertion_point(enum_value:validate.KnownRegex.HTTP_HEADER_NAME)
    HTTP_HEADER_NAME = 1,
    // @@protoc_insertion_point(enum_value:validate.KnownRegex.HTTP_HEADER_VALUE)
    HTTP_HEADER_VALUE = 2,
}

impl ::protobuf::Enum for KnownRegex {
    const NAME: &'static str = "KnownRegex";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<KnownRegex> {
        match value {
            0 => ::std::option::Option::Some(KnownRegex::UNKNOWN),
            1 => ::std::option::Option::Some(KnownRegex::HTTP_HEADER_NAME),
            2 => ::std::option::Option::Some(KnownRegex::HTTP_HEADER_VALUE),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<KnownRegex> {
        match str {
            "UNKNOWN" => ::std::option::Option::Some(KnownRegex::UNKNOWN),
            "HTTP_HEADER_NAME" => ::std::option::Option::Some(KnownRegex::HTTP_HEADER_NAME),
            "HTTP_HEADER_VALUE" => ::std::option::Option::Some(KnownRegex::HTTP_HEADER_VALUE),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [KnownRegex] = &[
        KnownRegex::UNKNOWN,
        KnownRegex::HTTP_HEADER_NAME,
        KnownRegex::HTTP_HEADER_VALUE,
    ];
}

impl ::protobuf::EnumFull for KnownRegex {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("KnownRegex").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for KnownRegex {
    fn default() -> Self {
        KnownRegex::UNKNOWN
    }
}

impl KnownRegex {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<KnownRegex>("KnownRegex")
    }
}

/// Extension fields
pub mod exts {

    pub const disabled: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::MessageOptions, bool> = ::protobuf::ext::ExtFieldOptional::new(1071, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_BOOL);

    pub const ignored: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::MessageOptions, bool> = ::protobuf::ext::ExtFieldOptional::new(1072, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_BOOL);

    pub const required: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::OneofOptions, bool> = ::protobuf::ext::ExtFieldOptional::new(1071, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_BOOL);

    pub const rules: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::FieldOptions, super::FieldRules> = ::protobuf::ext::ExtFieldOptional::new(1071, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_MESSAGE);
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17validate/validate.proto\x12\x08validate\x1a\x20google/protobuf/des\
    criptor.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1fgoogle/protob\
    uf/timestamp.proto\"\xc8\x08\n\nFieldRules\x120\n\x07message\x18\x11\x20\
    \x01(\x0b2\x16.validate.MessageRulesR\x07message\x12,\n\x05float\x18\x01\
    \x20\x01(\x0b2\x14.validate.FloatRulesH\0R\x05float\x12/\n\x06double\x18\
    \x02\x20\x01(\x0b2\x15.validate.DoubleRulesH\0R\x06double\x12,\n\x05int3\
    2\x18\x03\x20\x01(\x0b2\x14.validate.Int32RulesH\0R\x05int32\x12,\n\x05i\
    nt64\x18\x04\x20\x01(\x0b2\x14.validate.Int64RulesH\0R\x05int64\x12/\n\
    \x06uint32\x18\x05\x20\x01(\x0b2\x15.validate.UInt32RulesH\0R\x06uint32\
    \x12/\n\x06uint64\x18\x06\x20\x01(\x0b2\x15.validate.UInt64RulesH\0R\x06\
    uint64\x12/\n\x06sint32\x18\x07\x20\x01(\x0b2\x15.validate.SInt32RulesH\
    \0R\x06sint32\x12/\n\x06sint64\x18\x08\x20\x01(\x0b2\x15.validate.SInt64\
    RulesH\0R\x06sint64\x122\n\x07fixed32\x18\t\x20\x01(\x0b2\x16.validate.F\
    ixed32RulesH\0R\x07fixed32\x122\n\x07fixed64\x18\n\x20\x01(\x0b2\x16.val\
    idate.Fixed64RulesH\0R\x07fixed64\x125\n\x08sfixed32\x18\x0b\x20\x01(\
    \x0b2\x17.validate.SFixed32RulesH\0R\x08sfixed32\x125\n\x08sfixed64\x18\
    \x0c\x20\x01(\x0b2\x17.validate.SFixed64RulesH\0R\x08sfixed64\x12)\n\x04\
    bool\x18\r\x20\x01(\x0b2\x13.validate.BoolRulesH\0R\x04bool\x12/\n\x06st\
    ring\x18\x0e\x20\x01(\x0b2\x15.validate.StringRulesH\0R\x06string\x12,\n\
    \x05bytes\x18\x0f\x20\x01(\x0b2\x14.validate.BytesRulesH\0R\x05bytes\x12\
    )\n\x04enum\x18\x10\x20\x01(\x0b2\x13.validate.EnumRulesH\0R\x04enum\x12\
    5\n\x08repeated\x18\x12\x20\x01(\x0b2\x17.validate.RepeatedRulesH\0R\x08\
    repeated\x12&\n\x03map\x18\x13\x20\x01(\x0b2\x12.validate.MapRulesH\0R\
    \x03map\x12&\n\x03any\x18\x14\x20\x01(\x0b2\x12.validate.AnyRulesH\0R\
    \x03any\x125\n\x08duration\x18\x15\x20\x01(\x0b2\x17.validate.DurationRu\
    lesH\0R\x08duration\x128\n\ttimestamp\x18\x16\x20\x01(\x0b2\x18.validate\
    .TimestampRulesH\0R\ttimestampB\x06\n\x04type\"\xb0\x01\n\nFloatRules\
    \x12\x14\n\x05const\x18\x01\x20\x01(\x02R\x05const\x12\x0e\n\x02lt\x18\
    \x02\x20\x01(\x02R\x02lt\x12\x10\n\x03lte\x18\x03\x20\x01(\x02R\x03lte\
    \x12\x0e\n\x02gt\x18\x04\x20\x01(\x02R\x02gt\x12\x10\n\x03gte\x18\x05\
    \x20\x01(\x02R\x03gte\x12\x0e\n\x02in\x18\x06\x20\x03(\x02R\x02in\x12\
    \x15\n\x06not_in\x18\x07\x20\x03(\x02R\x05notIn\x12!\n\x0cignore_empty\
    \x18\x08\x20\x01(\x08R\x0bignoreEmpty\"\xb1\x01\n\x0bDoubleRules\x12\x14\
    \n\x05const\x18\x01\x20\x01(\x01R\x05const\x12\x0e\n\x02lt\x18\x02\x20\
    \x01(\x01R\x02lt\x12\x10\n\x03lte\x18\x03\x20\x01(\x01R\x03lte\x12\x0e\n\
    \x02gt\x18\x04\x20\x01(\x01R\x02gt\x12\x10\n\x03gte\x18\x05\x20\x01(\x01\
    R\x03gte\x12\x0e\n\x02in\x18\x06\x20\x03(\x01R\x02in\x12\x15\n\x06not_in\
    \x18\x07\x20\x03(\x01R\x05notIn\x12!\n\x0cignore_empty\x18\x08\x20\x01(\
    \x08R\x0bignoreEmpty\"\xb0\x01\n\nInt32Rules\x12\x14\n\x05const\x18\x01\
    \x20\x01(\x05R\x05const\x12\x0e\n\x02lt\x18\x02\x20\x01(\x05R\x02lt\x12\
    \x10\n\x03lte\x18\x03\x20\x01(\x05R\x03lte\x12\x0e\n\x02gt\x18\x04\x20\
    \x01(\x05R\x02gt\x12\x10\n\x03gte\x18\x05\x20\x01(\x05R\x03gte\x12\x0e\n\
    \x02in\x18\x06\x20\x03(\x05R\x02in\x12\x15\n\x06not_in\x18\x07\x20\x03(\
    \x05R\x05notIn\x12!\n\x0cignore_empty\x18\x08\x20\x01(\x08R\x0bignoreEmp\
    ty\"\xb0\x01\n\nInt64Rules\x12\x14\n\x05const\x18\x01\x20\x01(\x03R\x05c\
    onst\x12\x0e\n\x02lt\x18\x02\x20\x01(\x03R\x02lt\x12\x10\n\x03lte\x18\
    \x03\x20\x01(\x03R\x03lte\x12\x0e\n\x02gt\x18\x04\x20\x01(\x03R\x02gt\
    \x12\x10\n\x03gte\x18\x05\x20\x01(\x03R\x03gte\x12\x0e\n\x02in\x18\x06\
    \x20\x03(\x03R\x02in\x12\x15\n\x06not_in\x18\x07\x20\x03(\x03R\x05notIn\
    \x12!\n\x0cignore_empty\x18\x08\x20\x01(\x08R\x0bignoreEmpty\"\xb1\x01\n\
    \x0bUInt32Rules\x12\x14\n\x05const\x18\x01\x20\x01(\rR\x05const\x12\x0e\
    \n\x02lt\x18\x02\x20\x01(\rR\x02lt\x12\x10\n\x03lte\x18\x03\x20\x01(\rR\
    \x03lte\x12\x0e\n\x02gt\x18\x04\x20\x01(\rR\x02gt\x12\x10\n\x03gte\x18\
    \x05\x20\x01(\rR\x03gte\x12\x0e\n\x02in\x18\x06\x20\x03(\rR\x02in\x12\
    \x15\n\x06not_in\x18\x07\x20\x03(\rR\x05notIn\x12!\n\x0cignore_empty\x18\
    \x08\x20\x01(\x08R\x0bignoreEmpty\"\xb1\x01\n\x0bUInt64Rules\x12\x14\n\
    \x05const\x18\x01\x20\x01(\x04R\x05const\x12\x0e\n\x02lt\x18\x02\x20\x01\
    (\x04R\x02lt\x12\x10\n\x03lte\x18\x03\x20\x01(\x04R\x03lte\x12\x0e\n\x02\
    gt\x18\x04\x20\x01(\x04R\x02gt\x12\x10\n\x03gte\x18\x05\x20\x01(\x04R\
    \x03gte\x12\x0e\n\x02in\x18\x06\x20\x03(\x04R\x02in\x12\x15\n\x06not_in\
    \x18\x07\x20\x03(\x04R\x05notIn\x12!\n\x0cignore_empty\x18\x08\x20\x01(\
    \x08R\x0bignoreEmpty\"\xb1\x01\n\x0bSInt32Rules\x12\x14\n\x05const\x18\
    \x01\x20\x01(\x11R\x05const\x12\x0e\n\x02lt\x18\x02\x20\x01(\x11R\x02lt\
    \x12\x10\n\x03lte\x18\x03\x20\x01(\x11R\x03lte\x12\x0e\n\x02gt\x18\x04\
    \x20\x01(\x11R\x02gt\x12\x10\n\x03gte\x18\x05\x20\x01(\x11R\x03gte\x12\
    \x0e\n\x02in\x18\x06\x20\x03(\x11R\x02in\x12\x15\n\x06not_in\x18\x07\x20\
    \x03(\x11R\x05notIn\x12!\n\x0cignore_empty\x18\x08\x20\x01(\x08R\x0bigno\
    reEmpty\"\xb1\x01\n\x0bSInt64Rules\x12\x14\n\x05const\x18\x01\x20\x01(\
    \x12R\x05const\x12\x0e\n\x02lt\x18\x02\x20\x01(\x12R\x02lt\x12\x10\n\x03\
    lte\x18\x03\x20\x01(\x12R\x03lte\x12\x0e\n\x02gt\x18\x04\x20\x01(\x12R\
    \x02gt\x12\x10\n\x03gte\x18\x05\x20\x01(\x12R\x03gte\x12\x0e\n\x02in\x18\
    \x06\x20\x03(\x12R\x02in\x12\x15\n\x06not_in\x18\x07\x20\x03(\x12R\x05no\
    tIn\x12!\n\x0cignore_empty\x18\x08\x20\x01(\x08R\x0bignoreEmpty\"\xb2\
    \x01\n\x0cFixed32Rules\x12\x14\n\x05const\x18\x01\x20\x01(\x07R\x05const\
    \x12\x0e\n\x02lt\x18\x02\x20\x01(\x07R\x02lt\x12\x10\n\x03lte\x18\x03\
    \x20\x01(\x07R\x03lte\x12\x0e\n\x02gt\x18\x04\x20\x01(\x07R\x02gt\x12\
    \x10\n\x03gte\x18\x05\x20\x01(\x07R\x03gte\x12\x0e\n\x02in\x18\x06\x20\
    \x03(\x07R\x02in\x12\x15\n\x06not_in\x18\x07\x20\x03(\x07R\x05notIn\x12!\
    \n\x0cignore_empty\x18\x08\x20\x01(\x08R\x0bignoreEmpty\"\xb2\x01\n\x0cF\
    ixed64Rules\x12\x14\n\x05const\x18\x01\x20\x01(\x06R\x05const\x12\x0e\n\
    \x02lt\x18\x02\x20\x01(\x06R\x02lt\x12\x10\n\x03lte\x18\x03\x20\x01(\x06\
    R\x03lte\x12\x0e\n\x02gt\x18\x04\x20\x01(\x06R\x02gt\x12\x10\n\x03gte\
    \x18\x05\x20\x01(\x06R\x03gte\x12\x0e\n\x02in\x18\x06\x20\x03(\x06R\x02i\
    n\x12\x15\n\x06not_in\x18\x07\x20\x03(\x06R\x05notIn\x12!\n\x0cignore_em\
    pty\x18\x08\x20\x01(\x08R\x0bignoreEmpty\"\xb3\x01\n\rSFixed32Rules\x12\
    \x14\n\x05const\x18\x01\x20\x01(\x0fR\x05const\x12\x0e\n\x02lt\x18\x02\
    \x20\x01(\x0fR\x02lt\x12\x10\n\x03lte\x18\x03\x20\x01(\x0fR\x03lte\x12\
    \x0e\n\x02gt\x18\x04\x20\x01(\x0fR\x02gt\x12\x10\n\x03gte\x18\x05\x20\
    \x01(\x0fR\x03gte\x12\x0e\n\x02in\x18\x06\x20\x03(\x0fR\x02in\x12\x15\n\
    \x06not_in\x18\x07\x20\x03(\x0fR\x05notIn\x12!\n\x0cignore_empty\x18\x08\
    \x20\x01(\x08R\x0bignoreEmpty\"\xb3\x01\n\rSFixed64Rules\x12\x14\n\x05co\
    nst\x18\x01\x20\x01(\x10R\x05const\x12\x0e\n\x02lt\x18\x02\x20\x01(\x10R\
    \x02lt\x12\x10\n\x03lte\x18\x03\x20\x01(\x10R\x03lte\x12\x0e\n\x02gt\x18\
    \x04\x20\x01(\x10R\x02gt\x12\x10\n\x03gte\x18\x05\x20\x01(\x10R\x03gte\
    \x12\x0e\n\x02in\x18\x06\x20\x03(\x10R\x02in\x12\x15\n\x06not_in\x18\x07\
    \x20\x03(\x10R\x05notIn\x12!\n\x0cignore_empty\x18\x08\x20\x01(\x08R\x0b\
    ignoreEmpty\"!\n\tBoolRules\x12\x14\n\x05const\x18\x01\x20\x01(\x08R\x05\
    const\"\xd4\x05\n\x0bStringRules\x12\x14\n\x05const\x18\x01\x20\x01(\tR\
    \x05const\x12\x10\n\x03len\x18\x13\x20\x01(\x04R\x03len\x12\x17\n\x07min\
    _len\x18\x02\x20\x01(\x04R\x06minLen\x12\x17\n\x07max_len\x18\x03\x20\
    \x01(\x04R\x06maxLen\x12\x1b\n\tlen_bytes\x18\x14\x20\x01(\x04R\x08lenBy\
    tes\x12\x1b\n\tmin_bytes\x18\x04\x20\x01(\x04R\x08minBytes\x12\x1b\n\tma\
    x_bytes\x18\x05\x20\x01(\x04R\x08maxBytes\x12\x18\n\x07pattern\x18\x06\
    \x20\x01(\tR\x07pattern\x12\x16\n\x06prefix\x18\x07\x20\x01(\tR\x06prefi\
    x\x12\x16\n\x06suffix\x18\x08\x20\x01(\tR\x06suffix\x12\x1a\n\x08contain\
    s\x18\t\x20\x01(\tR\x08contains\x12!\n\x0cnot_contains\x18\x17\x20\x01(\
    \tR\x0bnotContains\x12\x0e\n\x02in\x18\n\x20\x03(\tR\x02in\x12\x15\n\x06\
    not_in\x18\x0b\x20\x03(\tR\x05notIn\x12\x16\n\x05email\x18\x0c\x20\x01(\
    \x08H\0R\x05email\x12\x1c\n\x08hostname\x18\r\x20\x01(\x08H\0R\x08hostna\
    me\x12\x10\n\x02ip\x18\x0e\x20\x01(\x08H\0R\x02ip\x12\x14\n\x04ipv4\x18\
    \x0f\x20\x01(\x08H\0R\x04ipv4\x12\x14\n\x04ipv6\x18\x10\x20\x01(\x08H\0R\
    \x04ipv6\x12\x12\n\x03uri\x18\x11\x20\x01(\x08H\0R\x03uri\x12\x19\n\x07u\
    ri_ref\x18\x12\x20\x01(\x08H\0R\x06uriRef\x12\x1a\n\x07address\x18\x15\
    \x20\x01(\x08H\0R\x07address\x12\x14\n\x04uuid\x18\x16\x20\x01(\x08H\0R\
    \x04uuid\x12@\n\x10well_known_regex\x18\x18\x20\x01(\x0e2\x14.validate.K\
    nownRegexH\0R\x0ewellKnownRegex\x12\x1c\n\x06strict\x18\x19\x20\x01(\x08\
    :\x04trueR\x06strict\x12!\n\x0cignore_empty\x18\x1a\x20\x01(\x08R\x0bign\
    oreEmptyB\x0c\n\nwell_known\"\xe2\x02\n\nBytesRules\x12\x14\n\x05const\
    \x18\x01\x20\x01(\x0cR\x05const\x12\x10\n\x03len\x18\r\x20\x01(\x04R\x03\
    len\x12\x17\n\x07min_len\x18\x02\x20\x01(\x04R\x06minLen\x12\x17\n\x07ma\
    x_len\x18\x03\x20\x01(\x04R\x06maxLen\x12\x18\n\x07pattern\x18\x04\x20\
    \x01(\tR\x07pattern\x12\x16\n\x06prefix\x18\x05\x20\x01(\x0cR\x06prefix\
    \x12\x16\n\x06suffix\x18\x06\x20\x01(\x0cR\x06suffix\x12\x1a\n\x08contai\
    ns\x18\x07\x20\x01(\x0cR\x08contains\x12\x0e\n\x02in\x18\x08\x20\x03(\
    \x0cR\x02in\x12\x15\n\x06not_in\x18\t\x20\x03(\x0cR\x05notIn\x12\x10\n\
    \x02ip\x18\n\x20\x01(\x08H\0R\x02ip\x12\x14\n\x04ipv4\x18\x0b\x20\x01(\
    \x08H\0R\x04ipv4\x12\x14\n\x04ipv6\x18\x0c\x20\x01(\x08H\0R\x04ipv6\x12!\
    \n\x0cignore_empty\x18\x0e\x20\x01(\x08R\x0bignoreEmptyB\x0c\n\nwell_kno\
    wn\"k\n\tEnumRules\x12\x14\n\x05const\x18\x01\x20\x01(\x05R\x05const\x12\
    !\n\x0cdefined_only\x18\x02\x20\x01(\x08R\x0bdefinedOnly\x12\x0e\n\x02in\
    \x18\x03\x20\x03(\x05R\x02in\x12\x15\n\x06not_in\x18\x04\x20\x03(\x05R\
    \x05notIn\">\n\x0cMessageRules\x12\x12\n\x04skip\x18\x01\x20\x01(\x08R\
    \x04skip\x12\x1a\n\x08required\x18\x02\x20\x01(\x08R\x08required\"\xb0\
    \x01\n\rRepeatedRules\x12\x1b\n\tmin_items\x18\x01\x20\x01(\x04R\x08minI\
    tems\x12\x1b\n\tmax_items\x18\x02\x20\x01(\x04R\x08maxItems\x12\x16\n\
    \x06unique\x18\x03\x20\x01(\x08R\x06unique\x12*\n\x05items\x18\x04\x20\
    \x01(\x0b2\x14.validate.FieldRulesR\x05items\x12!\n\x0cignore_empty\x18\
    \x05\x20\x01(\x08R\x0bignoreEmpty\"\xdc\x01\n\x08MapRules\x12\x1b\n\tmin\
    _pairs\x18\x01\x20\x01(\x04R\x08minPairs\x12\x1b\n\tmax_pairs\x18\x02\
    \x20\x01(\x04R\x08maxPairs\x12\x1b\n\tno_sparse\x18\x03\x20\x01(\x08R\
    \x08noSparse\x12(\n\x04keys\x18\x04\x20\x01(\x0b2\x14.validate.FieldRule\
    sR\x04keys\x12,\n\x06values\x18\x05\x20\x01(\x0b2\x14.validate.FieldRule\
    sR\x06values\x12!\n\x0cignore_empty\x18\x06\x20\x01(\x08R\x0bignoreEmpty\
    \"M\n\x08AnyRules\x12\x1a\n\x08required\x18\x01\x20\x01(\x08R\x08require\
    d\x12\x0e\n\x02in\x18\x02\x20\x03(\tR\x02in\x12\x15\n\x06not_in\x18\x03\
    \x20\x03(\tR\x05notIn\"\xe9\x02\n\rDurationRules\x12\x1a\n\x08required\
    \x18\x01\x20\x01(\x08R\x08required\x12/\n\x05const\x18\x02\x20\x01(\x0b2\
    \x19.google.protobuf.DurationR\x05const\x12)\n\x02lt\x18\x03\x20\x01(\
    \x0b2\x19.google.protobuf.DurationR\x02lt\x12+\n\x03lte\x18\x04\x20\x01(\
    \x0b2\x19.google.protobuf.DurationR\x03lte\x12)\n\x02gt\x18\x05\x20\x01(\
    \x0b2\x19.google.protobuf.DurationR\x02gt\x12+\n\x03gte\x18\x06\x20\x01(\
    \x0b2\x19.google.protobuf.DurationR\x03gte\x12)\n\x02in\x18\x07\x20\x03(\
    \x0b2\x19.google.protobuf.DurationR\x02in\x120\n\x06not_in\x18\x08\x20\
    \x03(\x0b2\x19.google.protobuf.DurationR\x05notIn\"\xf3\x02\n\x0eTimesta\
    mpRules\x12\x1a\n\x08required\x18\x01\x20\x01(\x08R\x08required\x120\n\
    \x05const\x18\x02\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x05const\
    \x12*\n\x02lt\x18\x03\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x02lt\
    \x12,\n\x03lte\x18\x04\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x03l\
    te\x12*\n\x02gt\x18\x05\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x02\
    gt\x12,\n\x03gte\x18\x06\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\
    \x03gte\x12\x15\n\x06lt_now\x18\x07\x20\x01(\x08R\x05ltNow\x12\x15\n\x06\
    gt_now\x18\x08\x20\x01(\x08R\x05gtNow\x121\n\x06within\x18\t\x20\x01(\
    \x0b2\x19.google.protobuf.DurationR\x06within*F\n\nKnownRegex\x12\x0b\n\
    \x07UNKNOWN\x10\0\x12\x14\n\x10HTTP_HEADER_NAME\x10\x01\x12\x15\n\x11HTT\
    P_HEADER_VALUE\x10\x02:<\n\x08disabled\x18\xaf\x08\x20\x01(\x08\x12\x1f.\
    google.protobuf.MessageOptionsR\x08disabled::\n\x07ignored\x18\xb0\x08\
    \x20\x01(\x08\x12\x1f.google.protobuf.MessageOptionsR\x07ignored::\n\x08\
    required\x18\xaf\x08\x20\x01(\x08\x12\x1d.google.protobuf.OneofOptionsR\
    \x08required:J\n\x05rules\x18\xaf\x08\x20\x01(\x0b2\x14.validate.FieldRu\
    les\x12\x1d.google.protobuf.FieldOptionsR\x05rulesBP\n\x1aio.envoyproxy.\
    pgv.validateZ2github.com/envoyproxy/protoc-gen-validate/validate\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(::protobuf::descriptor::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::duration::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(23);
            messages.push(FieldRules::generated_message_descriptor_data());
            messages.push(FloatRules::generated_message_descriptor_data());
            messages.push(DoubleRules::generated_message_descriptor_data());
            messages.push(Int32Rules::generated_message_descriptor_data());
            messages.push(Int64Rules::generated_message_descriptor_data());
            messages.push(UInt32Rules::generated_message_descriptor_data());
            messages.push(UInt64Rules::generated_message_descriptor_data());
            messages.push(SInt32Rules::generated_message_descriptor_data());
            messages.push(SInt64Rules::generated_message_descriptor_data());
            messages.push(Fixed32Rules::generated_message_descriptor_data());
            messages.push(Fixed64Rules::generated_message_descriptor_data());
            messages.push(SFixed32Rules::generated_message_descriptor_data());
            messages.push(SFixed64Rules::generated_message_descriptor_data());
            messages.push(BoolRules::generated_message_descriptor_data());
            messages.push(StringRules::generated_message_descriptor_data());
            messages.push(BytesRules::generated_message_descriptor_data());
            messages.push(EnumRules::generated_message_descriptor_data());
            messages.push(MessageRules::generated_message_descriptor_data());
            messages.push(RepeatedRules::generated_message_descriptor_data());
            messages.push(MapRules::generated_message_descriptor_data());
            messages.push(AnyRules::generated_message_descriptor_data());
            messages.push(DurationRules::generated_message_descriptor_data());
            messages.push(TimestampRules::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(KnownRegex::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
