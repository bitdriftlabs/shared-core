// This file is generated by rust-protobuf 4.0.0-alpha.0. Do not edit
// .proto file is parsed by protoc 27.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `test_validate.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_4_0_0_ALPHA_0;

// @@protoc_insertion_point(message:proto_validate.test.Duration)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Duration {
    // message fields
    // @@protoc_insertion_point(field:proto_validate.test.Duration.field)
    pub field: ::protobuf::MessageField<::protobuf::well_known_types::duration::Duration>,
    // special fields
    // @@protoc_insertion_point(special_field:proto_validate.test.Duration.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Duration {
    fn default() -> &'a Duration {
        <Duration as ::protobuf::Message>::default_instance()
    }
}

impl Duration {
    pub fn new() -> Duration {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::duration::Duration>(
            "field",
            |m: &Duration| { &m.field },
            |m: &mut Duration| { &mut m.field },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Duration>(
            "Duration",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Duration {
    const NAME: &'static str = "Duration";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.field)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.field.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.field.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Duration {
        Duration::new()
    }

    fn clear(&mut self) {
        self.field.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Duration {
        static instance: Duration = Duration {
            field: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Duration {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Duration").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Duration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Duration {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:proto_validate.test.Bool)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Bool {
    // message fields
    // @@protoc_insertion_point(field:proto_validate.test.Bool.field)
    pub field: bool,
    // message oneof groups
    pub test: ::std::option::Option<bool::Test>,
    // special fields
    // @@protoc_insertion_point(special_field:proto_validate.test.Bool.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Bool {
    fn default() -> &'a Bool {
        <Bool as ::protobuf::Message>::default_instance()
    }
}

impl Bool {
    pub fn new() -> Bool {
        ::std::default::Default::default()
    }

    // bool field2 = 2;

    pub fn field2(&self) -> bool {
        match self.test {
            ::std::option::Option::Some(bool::Test::Field2(v)) => v,
            _ => false,
        }
    }

    pub fn clear_field2(&mut self) {
        self.test = ::std::option::Option::None;
    }

    pub fn has_field2(&self) -> bool {
        match self.test {
            ::std::option::Option::Some(bool::Test::Field2(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_field2(&mut self, v: bool) {
        self.test = ::std::option::Option::Some(bool::Test::Field2(v))
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "field",
            |m: &Bool| { &m.field },
            |m: &mut Bool| { &mut m.field },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "field2",
            Bool::has_field2,
            Bool::field2,
            Bool::set_field2,
        ));
        oneofs.push(bool::Test::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Bool>(
            "Bool",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Bool {
    const NAME: &'static str = "Bool";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.field = is.read_bool()?;
                },
                16 => {
                    self.test = ::std::option::Option::Some(bool::Test::Field2(is.read_bool()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.field != false {
            my_size += 1 + 1;
        }
        if let ::std::option::Option::Some(ref v) = self.test {
            match v {
                &bool::Test::Field2(v) => {
                    my_size += 1 + 1;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.field != false {
            os.write_bool(1, self.field)?;
        }
        if let ::std::option::Option::Some(ref v) = self.test {
            match v {
                &bool::Test::Field2(v) => {
                    os.write_bool(2, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Bool {
        Bool::new()
    }

    fn clear(&mut self) {
        self.field = false;
        self.test = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Bool {
        static instance: Bool = Bool {
            field: false,
            test: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Bool {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Bool").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Bool {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Bool {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Bool`
pub mod bool {

    #[derive(Clone,PartialEq,Debug)]
    // @@protoc_insertion_point(oneof:proto_validate.test.Bool.test)
    pub enum Test {
        // @@protoc_insertion_point(oneof_field:proto_validate.test.Bool.field2)
        Field2(bool),
    }

    impl ::protobuf::Oneof for Test {
    }

    impl ::protobuf::OneofFull for Test {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Bool as ::protobuf::MessageFull>::descriptor().oneof_by_name("test").unwrap()).clone()
        }
    }

    impl Test {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Test>("test")
        }
    }
}

// @@protoc_insertion_point(message:proto_validate.test.String)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct String {
    // message fields
    // @@protoc_insertion_point(field:proto_validate.test.String.field)
    pub field: ::std::string::String,
    // @@protoc_insertion_point(field:proto_validate.test.String.field2)
    pub field2: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:proto_validate.test.String.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a String {
    fn default() -> &'a String {
        <String as ::protobuf::Message>::default_instance()
    }
}

impl String {
    pub fn new() -> String {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "field",
            |m: &String| { &m.field },
            |m: &mut String| { &mut m.field },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "field2",
            |m: &String| { &m.field2 },
            |m: &mut String| { &mut m.field2 },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<String>(
            "String",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for String {
    const NAME: &'static str = "String";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.field = is.read_string()?;
                },
                18 => {
                    self.field2 = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.field.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.field);
        }
        if !self.field2.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.field2);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.field.is_empty() {
            os.write_string(1, &self.field)?;
        }
        if !self.field2.is_empty() {
            os.write_string(2, &self.field2)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> String {
        String::new()
    }

    fn clear(&mut self) {
        self.field.clear();
        self.field2.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static String {
        static instance: String = String {
            field: ::std::string::String::new(),
            field2: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for String {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("String").unwrap()).clone()
    }
}

impl ::std::fmt::Display for String {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for String {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:proto_validate.test.Repeated)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Repeated {
    // message fields
    // @@protoc_insertion_point(field:proto_validate.test.Repeated.strings)
    pub strings: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:proto_validate.test.Repeated.messages)
    pub messages: ::std::vec::Vec<repeated::Inner>,
    // special fields
    // @@protoc_insertion_point(special_field:proto_validate.test.Repeated.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Repeated {
    fn default() -> &'a Repeated {
        <Repeated as ::protobuf::Message>::default_instance()
    }
}

impl Repeated {
    pub fn new() -> Repeated {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "strings",
            |m: &Repeated| { &m.strings },
            |m: &mut Repeated| { &mut m.strings },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "messages",
            |m: &Repeated| { &m.messages },
            |m: &mut Repeated| { &mut m.messages },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Repeated>(
            "Repeated",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Repeated {
    const NAME: &'static str = "Repeated";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.strings.push(is.read_string()?);
                },
                18 => {
                    self.messages.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.strings {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        for value in &self.messages {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.strings {
            os.write_string(1, &v)?;
        };
        for v in &self.messages {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Repeated {
        Repeated::new()
    }

    fn clear(&mut self) {
        self.strings.clear();
        self.messages.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Repeated {
        static instance: Repeated = Repeated {
            strings: ::std::vec::Vec::new(),
            messages: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Repeated {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Repeated").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Repeated {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Repeated {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Repeated`
pub mod repeated {
    // @@protoc_insertion_point(message:proto_validate.test.Repeated.Inner)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Inner {
        // special fields
        // @@protoc_insertion_point(special_field:proto_validate.test.Repeated.Inner.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Inner {
        fn default() -> &'a Inner {
            <Inner as ::protobuf::Message>::default_instance()
        }
    }

    impl Inner {
        pub fn new() -> Inner {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(0);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Inner>(
                "Repeated.Inner",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Inner {
        const NAME: &'static str = "Inner";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Inner {
            Inner::new()
        }

        fn clear(&mut self) {
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Inner {
            static instance: Inner = Inner {
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Inner {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Repeated.Inner").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Inner {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Inner {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:proto_validate.test.Message)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Message {
    // message fields
    // @@protoc_insertion_point(field:proto_validate.test.Message.inner)
    pub inner: ::protobuf::MessageField<message::Inner>,
    // special fields
    // @@protoc_insertion_point(special_field:proto_validate.test.Message.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Message {
    fn default() -> &'a Message {
        <Message as ::protobuf::Message>::default_instance()
    }
}

impl Message {
    pub fn new() -> Message {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, message::Inner>(
            "inner",
            |m: &Message| { &m.inner },
            |m: &mut Message| { &mut m.inner },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Message>(
            "Message",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Message {
    const NAME: &'static str = "Message";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.inner)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.inner.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.inner.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Message {
        Message::new()
    }

    fn clear(&mut self) {
        self.inner.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Message {
        static instance: Message = Message {
            inner: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Message {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Message").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Message {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Message {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Message`
pub mod message {
    // @@protoc_insertion_point(message:proto_validate.test.Message.Inner)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Inner {
        // special fields
        // @@protoc_insertion_point(special_field:proto_validate.test.Message.Inner.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Inner {
        fn default() -> &'a Inner {
            <Inner as ::protobuf::Message>::default_instance()
        }
    }

    impl Inner {
        pub fn new() -> Inner {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(0);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Inner>(
                "Message.Inner",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Inner {
        const NAME: &'static str = "Inner";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Inner {
            Inner::new()
        }

        fn clear(&mut self) {
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Inner {
            static instance: Inner = Inner {
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Inner {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Message.Inner").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Inner {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Inner {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:proto_validate.test.OneOf)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct OneOf {
    // message oneof groups
    pub test: ::std::option::Option<one_of::Test>,
    // special fields
    // @@protoc_insertion_point(special_field:proto_validate.test.OneOf.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OneOf {
    fn default() -> &'a OneOf {
        <OneOf as ::protobuf::Message>::default_instance()
    }
}

impl OneOf {
    pub fn new() -> OneOf {
        ::std::default::Default::default()
    }

    // bool field1 = 1;

    pub fn field1(&self) -> bool {
        match self.test {
            ::std::option::Option::Some(one_of::Test::Field1(v)) => v,
            _ => false,
        }
    }

    pub fn clear_field1(&mut self) {
        self.test = ::std::option::Option::None;
    }

    pub fn has_field1(&self) -> bool {
        match self.test {
            ::std::option::Option::Some(one_of::Test::Field1(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_field1(&mut self, v: bool) {
        self.test = ::std::option::Option::Some(one_of::Test::Field1(v))
    }

    // string field2 = 2;

    pub fn field2(&self) -> &str {
        match self.test {
            ::std::option::Option::Some(one_of::Test::Field2(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_field2(&mut self) {
        self.test = ::std::option::Option::None;
    }

    pub fn has_field2(&self) -> bool {
        match self.test {
            ::std::option::Option::Some(one_of::Test::Field2(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_field2(&mut self, v: ::std::string::String) {
        self.test = ::std::option::Option::Some(one_of::Test::Field2(v))
    }

    // Mutable pointer to the field.
    pub fn mut_field2(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(one_of::Test::Field2(_)) = self.test {
        } else {
            self.test = ::std::option::Option::Some(one_of::Test::Field2(::std::string::String::new()));
        }
        match self.test {
            ::std::option::Option::Some(one_of::Test::Field2(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_field2(&mut self) -> ::std::string::String {
        if self.has_field2() {
            match self.test.take() {
                ::std::option::Option::Some(one_of::Test::Field2(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "field1",
            OneOf::has_field1,
            OneOf::field1,
            OneOf::set_field1,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "field2",
            OneOf::has_field2,
            OneOf::field2,
            OneOf::set_field2,
        ));
        oneofs.push(one_of::Test::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OneOf>(
            "OneOf",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OneOf {
    const NAME: &'static str = "OneOf";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.test = ::std::option::Option::Some(one_of::Test::Field1(is.read_bool()?));
                },
                18 => {
                    self.test = ::std::option::Option::Some(one_of::Test::Field2(is.read_string()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.test {
            match v {
                &one_of::Test::Field1(v) => {
                    my_size += 1 + 1;
                },
                &one_of::Test::Field2(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.test {
            match v {
                &one_of::Test::Field1(v) => {
                    os.write_bool(1, v)?;
                },
                &one_of::Test::Field2(ref v) => {
                    os.write_string(2, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OneOf {
        OneOf::new()
    }

    fn clear(&mut self) {
        self.test = ::std::option::Option::None;
        self.test = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OneOf {
        static instance: OneOf = OneOf {
            test: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OneOf {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OneOf").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OneOf {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OneOf {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `OneOf`
pub mod one_of {

    #[derive(Clone,PartialEq,Debug)]
    // @@protoc_insertion_point(oneof:proto_validate.test.OneOf.test)
    pub enum Test {
        // @@protoc_insertion_point(oneof_field:proto_validate.test.OneOf.field1)
        Field1(bool),
        // @@protoc_insertion_point(oneof_field:proto_validate.test.OneOf.field2)
        Field2(::std::string::String),
    }

    impl ::protobuf::Oneof for Test {
    }

    impl ::protobuf::OneofFull for Test {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::OneOf as ::protobuf::MessageFull>::descriptor().oneof_by_name("test").unwrap()).clone()
        }
    }

    impl Test {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Test>("test")
        }
    }
}

// @@protoc_insertion_point(message:proto_validate.test.NotImplemented)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct NotImplemented {
    // message fields
    // @@protoc_insertion_point(field:proto_validate.test.NotImplemented.field)
    pub field: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:proto_validate.test.NotImplemented.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NotImplemented {
    fn default() -> &'a NotImplemented {
        <NotImplemented as ::protobuf::Message>::default_instance()
    }
}

impl NotImplemented {
    pub fn new() -> NotImplemented {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "field",
            |m: &NotImplemented| { &m.field },
            |m: &mut NotImplemented| { &mut m.field },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NotImplemented>(
            "NotImplemented",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NotImplemented {
    const NAME: &'static str = "NotImplemented";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.field = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.field.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.field);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.field.is_empty() {
            os.write_string(1, &self.field)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NotImplemented {
        NotImplemented::new()
    }

    fn clear(&mut self) {
        self.field.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NotImplemented {
        static instance: NotImplemented = NotImplemented {
            field: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for NotImplemented {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NotImplemented").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NotImplemented {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NotImplemented {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:proto_validate.test.EnumOld)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EnumOld {
    // message fields
    // @@protoc_insertion_point(field:proto_validate.test.EnumOld.field)
    pub field: ::protobuf::EnumOrUnknown<enum_old::Enum>,
    // special fields
    // @@protoc_insertion_point(special_field:proto_validate.test.EnumOld.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EnumOld {
    fn default() -> &'a EnumOld {
        <EnumOld as ::protobuf::Message>::default_instance()
    }
}

impl EnumOld {
    pub fn new() -> EnumOld {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "field",
            |m: &EnumOld| { &m.field },
            |m: &mut EnumOld| { &mut m.field },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EnumOld>(
            "EnumOld",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EnumOld {
    const NAME: &'static str = "EnumOld";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.field = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.field != ::protobuf::EnumOrUnknown::new(enum_old::Enum::FOO) {
            my_size += ::protobuf::rt::int32_size(1, self.field.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.field != ::protobuf::EnumOrUnknown::new(enum_old::Enum::FOO) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.field))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EnumOld {
        EnumOld::new()
    }

    fn clear(&mut self) {
        self.field = ::protobuf::EnumOrUnknown::new(enum_old::Enum::FOO);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EnumOld {
        static instance: EnumOld = EnumOld {
            field: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EnumOld {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EnumOld").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EnumOld {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EnumOld {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `EnumOld`
pub mod enum_old {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:proto_validate.test.EnumOld.Enum)
    pub enum Enum {
        // @@protoc_insertion_point(enum_value:proto_validate.test.EnumOld.Enum.FOO)
        FOO = 0,
    }

    impl ::protobuf::Enum for Enum {
        const NAME: &'static str = "Enum";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Enum> {
            match value {
                0 => ::std::option::Option::Some(Enum::FOO),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Enum> {
            match str {
                "FOO" => ::std::option::Option::Some(Enum::FOO),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Enum] = &[
            Enum::FOO,
        ];
    }

    impl ::protobuf::EnumFull for Enum {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("EnumOld.Enum").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Enum {
        fn default() -> Self {
            Enum::FOO
        }
    }

    impl Enum {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Enum>("EnumOld.Enum")
        }
    }
}

// @@protoc_insertion_point(message:proto_validate.test.EnumNew)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EnumNew {
    // message fields
    // @@protoc_insertion_point(field:proto_validate.test.EnumNew.field)
    pub field: ::protobuf::EnumOrUnknown<enum_new::Enum>,
    // special fields
    // @@protoc_insertion_point(special_field:proto_validate.test.EnumNew.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EnumNew {
    fn default() -> &'a EnumNew {
        <EnumNew as ::protobuf::Message>::default_instance()
    }
}

impl EnumNew {
    pub fn new() -> EnumNew {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "field",
            |m: &EnumNew| { &m.field },
            |m: &mut EnumNew| { &mut m.field },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EnumNew>(
            "EnumNew",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EnumNew {
    const NAME: &'static str = "EnumNew";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.field = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.field != ::protobuf::EnumOrUnknown::new(enum_new::Enum::FOO) {
            my_size += ::protobuf::rt::int32_size(1, self.field.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.field != ::protobuf::EnumOrUnknown::new(enum_new::Enum::FOO) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.field))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EnumNew {
        EnumNew::new()
    }

    fn clear(&mut self) {
        self.field = ::protobuf::EnumOrUnknown::new(enum_new::Enum::FOO);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EnumNew {
        static instance: EnumNew = EnumNew {
            field: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EnumNew {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EnumNew").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EnumNew {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EnumNew {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `EnumNew`
pub mod enum_new {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:proto_validate.test.EnumNew.Enum)
    pub enum Enum {
        // @@protoc_insertion_point(enum_value:proto_validate.test.EnumNew.Enum.FOO)
        FOO = 0,
        // @@protoc_insertion_point(enum_value:proto_validate.test.EnumNew.Enum.BAR)
        BAR = 1,
    }

    impl ::protobuf::Enum for Enum {
        const NAME: &'static str = "Enum";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Enum> {
            match value {
                0 => ::std::option::Option::Some(Enum::FOO),
                1 => ::std::option::Option::Some(Enum::BAR),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Enum> {
            match str {
                "FOO" => ::std::option::Option::Some(Enum::FOO),
                "BAR" => ::std::option::Option::Some(Enum::BAR),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Enum] = &[
            Enum::FOO,
            Enum::BAR,
        ];
    }

    impl ::protobuf::EnumFull for Enum {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("EnumNew.Enum").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Enum {
        fn default() -> Self {
            Enum::FOO
        }
    }

    impl Enum {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Enum>("EnumNew.Enum")
        }
    }
}

// @@protoc_insertion_point(message:proto_validate.test.Uint32)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Uint32 {
    // message fields
    // @@protoc_insertion_point(field:proto_validate.test.Uint32.field)
    pub field: u32,
    // special fields
    // @@protoc_insertion_point(special_field:proto_validate.test.Uint32.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Uint32 {
    fn default() -> &'a Uint32 {
        <Uint32 as ::protobuf::Message>::default_instance()
    }
}

impl Uint32 {
    pub fn new() -> Uint32 {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "field",
            |m: &Uint32| { &m.field },
            |m: &mut Uint32| { &mut m.field },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Uint32>(
            "Uint32",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Uint32 {
    const NAME: &'static str = "Uint32";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.field = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.field != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.field);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.field != 0 {
            os.write_uint32(1, self.field)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Uint32 {
        Uint32::new()
    }

    fn clear(&mut self) {
        self.field = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Uint32 {
        static instance: Uint32 = Uint32 {
            field: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Uint32 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Uint32").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Uint32 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Uint32 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:proto_validate.test.Uint64)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Uint64 {
    // message fields
    // @@protoc_insertion_point(field:proto_validate.test.Uint64.field)
    pub field: u64,
    // special fields
    // @@protoc_insertion_point(special_field:proto_validate.test.Uint64.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Uint64 {
    fn default() -> &'a Uint64 {
        <Uint64 as ::protobuf::Message>::default_instance()
    }
}

impl Uint64 {
    pub fn new() -> Uint64 {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "field",
            |m: &Uint64| { &m.field },
            |m: &mut Uint64| { &mut m.field },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Uint64>(
            "Uint64",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Uint64 {
    const NAME: &'static str = "Uint64";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.field = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.field != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.field);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.field != 0 {
            os.write_uint64(1, self.field)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Uint64 {
        Uint64::new()
    }

    fn clear(&mut self) {
        self.field = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Uint64 {
        static instance: Uint64 = Uint64 {
            field: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Uint64 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Uint64").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Uint64 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Uint64 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:proto_validate.test.Int32)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Int32 {
    // message fields
    // @@protoc_insertion_point(field:proto_validate.test.Int32.field)
    pub field: i32,
    // special fields
    // @@protoc_insertion_point(special_field:proto_validate.test.Int32.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Int32 {
    fn default() -> &'a Int32 {
        <Int32 as ::protobuf::Message>::default_instance()
    }
}

impl Int32 {
    pub fn new() -> Int32 {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "field",
            |m: &Int32| { &m.field },
            |m: &mut Int32| { &mut m.field },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Int32>(
            "Int32",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Int32 {
    const NAME: &'static str = "Int32";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.field = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.field != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.field);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.field != 0 {
            os.write_int32(1, self.field)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Int32 {
        Int32::new()
    }

    fn clear(&mut self) {
        self.field = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Int32 {
        static instance: Int32 = Int32 {
            field: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Int32 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Int32").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Int32 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Int32 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:proto_validate.test.Int64)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Int64 {
    // message fields
    // @@protoc_insertion_point(field:proto_validate.test.Int64.field)
    pub field: i64,
    // special fields
    // @@protoc_insertion_point(special_field:proto_validate.test.Int64.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Int64 {
    fn default() -> &'a Int64 {
        <Int64 as ::protobuf::Message>::default_instance()
    }
}

impl Int64 {
    pub fn new() -> Int64 {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "field",
            |m: &Int64| { &m.field },
            |m: &mut Int64| { &mut m.field },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Int64>(
            "Int64",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Int64 {
    const NAME: &'static str = "Int64";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.field = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.field != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.field);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.field != 0 {
            os.write_int64(1, self.field)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Int64 {
        Int64::new()
    }

    fn clear(&mut self) {
        self.field = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Int64 {
        static instance: Int64 = Int64 {
            field: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Int64 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Int64").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Int64 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Int64 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13test_validate.proto\x12\x13proto_validate.test\x1a\x1egoogle/proto\
    buf/duration.proto\x1a\x17validate/validate.proto\"E\n\x08Duration\x129\
    \n\x05field\x18\x01\x20\x01(\x0b2\x19.google.protobuf.DurationR\x05field\
    B\x08\xfaB\x05\xaa\x01\x02*\0\"P\n\x04Bool\x12\x1d\n\x05field\x18\x01\
    \x20\x01(\x08R\x05fieldB\x07\xfaB\x04j\x02\x08\x01\x12!\n\x06field2\x18\
    \x02\x20\x01(\x08H\0R\x06field2B\x07\xfaB\x04j\x02\x08\x01B\x06\n\x04tes\
    t\"H\n\x06String\x12\x1d\n\x05field\x18\x01\x20\x01(\tR\x05fieldB\x07\
    \xfaB\x04r\x02\x10\x01\x12\x1f\n\x06field2\x18\x02\x20\x01(\tR\x06field2\
    B\x07\xfaB\x04r\x02\x18\x02\"\x82\x01\n\x08Repeated\x12\"\n\x07strings\
    \x18\x01\x20\x03(\tR\x07stringsB\x08\xfaB\x05\x92\x01\x02\x08\x01\x12I\n\
    \x08messages\x18\x02\x20\x03(\x0b2#.proto_validate.test.Repeated.InnerR\
    \x08messagesB\x08\xfaB\x05\x92\x01\x02\x08\x01\x1a\x07\n\x05Inner\"V\n\
    \x07Message\x12B\n\x05inner\x18\x01\x20\x01(\x0b2\".proto_validate.test.\
    Message.InnerR\x05innerB\x08\xfaB\x05\x8a\x01\x02\x10\x01\x1a\x07\n\x05I\
    nner\"Z\n\x05OneOf\x12!\n\x06field1\x18\x01\x20\x01(\x08H\0R\x06field1B\
    \x07\xfaB\x04j\x02\x08\x01\x12!\n\x06field2\x18\x02\x20\x01(\tH\0R\x06fi\
    eld2B\x07\xfaB\x04r\x02\x10\x01B\x0b\n\x04test\x12\x03\xf8B\x01\"/\n\x0e\
    NotImplemented\x12\x1d\n\x05field\x18\x01\x20\x01(\tR\x05fieldB\x07\xfaB\
    \x04r\x02(\n\"]\n\x07EnumOld\x12A\n\x05field\x18\x01\x20\x01(\x0e2!.prot\
    o_validate.test.EnumOld.EnumR\x05fieldB\x08\xfaB\x05\x82\x01\x02\x10\x01\
    \"\x0f\n\x04Enum\x12\x07\n\x03FOO\x10\0\"\\\n\x07EnumNew\x127\n\x05field\
    \x18\x01\x20\x01(\x0e2!.proto_validate.test.EnumNew.EnumR\x05field\"\x18\
    \n\x04Enum\x12\x07\n\x03FOO\x10\0\x12\x07\n\x03BAR\x10\x01\"'\n\x06Uint3\
    2\x12\x1d\n\x05field\x18\x01\x20\x01(\rR\x05fieldB\x07\xfaB\x04*\x02\x20\
    \0\"'\n\x06Uint64\x12\x1d\n\x05field\x18\x01\x20\x01(\x04R\x05fieldB\x07\
    \xfaB\x042\x02\x20\0\"&\n\x05Int32\x12\x1d\n\x05field\x18\x01\x20\x01(\
    \x05R\x05fieldB\x07\xfaB\x04\x1a\x02\x20\0\"&\n\x05Int64\x12\x1d\n\x05fi\
    eld\x18\x01\x20\x01(\x03R\x05fieldB\x07\xfaB\x04\"\x02\x20\0b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(::protobuf::well_known_types::duration::file_descriptor().clone());
            deps.push(super::validate::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(15);
            messages.push(Duration::generated_message_descriptor_data());
            messages.push(Bool::generated_message_descriptor_data());
            messages.push(String::generated_message_descriptor_data());
            messages.push(Repeated::generated_message_descriptor_data());
            messages.push(Message::generated_message_descriptor_data());
            messages.push(OneOf::generated_message_descriptor_data());
            messages.push(NotImplemented::generated_message_descriptor_data());
            messages.push(EnumOld::generated_message_descriptor_data());
            messages.push(EnumNew::generated_message_descriptor_data());
            messages.push(Uint32::generated_message_descriptor_data());
            messages.push(Uint64::generated_message_descriptor_data());
            messages.push(Int32::generated_message_descriptor_data());
            messages.push(Int64::generated_message_descriptor_data());
            messages.push(repeated::Inner::generated_message_descriptor_data());
            messages.push(message::Inner::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(enum_old::Enum::generated_enum_descriptor_data());
            enums.push(enum_new::Enum::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
