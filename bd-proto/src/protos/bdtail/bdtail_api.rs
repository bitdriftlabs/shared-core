// proto - bitdrift's client/server API definitions
// Copyright Bitdrift, Inc. All rights reserved.
//
// Use of this source code and APIs are governed by a source available license that can be found in
// the LICENSE file or at:
// https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt

// This file is generated by rust-protobuf 4.0.0-alpha.0. Do not edit
// .proto file is parsed by protoc 28.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `bitdrift_public/protobuf/bdtail/v1/bdtail_api.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_4_0_0_ALPHA_0;

// @@protoc_insertion_point(message:bitdrift_public.protobuf.bdtail.v1.TailLogsRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TailLogsRequest {
    // message fields
    // @@protoc_insertion_point(field:bitdrift_public.protobuf.bdtail.v1.TailLogsRequest.dsl_expression)
    pub dsl_expression: ::protobuf::Chars,
    // special fields
    // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.bdtail.v1.TailLogsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TailLogsRequest {
    fn default() -> &'a TailLogsRequest {
        <TailLogsRequest as ::protobuf::Message>::default_instance()
    }
}

impl TailLogsRequest {
    pub fn new() -> TailLogsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "dsl_expression",
            |m: &TailLogsRequest| { &m.dsl_expression },
            |m: &mut TailLogsRequest| { &mut m.dsl_expression },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TailLogsRequest>(
            "TailLogsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TailLogsRequest {
    const NAME: &'static str = "TailLogsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.dsl_expression = is.read_tokio_chars()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.dsl_expression.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.dsl_expression);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.dsl_expression.is_empty() {
            os.write_string(1, &self.dsl_expression)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TailLogsRequest {
        TailLogsRequest::new()
    }

    fn clear(&mut self) {
        self.dsl_expression.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TailLogsRequest {
        static instance: TailLogsRequest = TailLogsRequest {
            dsl_expression: ::protobuf::Chars::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TailLogsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TailLogsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TailLogsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TailLogsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:bitdrift_public.protobuf.bdtail.v1.Logs)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Logs {
    // message fields
    // @@protoc_insertion_point(field:bitdrift_public.protobuf.bdtail.v1.Logs.logs)
    pub logs: ::std::vec::Vec<::bytes::Bytes>,
    // special fields
    // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.bdtail.v1.Logs.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Logs {
    fn default() -> &'a Logs {
        <Logs as ::protobuf::Message>::default_instance()
    }
}

impl Logs {
    pub fn new() -> Logs {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "logs",
            |m: &Logs| { &m.logs },
            |m: &mut Logs| { &mut m.logs },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Logs>(
            "Logs",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Logs {
    const NAME: &'static str = "Logs";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.logs.push(is.read_tokio_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.logs {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.logs {
            os.write_bytes(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Logs {
        Logs::new()
    }

    fn clear(&mut self) {
        self.logs.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Logs {
        static instance: Logs = Logs {
            logs: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Logs {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Logs").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Logs {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Logs {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:bitdrift_public.protobuf.bdtail.v1.InvalidRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct InvalidRequest {
    // message fields
    // @@protoc_insertion_point(field:bitdrift_public.protobuf.bdtail.v1.InvalidRequest.error_message)
    pub error_message: ::protobuf::Chars,
    // special fields
    // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.bdtail.v1.InvalidRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a InvalidRequest {
    fn default() -> &'a InvalidRequest {
        <InvalidRequest as ::protobuf::Message>::default_instance()
    }
}

impl InvalidRequest {
    pub fn new() -> InvalidRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "error_message",
            |m: &InvalidRequest| { &m.error_message },
            |m: &mut InvalidRequest| { &mut m.error_message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<InvalidRequest>(
            "InvalidRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for InvalidRequest {
    const NAME: &'static str = "InvalidRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.error_message = is.read_tokio_chars()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.error_message.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.error_message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.error_message.is_empty() {
            os.write_string(1, &self.error_message)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> InvalidRequest {
        InvalidRequest::new()
    }

    fn clear(&mut self) {
        self.error_message.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static InvalidRequest {
        static instance: InvalidRequest = InvalidRequest {
            error_message: ::protobuf::Chars::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for InvalidRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("InvalidRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for InvalidRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InvalidRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:bitdrift_public.protobuf.bdtail.v1.TailLogsResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TailLogsResponse {
    // message oneof groups
    pub response: ::std::option::Option<tail_logs_response::Response>,
    // special fields
    // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.bdtail.v1.TailLogsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TailLogsResponse {
    fn default() -> &'a TailLogsResponse {
        <TailLogsResponse as ::protobuf::Message>::default_instance()
    }
}

impl TailLogsResponse {
    pub fn new() -> TailLogsResponse {
        ::std::default::Default::default()
    }

    // .bitdrift_public.protobuf.bdtail.v1.Logs logs = 1;

    pub fn logs(&self) -> &Logs {
        match self.response {
            ::std::option::Option::Some(tail_logs_response::Response::Logs(ref v)) => v,
            _ => <Logs as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_logs(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_logs(&self) -> bool {
        match self.response {
            ::std::option::Option::Some(tail_logs_response::Response::Logs(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_logs(&mut self, v: Logs) {
        self.response = ::std::option::Option::Some(tail_logs_response::Response::Logs(v))
    }

    // Mutable pointer to the field.
    pub fn mut_logs(&mut self) -> &mut Logs {
        if let ::std::option::Option::Some(tail_logs_response::Response::Logs(_)) = self.response {
        } else {
            self.response = ::std::option::Option::Some(tail_logs_response::Response::Logs(Logs::new()));
        }
        match self.response {
            ::std::option::Option::Some(tail_logs_response::Response::Logs(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_logs(&mut self) -> Logs {
        if self.has_logs() {
            match self.response.take() {
                ::std::option::Option::Some(tail_logs_response::Response::Logs(v)) => v,
                _ => panic!(),
            }
        } else {
            Logs::new()
        }
    }

    // .bitdrift_public.protobuf.bdtail.v1.InvalidRequest invalid_request = 2;

    pub fn invalid_request(&self) -> &InvalidRequest {
        match self.response {
            ::std::option::Option::Some(tail_logs_response::Response::InvalidRequest(ref v)) => v,
            _ => <InvalidRequest as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_invalid_request(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_invalid_request(&self) -> bool {
        match self.response {
            ::std::option::Option::Some(tail_logs_response::Response::InvalidRequest(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_invalid_request(&mut self, v: InvalidRequest) {
        self.response = ::std::option::Option::Some(tail_logs_response::Response::InvalidRequest(v))
    }

    // Mutable pointer to the field.
    pub fn mut_invalid_request(&mut self) -> &mut InvalidRequest {
        if let ::std::option::Option::Some(tail_logs_response::Response::InvalidRequest(_)) = self.response {
        } else {
            self.response = ::std::option::Option::Some(tail_logs_response::Response::InvalidRequest(InvalidRequest::new()));
        }
        match self.response {
            ::std::option::Option::Some(tail_logs_response::Response::InvalidRequest(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_invalid_request(&mut self) -> InvalidRequest {
        if self.has_invalid_request() {
            match self.response.take() {
                ::std::option::Option::Some(tail_logs_response::Response::InvalidRequest(v)) => v,
                _ => panic!(),
            }
        } else {
            InvalidRequest::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Logs>(
            "logs",
            TailLogsResponse::has_logs,
            TailLogsResponse::logs,
            TailLogsResponse::mut_logs,
            TailLogsResponse::set_logs,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, InvalidRequest>(
            "invalid_request",
            TailLogsResponse::has_invalid_request,
            TailLogsResponse::invalid_request,
            TailLogsResponse::mut_invalid_request,
            TailLogsResponse::set_invalid_request,
        ));
        oneofs.push(tail_logs_response::Response::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TailLogsResponse>(
            "TailLogsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TailLogsResponse {
    const NAME: &'static str = "TailLogsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.response = ::std::option::Option::Some(tail_logs_response::Response::Logs(is.read_message()?));
                },
                18 => {
                    self.response = ::std::option::Option::Some(tail_logs_response::Response::InvalidRequest(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.response {
            match v {
                &tail_logs_response::Response::Logs(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &tail_logs_response::Response::InvalidRequest(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.response {
            match v {
                &tail_logs_response::Response::Logs(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &tail_logs_response::Response::InvalidRequest(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TailLogsResponse {
        TailLogsResponse::new()
    }

    fn clear(&mut self) {
        self.response = ::std::option::Option::None;
        self.response = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TailLogsResponse {
        static instance: TailLogsResponse = TailLogsResponse {
            response: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TailLogsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TailLogsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TailLogsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TailLogsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `TailLogsResponse`
pub mod tail_logs_response {

    #[derive(Clone,PartialEq,Debug)]
    // @@protoc_insertion_point(oneof:bitdrift_public.protobuf.bdtail.v1.TailLogsResponse.response)
    pub enum Response {
        // @@protoc_insertion_point(oneof_field:bitdrift_public.protobuf.bdtail.v1.TailLogsResponse.logs)
        Logs(super::Logs),
        // @@protoc_insertion_point(oneof_field:bitdrift_public.protobuf.bdtail.v1.TailLogsResponse.invalid_request)
        InvalidRequest(super::InvalidRequest),
    }

    impl ::protobuf::Oneof for Response {
    }

    impl ::protobuf::OneofFull for Response {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::TailLogsResponse as ::protobuf::MessageFull>::descriptor().oneof_by_name("response").unwrap()).clone()
        }
    }

    impl Response {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Response>("response")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n3bitdrift_public/protobuf/bdtail/v1/bdtail_api.proto\x12\"bitdrift_pub\
    lic.protobuf.bdtail.v1\x1a\x17validate/validate.proto\"8\n\x0fTailLogsRe\
    quest\x12%\n\x0edsl_expression\x18\x01\x20\x01(\tR\rdslExpression\"$\n\
    \x04Logs\x12\x1c\n\x04logs\x18\x01\x20\x03(\x0cR\x04logsB\x08\xfaB\x05\
    \x92\x01\x02\x08\x01\">\n\x0eInvalidRequest\x12,\n\rerror_message\x18\
    \x01\x20\x01(\tR\x0cerrorMessageB\x07\xfaB\x04r\x02\x10\x01\"\xbd\x01\n\
    \x10TailLogsResponse\x12>\n\x04logs\x18\x01\x20\x01(\x0b2(.bitdrift_publ\
    ic.protobuf.bdtail.v1.LogsH\0R\x04logs\x12]\n\x0finvalid_request\x18\x02\
    \x20\x01(\x0b22.bitdrift_public.protobuf.bdtail.v1.InvalidRequestH\0R\
    \x0einvalidRequestB\n\n\x08response2\x81\x01\n\x06BDTail\x12w\n\x08TailL\
    ogs\x123.bitdrift_public.protobuf.bdtail.v1.TailLogsRequest\x1a4.bitdrif\
    t_public.protobuf.bdtail.v1.TailLogsResponse0\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::validate::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(TailLogsRequest::generated_message_descriptor_data());
            messages.push(Logs::generated_message_descriptor_data());
            messages.push(InvalidRequest::generated_message_descriptor_data());
            messages.push(TailLogsResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
