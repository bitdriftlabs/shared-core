// proto - bitdrift's client/server API definitions
// Copyright Bitdrift, Inc. All rights reserved.
//
// Use of this source code and APIs are governed by a source available license that can be found in
// the LICENSE file or at:
// https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt

// This file is generated by rust-protobuf 4.0.0-alpha.0. Do not edit
// .proto file is parsed by protoc 28.2
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `bitdrift_public/protobuf/bdtail/v1/bdtail_config.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_4_0_0_ALPHA_0;

// @@protoc_insertion_point(message:bitdrift_public.protobuf.bdtail.v1.BdTailStream)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BdTailStream {
    // message fields
    // @@protoc_insertion_point(field:bitdrift_public.protobuf.bdtail.v1.BdTailStream.stream_id)
    pub stream_id: ::protobuf::Chars,
    // @@protoc_insertion_point(field:bitdrift_public.protobuf.bdtail.v1.BdTailStream.matcher)
    pub matcher: ::protobuf::MessageField<super::log_matcher::LogMatcher>,
    // special fields
    // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.bdtail.v1.BdTailStream.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BdTailStream {
    fn default() -> &'a BdTailStream {
        <BdTailStream as ::protobuf::Message>::default_instance()
    }
}

impl BdTailStream {
    pub fn new() -> BdTailStream {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "stream_id",
            |m: &BdTailStream| { &m.stream_id },
            |m: &mut BdTailStream| { &mut m.stream_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::log_matcher::LogMatcher>(
            "matcher",
            |m: &BdTailStream| { &m.matcher },
            |m: &mut BdTailStream| { &mut m.matcher },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BdTailStream>(
            "BdTailStream",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BdTailStream {
    const NAME: &'static str = "BdTailStream";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.stream_id = is.read_tokio_chars()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.matcher)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.stream_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.stream_id);
        }
        if let Some(v) = self.matcher.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.stream_id.is_empty() {
            os.write_string(1, &self.stream_id)?;
        }
        if let Some(v) = self.matcher.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BdTailStream {
        BdTailStream::new()
    }

    fn clear(&mut self) {
        self.stream_id.clear();
        self.matcher.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BdTailStream {
        static instance: BdTailStream = BdTailStream {
            stream_id: ::protobuf::Chars::new(),
            matcher: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BdTailStream {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BdTailStream").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BdTailStream {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BdTailStream {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:bitdrift_public.protobuf.bdtail.v1.BdTailConfigurations)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BdTailConfigurations {
    // message fields
    // @@protoc_insertion_point(field:bitdrift_public.protobuf.bdtail.v1.BdTailConfigurations.active_streams)
    pub active_streams: ::std::vec::Vec<BdTailStream>,
    // special fields
    // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.bdtail.v1.BdTailConfigurations.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BdTailConfigurations {
    fn default() -> &'a BdTailConfigurations {
        <BdTailConfigurations as ::protobuf::Message>::default_instance()
    }
}

impl BdTailConfigurations {
    pub fn new() -> BdTailConfigurations {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "active_streams",
            |m: &BdTailConfigurations| { &m.active_streams },
            |m: &mut BdTailConfigurations| { &mut m.active_streams },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BdTailConfigurations>(
            "BdTailConfigurations",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BdTailConfigurations {
    const NAME: &'static str = "BdTailConfigurations";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.active_streams.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.active_streams {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.active_streams {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BdTailConfigurations {
        BdTailConfigurations::new()
    }

    fn clear(&mut self) {
        self.active_streams.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BdTailConfigurations {
        static instance: BdTailConfigurations = BdTailConfigurations {
            active_streams: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BdTailConfigurations {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BdTailConfigurations").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BdTailConfigurations {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BdTailConfigurations {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n6bitdrift_public/protobuf/bdtail/v1/bdtail_config.proto\x12\"bitdrift_\
    public.protobuf.bdtail.v1\x1a\x17validate/validate.proto\x1a5bitdrift_pu\
    blic/protobuf/matcher/v1/log_matcher.proto\"\x7f\n\x0cBdTailStream\x12$\
    \n\tstream_id\x18\x01\x20\x01(\tR\x08streamIdB\x07\xfaB\x04r\x02\x10\x01\
    \x12I\n\x07matcher\x18\x02\x20\x01(\x0b2/.bitdrift_public.protobuf.match\
    er.v1.LogMatcherR\x07matcher\"o\n\x14BdTailConfigurations\x12W\n\x0eacti\
    ve_streams\x18\x01\x20\x03(\x0b20.bitdrift_public.protobuf.bdtail.v1.BdT\
    ailStreamR\ractiveStreamsb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::validate::file_descriptor().clone());
            deps.push(super::log_matcher::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(BdTailStream::generated_message_descriptor_data());
            messages.push(BdTailConfigurations::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
