// proto - bitdrift's client/server API definitions
// Copyright Bitdrift, Inc. All rights reserved.
//
// Use of this source code and APIs are governed by a source available license that can be found in
// the LICENSE file or at:
// https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt

// This file is generated by rust-protobuf 4.0.0-alpha.0. Do not edit
// .proto file is parsed by protoc 29.2
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `bitdrift_public/protobuf/logging/v1/payload.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_4_0_0_ALPHA_0;

// @@protoc_insertion_point(message:bitdrift_public.protobuf.logging.v1.BinaryData)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BinaryData {
    // message fields
    // @@protoc_insertion_point(field:bitdrift_public.protobuf.logging.v1.BinaryData.type)
    pub type_: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:bitdrift_public.protobuf.logging.v1.BinaryData.payload)
    pub payload: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.logging.v1.BinaryData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BinaryData {
    fn default() -> &'a BinaryData {
        <BinaryData as ::protobuf::Message>::default_instance()
    }
}

impl BinaryData {
    pub fn new() -> BinaryData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &BinaryData| { &m.type_ },
            |m: &mut BinaryData| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "payload",
            |m: &BinaryData| { &m.payload },
            |m: &mut BinaryData| { &mut m.payload },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BinaryData>(
            "BinaryData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BinaryData {
    const NAME: &'static str = "BinaryData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.type_ = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.payload = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.payload);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.type_.as_ref() {
            os.write_string(1, v)?;
        }
        if !self.payload.is_empty() {
            os.write_bytes(2, &self.payload)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BinaryData {
        BinaryData::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.payload.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BinaryData {
        static instance: BinaryData = BinaryData {
            type_: ::std::option::Option::None,
            payload: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BinaryData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BinaryData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BinaryData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BinaryData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:bitdrift_public.protobuf.logging.v1.Data)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Data {
    // message oneof groups
    pub data_type: ::std::option::Option<data::Data_type>,
    // special fields
    // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.logging.v1.Data.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Data {
    fn default() -> &'a Data {
        <Data as ::protobuf::Message>::default_instance()
    }
}

impl Data {
    pub fn new() -> Data {
        ::std::default::Default::default()
    }

    // string string_data = 1;

    pub fn string_data(&self) -> &str {
        match self.data_type {
            ::std::option::Option::Some(data::Data_type::StringData(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_string_data(&mut self) {
        self.data_type = ::std::option::Option::None;
    }

    pub fn has_string_data(&self) -> bool {
        match self.data_type {
            ::std::option::Option::Some(data::Data_type::StringData(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_string_data(&mut self, v: ::std::string::String) {
        self.data_type = ::std::option::Option::Some(data::Data_type::StringData(v))
    }

    // Mutable pointer to the field.
    pub fn mut_string_data(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(data::Data_type::StringData(_)) = self.data_type {
        } else {
            self.data_type = ::std::option::Option::Some(data::Data_type::StringData(::std::string::String::new()));
        }
        match self.data_type {
            ::std::option::Option::Some(data::Data_type::StringData(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_string_data(&mut self) -> ::std::string::String {
        if self.has_string_data() {
            match self.data_type.take() {
                ::std::option::Option::Some(data::Data_type::StringData(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // .bitdrift_public.protobuf.logging.v1.BinaryData binary_data = 2;

    pub fn binary_data(&self) -> &BinaryData {
        match self.data_type {
            ::std::option::Option::Some(data::Data_type::BinaryData(ref v)) => v,
            _ => <BinaryData as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_binary_data(&mut self) {
        self.data_type = ::std::option::Option::None;
    }

    pub fn has_binary_data(&self) -> bool {
        match self.data_type {
            ::std::option::Option::Some(data::Data_type::BinaryData(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_binary_data(&mut self, v: BinaryData) {
        self.data_type = ::std::option::Option::Some(data::Data_type::BinaryData(v))
    }

    // Mutable pointer to the field.
    pub fn mut_binary_data(&mut self) -> &mut BinaryData {
        if let ::std::option::Option::Some(data::Data_type::BinaryData(_)) = self.data_type {
        } else {
            self.data_type = ::std::option::Option::Some(data::Data_type::BinaryData(BinaryData::new()));
        }
        match self.data_type {
            ::std::option::Option::Some(data::Data_type::BinaryData(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_binary_data(&mut self) -> BinaryData {
        if self.has_binary_data() {
            match self.data_type.take() {
                ::std::option::Option::Some(data::Data_type::BinaryData(v)) => v,
                _ => panic!(),
            }
        } else {
            BinaryData::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "string_data",
            Data::has_string_data,
            Data::string_data,
            Data::set_string_data,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, BinaryData>(
            "binary_data",
            Data::has_binary_data,
            Data::binary_data,
            Data::mut_binary_data,
            Data::set_binary_data,
        ));
        oneofs.push(data::Data_type::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Data>(
            "Data",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Data {
    const NAME: &'static str = "Data";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.data_type = ::std::option::Option::Some(data::Data_type::StringData(is.read_string()?));
                },
                18 => {
                    self.data_type = ::std::option::Option::Some(data::Data_type::BinaryData(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.data_type {
            match v {
                &data::Data_type::StringData(ref v) => {
                    my_size += ::protobuf::rt::string_size(1, &v);
                },
                &data::Data_type::BinaryData(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.data_type {
            match v {
                &data::Data_type::StringData(ref v) => {
                    os.write_string(1, v)?;
                },
                &data::Data_type::BinaryData(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Data {
        Data::new()
    }

    fn clear(&mut self) {
        self.data_type = ::std::option::Option::None;
        self.data_type = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Data {
        static instance: Data = Data {
            data_type: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Data {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Data").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Data {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Data {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Data`
pub mod data {

    #[derive(Clone,PartialEq,Debug)]
    // @@protoc_insertion_point(oneof:bitdrift_public.protobuf.logging.v1.Data.data_type)
    pub enum Data_type {
        // @@protoc_insertion_point(oneof_field:bitdrift_public.protobuf.logging.v1.Data.string_data)
        StringData(::std::string::String),
        // @@protoc_insertion_point(oneof_field:bitdrift_public.protobuf.logging.v1.Data.binary_data)
        BinaryData(super::BinaryData),
    }

    impl ::protobuf::Oneof for Data_type {
    }

    impl ::protobuf::OneofFull for Data_type {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Data as ::protobuf::MessageFull>::descriptor().oneof_by_name("data_type").unwrap()).clone()
        }
    }

    impl Data_type {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Data_type>("data_type")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n1bitdrift_public/protobuf/logging/v1/payload.proto\x12#bitdrift_public\
    .protobuf.logging.v1\"H\n\nBinaryData\x12\x17\n\x04type\x18\x01\x20\x01(\
    \tH\0R\x04type\x88\x01\x01\x12\x18\n\x07payload\x18\x02\x20\x01(\x0cR\
    \x07payloadB\x07\n\x05_type\"\x8a\x01\n\x04Data\x12!\n\x0bstring_data\
    \x18\x01\x20\x01(\tH\0R\nstringData\x12R\n\x0bbinary_data\x18\x02\x20\
    \x01(\x0b2/.bitdrift_public.protobuf.logging.v1.BinaryDataH\0R\nbinaryDa\
    taB\x0b\n\tdata_typeb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(BinaryData::generated_message_descriptor_data());
            messages.push(Data::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
