// This file is generated by rust-protobuf 4.0.0-alpha.0. Do not edit
// .proto file is parsed by protoc 28.2
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `prometheus/prompb/remote.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_4_0_0_ALPHA_0;

// @@protoc_insertion_point(message:prometheus.WriteRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct WriteRequest {
    // message fields
    // @@protoc_insertion_point(field:prometheus.WriteRequest.timeseries)
    pub timeseries: ::std::vec::Vec<super::types::TimeSeries>,
    // @@protoc_insertion_point(field:prometheus.WriteRequest.metadata)
    pub metadata: ::std::vec::Vec<super::types::MetricMetadata>,
    // @@protoc_insertion_point(field:prometheus.WriteRequest.failthrough_statsd_lines)
    pub failthrough_statsd_lines: ::std::vec::Vec<::protobuf::Chars>,
    // special fields
    // @@protoc_insertion_point(special_field:prometheus.WriteRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a WriteRequest {
    fn default() -> &'a WriteRequest {
        <WriteRequest as ::protobuf::Message>::default_instance()
    }
}

impl WriteRequest {
    pub fn new() -> WriteRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "timeseries",
            |m: &WriteRequest| { &m.timeseries },
            |m: &mut WriteRequest| { &mut m.timeseries },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "metadata",
            |m: &WriteRequest| { &m.metadata },
            |m: &mut WriteRequest| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "failthrough_statsd_lines",
            |m: &WriteRequest| { &m.failthrough_statsd_lines },
            |m: &mut WriteRequest| { &mut m.failthrough_statsd_lines },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<WriteRequest>(
            "WriteRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for WriteRequest {
    const NAME: &'static str = "WriteRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.timeseries.push(is.read_message()?);
                },
                26 => {
                    self.metadata.push(is.read_message()?);
                },
                138 => {
                    self.failthrough_statsd_lines.push(is.read_tokio_chars()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.timeseries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.metadata {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.failthrough_statsd_lines {
            my_size += ::protobuf::rt::string_size(17, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.timeseries {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.metadata {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        for v in &self.failthrough_statsd_lines {
            os.write_string(17, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> WriteRequest {
        WriteRequest::new()
    }

    fn clear(&mut self) {
        self.timeseries.clear();
        self.metadata.clear();
        self.failthrough_statsd_lines.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static WriteRequest {
        static instance: WriteRequest = WriteRequest {
            timeseries: ::std::vec::Vec::new(),
            metadata: ::std::vec::Vec::new(),
            failthrough_statsd_lines: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for WriteRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("WriteRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for WriteRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:prometheus.ReadRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ReadRequest {
    // message fields
    // @@protoc_insertion_point(field:prometheus.ReadRequest.queries)
    pub queries: ::std::vec::Vec<Query>,
    // @@protoc_insertion_point(field:prometheus.ReadRequest.accepted_response_types)
    pub accepted_response_types: ::std::vec::Vec<::protobuf::EnumOrUnknown<read_request::ResponseType>>,
    // special fields
    // @@protoc_insertion_point(special_field:prometheus.ReadRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ReadRequest {
    fn default() -> &'a ReadRequest {
        <ReadRequest as ::protobuf::Message>::default_instance()
    }
}

impl ReadRequest {
    pub fn new() -> ReadRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "queries",
            |m: &ReadRequest| { &m.queries },
            |m: &mut ReadRequest| { &mut m.queries },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "accepted_response_types",
            |m: &ReadRequest| { &m.accepted_response_types },
            |m: &mut ReadRequest| { &mut m.accepted_response_types },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ReadRequest>(
            "ReadRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ReadRequest {
    const NAME: &'static str = "ReadRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.queries.push(is.read_message()?);
                },
                16 => {
                    self.accepted_response_types.push(is.read_enum_or_unknown()?);
                },
                18 => {
                    ::protobuf::rt::read_repeated_packed_enum_or_unknown_into(is, &mut self.accepted_response_types)?
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.queries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::vec_packed_enum_or_unknown_size(2, &self.accepted_response_types);
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.queries {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_repeated_packed_enum_or_unknown(2, &self.accepted_response_types)?;
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ReadRequest {
        ReadRequest::new()
    }

    fn clear(&mut self) {
        self.queries.clear();
        self.accepted_response_types.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ReadRequest {
        static instance: ReadRequest = ReadRequest {
            queries: ::std::vec::Vec::new(),
            accepted_response_types: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ReadRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ReadRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ReadRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ReadRequest`
pub mod read_request {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:prometheus.ReadRequest.ResponseType)
    pub enum ResponseType {
        // @@protoc_insertion_point(enum_value:prometheus.ReadRequest.ResponseType.SAMPLES)
        SAMPLES = 0,
        // @@protoc_insertion_point(enum_value:prometheus.ReadRequest.ResponseType.STREAMED_XOR_CHUNKS)
        STREAMED_XOR_CHUNKS = 1,
    }

    impl ::protobuf::Enum for ResponseType {
        const NAME: &'static str = "ResponseType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<ResponseType> {
            match value {
                0 => ::std::option::Option::Some(ResponseType::SAMPLES),
                1 => ::std::option::Option::Some(ResponseType::STREAMED_XOR_CHUNKS),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<ResponseType> {
            match str {
                "SAMPLES" => ::std::option::Option::Some(ResponseType::SAMPLES),
                "STREAMED_XOR_CHUNKS" => ::std::option::Option::Some(ResponseType::STREAMED_XOR_CHUNKS),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [ResponseType] = &[
            ResponseType::SAMPLES,
            ResponseType::STREAMED_XOR_CHUNKS,
        ];
    }

    impl ::protobuf::EnumFull for ResponseType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("ReadRequest.ResponseType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for ResponseType {
        fn default() -> Self {
            ResponseType::SAMPLES
        }
    }

    impl ResponseType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ResponseType>("ReadRequest.ResponseType")
        }
    }
}

// @@protoc_insertion_point(message:prometheus.ReadResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ReadResponse {
    // message fields
    // @@protoc_insertion_point(field:prometheus.ReadResponse.results)
    pub results: ::std::vec::Vec<QueryResult>,
    // special fields
    // @@protoc_insertion_point(special_field:prometheus.ReadResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ReadResponse {
    fn default() -> &'a ReadResponse {
        <ReadResponse as ::protobuf::Message>::default_instance()
    }
}

impl ReadResponse {
    pub fn new() -> ReadResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "results",
            |m: &ReadResponse| { &m.results },
            |m: &mut ReadResponse| { &mut m.results },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ReadResponse>(
            "ReadResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ReadResponse {
    const NAME: &'static str = "ReadResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.results.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.results {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.results {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ReadResponse {
        ReadResponse::new()
    }

    fn clear(&mut self) {
        self.results.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ReadResponse {
        static instance: ReadResponse = ReadResponse {
            results: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ReadResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ReadResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ReadResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:prometheus.Query)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Query {
    // message fields
    // @@protoc_insertion_point(field:prometheus.Query.start_timestamp_ms)
    pub start_timestamp_ms: i64,
    // @@protoc_insertion_point(field:prometheus.Query.end_timestamp_ms)
    pub end_timestamp_ms: i64,
    // @@protoc_insertion_point(field:prometheus.Query.matchers)
    pub matchers: ::std::vec::Vec<super::types::LabelMatcher>,
    // @@protoc_insertion_point(field:prometheus.Query.hints)
    pub hints: ::protobuf::MessageField<super::types::ReadHints>,
    // special fields
    // @@protoc_insertion_point(special_field:prometheus.Query.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Query {
    fn default() -> &'a Query {
        <Query as ::protobuf::Message>::default_instance()
    }
}

impl Query {
    pub fn new() -> Query {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "start_timestamp_ms",
            |m: &Query| { &m.start_timestamp_ms },
            |m: &mut Query| { &mut m.start_timestamp_ms },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "end_timestamp_ms",
            |m: &Query| { &m.end_timestamp_ms },
            |m: &mut Query| { &mut m.end_timestamp_ms },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "matchers",
            |m: &Query| { &m.matchers },
            |m: &mut Query| { &mut m.matchers },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::types::ReadHints>(
            "hints",
            |m: &Query| { &m.hints },
            |m: &mut Query| { &mut m.hints },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Query>(
            "Query",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Query {
    const NAME: &'static str = "Query";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.start_timestamp_ms = is.read_int64()?;
                },
                16 => {
                    self.end_timestamp_ms = is.read_int64()?;
                },
                26 => {
                    self.matchers.push(is.read_message()?);
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.hints)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.start_timestamp_ms != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.start_timestamp_ms);
        }
        if self.end_timestamp_ms != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.end_timestamp_ms);
        }
        for value in &self.matchers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.hints.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.start_timestamp_ms != 0 {
            os.write_int64(1, self.start_timestamp_ms)?;
        }
        if self.end_timestamp_ms != 0 {
            os.write_int64(2, self.end_timestamp_ms)?;
        }
        for v in &self.matchers {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if let Some(v) = self.hints.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Query {
        Query::new()
    }

    fn clear(&mut self) {
        self.start_timestamp_ms = 0;
        self.end_timestamp_ms = 0;
        self.matchers.clear();
        self.hints.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Query {
        static instance: Query = Query {
            start_timestamp_ms: 0,
            end_timestamp_ms: 0,
            matchers: ::std::vec::Vec::new(),
            hints: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Query {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Query").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Query {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Query {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:prometheus.QueryResult)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct QueryResult {
    // message fields
    // @@protoc_insertion_point(field:prometheus.QueryResult.timeseries)
    pub timeseries: ::std::vec::Vec<super::types::TimeSeries>,
    // special fields
    // @@protoc_insertion_point(special_field:prometheus.QueryResult.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryResult {
    fn default() -> &'a QueryResult {
        <QueryResult as ::protobuf::Message>::default_instance()
    }
}

impl QueryResult {
    pub fn new() -> QueryResult {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "timeseries",
            |m: &QueryResult| { &m.timeseries },
            |m: &mut QueryResult| { &mut m.timeseries },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryResult>(
            "QueryResult",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryResult {
    const NAME: &'static str = "QueryResult";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.timeseries.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.timeseries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.timeseries {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryResult {
        QueryResult::new()
    }

    fn clear(&mut self) {
        self.timeseries.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryResult {
        static instance: QueryResult = QueryResult {
            timeseries: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryResult {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryResult").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryResult {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:prometheus.ChunkedReadResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ChunkedReadResponse {
    // message fields
    // @@protoc_insertion_point(field:prometheus.ChunkedReadResponse.chunked_series)
    pub chunked_series: ::std::vec::Vec<super::types::ChunkedSeries>,
    // @@protoc_insertion_point(field:prometheus.ChunkedReadResponse.query_index)
    pub query_index: i64,
    // special fields
    // @@protoc_insertion_point(special_field:prometheus.ChunkedReadResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ChunkedReadResponse {
    fn default() -> &'a ChunkedReadResponse {
        <ChunkedReadResponse as ::protobuf::Message>::default_instance()
    }
}

impl ChunkedReadResponse {
    pub fn new() -> ChunkedReadResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "chunked_series",
            |m: &ChunkedReadResponse| { &m.chunked_series },
            |m: &mut ChunkedReadResponse| { &mut m.chunked_series },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "query_index",
            |m: &ChunkedReadResponse| { &m.query_index },
            |m: &mut ChunkedReadResponse| { &mut m.query_index },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ChunkedReadResponse>(
            "ChunkedReadResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ChunkedReadResponse {
    const NAME: &'static str = "ChunkedReadResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.chunked_series.push(is.read_message()?);
                },
                16 => {
                    self.query_index = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.chunked_series {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.query_index != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.query_index);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.chunked_series {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if self.query_index != 0 {
            os.write_int64(2, self.query_index)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ChunkedReadResponse {
        ChunkedReadResponse::new()
    }

    fn clear(&mut self) {
        self.chunked_series.clear();
        self.query_index = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ChunkedReadResponse {
        static instance: ChunkedReadResponse = ChunkedReadResponse {
            chunked_series: ::std::vec::Vec::new(),
            query_index: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ChunkedReadResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ChunkedReadResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ChunkedReadResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChunkedReadResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1eprometheus/prompb/remote.proto\x12\nprometheus\x1a\x1dprometheus/p\
    rompb/types.proto\x1a\x14gogoproto/gogo.proto\"\xca\x01\n\x0cWriteReques\
    t\x12<\n\ntimeseries\x18\x01\x20\x03(\x0b2\x16.prometheus.TimeSeriesR\nt\
    imeseriesB\x04\xc8\xde\x1f\0\x12<\n\x08metadata\x18\x03\x20\x03(\x0b2\
    \x1a.prometheus.MetricMetadataR\x08metadataB\x04\xc8\xde\x1f\0\x128\n\
    \x18failthrough_statsd_lines\x18\x11\x20\x03(\tR\x16failthroughStatsdLin\
    esJ\x04\x08\x02\x10\x03\"\xce\x01\n\x0bReadRequest\x12+\n\x07queries\x18\
    \x01\x20\x03(\x0b2\x11.prometheus.QueryR\x07queries\x12\\\n\x17accepted_\
    response_types\x18\x02\x20\x03(\x0e2$.prometheus.ReadRequest.ResponseTyp\
    eR\x15acceptedResponseTypes\"4\n\x0cResponseType\x12\x0b\n\x07SAMPLES\
    \x10\0\x12\x17\n\x13STREAMED_XOR_CHUNKS\x10\x01\"A\n\x0cReadResponse\x12\
    1\n\x07results\x18\x01\x20\x03(\x0b2\x17.prometheus.QueryResultR\x07resu\
    lts\"\xc2\x01\n\x05Query\x12,\n\x12start_timestamp_ms\x18\x01\x20\x01(\
    \x03R\x10startTimestampMs\x12(\n\x10end_timestamp_ms\x18\x02\x20\x01(\
    \x03R\x0eendTimestampMs\x124\n\x08matchers\x18\x03\x20\x03(\x0b2\x18.pro\
    metheus.LabelMatcherR\x08matchers\x12+\n\x05hints\x18\x04\x20\x01(\x0b2\
    \x15.prometheus.ReadHintsR\x05hints\"E\n\x0bQueryResult\x126\n\ntimeseri\
    es\x18\x01\x20\x03(\x0b2\x16.prometheus.TimeSeriesR\ntimeseries\"x\n\x13\
    ChunkedReadResponse\x12@\n\x0echunked_series\x18\x01\x20\x03(\x0b2\x19.p\
    rometheus.ChunkedSeriesR\rchunkedSeries\x12\x1f\n\x0bquery_index\x18\x02\
    \x20\x01(\x03R\nqueryIndexB\x08Z\x06prompbb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::types::file_descriptor().clone());
            deps.push(super::gogo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(WriteRequest::generated_message_descriptor_data());
            messages.push(ReadRequest::generated_message_descriptor_data());
            messages.push(ReadResponse::generated_message_descriptor_data());
            messages.push(Query::generated_message_descriptor_data());
            messages.push(QueryResult::generated_message_descriptor_data());
            messages.push(ChunkedReadResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(read_request::ResponseType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
