// This file is generated by rust-protobuf 4.0.0-alpha.0. Do not edit
// .proto file is parsed by protoc 29.2
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `prometheus/prompb/types.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_4_0_0_ALPHA_0;

// @@protoc_insertion_point(message:prometheus.MetricMetadata)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MetricMetadata {
    // message fields
    // @@protoc_insertion_point(field:prometheus.MetricMetadata.type)
    pub type_: ::protobuf::EnumOrUnknown<metric_metadata::MetricType>,
    // @@protoc_insertion_point(field:prometheus.MetricMetadata.metric_family_name)
    pub metric_family_name: ::protobuf::Chars,
    // @@protoc_insertion_point(field:prometheus.MetricMetadata.help)
    pub help: ::protobuf::Chars,
    // @@protoc_insertion_point(field:prometheus.MetricMetadata.unit)
    pub unit: ::protobuf::Chars,
    // special fields
    // @@protoc_insertion_point(special_field:prometheus.MetricMetadata.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MetricMetadata {
    fn default() -> &'a MetricMetadata {
        <MetricMetadata as ::protobuf::Message>::default_instance()
    }
}

impl MetricMetadata {
    pub fn new() -> MetricMetadata {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &MetricMetadata| { &m.type_ },
            |m: &mut MetricMetadata| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "metric_family_name",
            |m: &MetricMetadata| { &m.metric_family_name },
            |m: &mut MetricMetadata| { &mut m.metric_family_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "help",
            |m: &MetricMetadata| { &m.help },
            |m: &mut MetricMetadata| { &mut m.help },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "unit",
            |m: &MetricMetadata| { &m.unit },
            |m: &mut MetricMetadata| { &mut m.unit },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MetricMetadata>(
            "MetricMetadata",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MetricMetadata {
    const NAME: &'static str = "MetricMetadata";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                18 => {
                    self.metric_family_name = is.read_tokio_chars()?;
                },
                34 => {
                    self.help = is.read_tokio_chars()?;
                },
                42 => {
                    self.unit = is.read_tokio_chars()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != ::protobuf::EnumOrUnknown::new(metric_metadata::MetricType::UNKNOWN) {
            my_size += ::protobuf::rt::int32_size(1, self.type_.value());
        }
        if !self.metric_family_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.metric_family_name);
        }
        if !self.help.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.help);
        }
        if !self.unit.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.unit);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != ::protobuf::EnumOrUnknown::new(metric_metadata::MetricType::UNKNOWN) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if !self.metric_family_name.is_empty() {
            os.write_string(2, &self.metric_family_name)?;
        }
        if !self.help.is_empty() {
            os.write_string(4, &self.help)?;
        }
        if !self.unit.is_empty() {
            os.write_string(5, &self.unit)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MetricMetadata {
        MetricMetadata::new()
    }

    fn clear(&mut self) {
        self.type_ = ::protobuf::EnumOrUnknown::new(metric_metadata::MetricType::UNKNOWN);
        self.metric_family_name.clear();
        self.help.clear();
        self.unit.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MetricMetadata {
        static instance: MetricMetadata = MetricMetadata {
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            metric_family_name: ::protobuf::Chars::new(),
            help: ::protobuf::Chars::new(),
            unit: ::protobuf::Chars::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MetricMetadata {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MetricMetadata").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MetricMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetricMetadata {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `MetricMetadata`
pub mod metric_metadata {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:prometheus.MetricMetadata.MetricType)
    pub enum MetricType {
        // @@protoc_insertion_point(enum_value:prometheus.MetricMetadata.MetricType.UNKNOWN)
        UNKNOWN = 0,
        // @@protoc_insertion_point(enum_value:prometheus.MetricMetadata.MetricType.COUNTER)
        COUNTER = 1,
        // @@protoc_insertion_point(enum_value:prometheus.MetricMetadata.MetricType.GAUGE)
        GAUGE = 2,
        // @@protoc_insertion_point(enum_value:prometheus.MetricMetadata.MetricType.HISTOGRAM)
        HISTOGRAM = 3,
        // @@protoc_insertion_point(enum_value:prometheus.MetricMetadata.MetricType.GAUGEHISTOGRAM)
        GAUGEHISTOGRAM = 4,
        // @@protoc_insertion_point(enum_value:prometheus.MetricMetadata.MetricType.SUMMARY)
        SUMMARY = 5,
        // @@protoc_insertion_point(enum_value:prometheus.MetricMetadata.MetricType.INFO)
        INFO = 6,
        // @@protoc_insertion_point(enum_value:prometheus.MetricMetadata.MetricType.STATESET)
        STATESET = 7,
        // @@protoc_insertion_point(enum_value:prometheus.MetricMetadata.MetricType.DIRECTGAUGE)
        DIRECTGAUGE = 100,
        // @@protoc_insertion_point(enum_value:prometheus.MetricMetadata.MetricType.DELTAGAUGE)
        DELTAGAUGE = 101,
    }

    impl ::protobuf::Enum for MetricType {
        const NAME: &'static str = "MetricType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<MetricType> {
            match value {
                0 => ::std::option::Option::Some(MetricType::UNKNOWN),
                1 => ::std::option::Option::Some(MetricType::COUNTER),
                2 => ::std::option::Option::Some(MetricType::GAUGE),
                3 => ::std::option::Option::Some(MetricType::HISTOGRAM),
                4 => ::std::option::Option::Some(MetricType::GAUGEHISTOGRAM),
                5 => ::std::option::Option::Some(MetricType::SUMMARY),
                6 => ::std::option::Option::Some(MetricType::INFO),
                7 => ::std::option::Option::Some(MetricType::STATESET),
                100 => ::std::option::Option::Some(MetricType::DIRECTGAUGE),
                101 => ::std::option::Option::Some(MetricType::DELTAGAUGE),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<MetricType> {
            match str {
                "UNKNOWN" => ::std::option::Option::Some(MetricType::UNKNOWN),
                "COUNTER" => ::std::option::Option::Some(MetricType::COUNTER),
                "GAUGE" => ::std::option::Option::Some(MetricType::GAUGE),
                "HISTOGRAM" => ::std::option::Option::Some(MetricType::HISTOGRAM),
                "GAUGEHISTOGRAM" => ::std::option::Option::Some(MetricType::GAUGEHISTOGRAM),
                "SUMMARY" => ::std::option::Option::Some(MetricType::SUMMARY),
                "INFO" => ::std::option::Option::Some(MetricType::INFO),
                "STATESET" => ::std::option::Option::Some(MetricType::STATESET),
                "DIRECTGAUGE" => ::std::option::Option::Some(MetricType::DIRECTGAUGE),
                "DELTAGAUGE" => ::std::option::Option::Some(MetricType::DELTAGAUGE),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [MetricType] = &[
            MetricType::UNKNOWN,
            MetricType::COUNTER,
            MetricType::GAUGE,
            MetricType::HISTOGRAM,
            MetricType::GAUGEHISTOGRAM,
            MetricType::SUMMARY,
            MetricType::INFO,
            MetricType::STATESET,
            MetricType::DIRECTGAUGE,
            MetricType::DELTAGAUGE,
        ];
    }

    impl ::protobuf::EnumFull for MetricType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("MetricMetadata.MetricType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = match self {
                MetricType::UNKNOWN => 0,
                MetricType::COUNTER => 1,
                MetricType::GAUGE => 2,
                MetricType::HISTOGRAM => 3,
                MetricType::GAUGEHISTOGRAM => 4,
                MetricType::SUMMARY => 5,
                MetricType::INFO => 6,
                MetricType::STATESET => 7,
                MetricType::DIRECTGAUGE => 8,
                MetricType::DELTAGAUGE => 9,
            };
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for MetricType {
        fn default() -> Self {
            MetricType::UNKNOWN
        }
    }

    impl MetricType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<MetricType>("MetricMetadata.MetricType")
        }
    }
}

// @@protoc_insertion_point(message:prometheus.Sample)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Sample {
    // message fields
    // @@protoc_insertion_point(field:prometheus.Sample.value)
    pub value: f64,
    // @@protoc_insertion_point(field:prometheus.Sample.timestamp)
    pub timestamp: i64,
    // @@protoc_insertion_point(field:prometheus.Sample.sample_rate)
    pub sample_rate: f64,
    // special fields
    // @@protoc_insertion_point(special_field:prometheus.Sample.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Sample {
    fn default() -> &'a Sample {
        <Sample as ::protobuf::Message>::default_instance()
    }
}

impl Sample {
    pub fn new() -> Sample {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &Sample| { &m.value },
            |m: &mut Sample| { &mut m.value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "timestamp",
            |m: &Sample| { &m.timestamp },
            |m: &mut Sample| { &mut m.timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sample_rate",
            |m: &Sample| { &m.sample_rate },
            |m: &mut Sample| { &mut m.sample_rate },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Sample>(
            "Sample",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Sample {
    const NAME: &'static str = "Sample";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.value = is.read_double()?;
                },
                16 => {
                    self.timestamp = is.read_int64()?;
                },
                801 => {
                    self.sample_rate = is.read_double()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.value != 0. {
            my_size += 1 + 8;
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.timestamp);
        }
        if self.sample_rate != 0. {
            my_size += 2 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.value != 0. {
            os.write_double(1, self.value)?;
        }
        if self.timestamp != 0 {
            os.write_int64(2, self.timestamp)?;
        }
        if self.sample_rate != 0. {
            os.write_double(100, self.sample_rate)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Sample {
        Sample::new()
    }

    fn clear(&mut self) {
        self.value = 0.;
        self.timestamp = 0;
        self.sample_rate = 0.;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Sample {
        static instance: Sample = Sample {
            value: 0.,
            timestamp: 0,
            sample_rate: 0.,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Sample {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Sample").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Sample {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Sample {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:prometheus.Exemplar)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Exemplar {
    // message fields
    // @@protoc_insertion_point(field:prometheus.Exemplar.labels)
    pub labels: ::std::vec::Vec<Label>,
    // @@protoc_insertion_point(field:prometheus.Exemplar.value)
    pub value: f64,
    // @@protoc_insertion_point(field:prometheus.Exemplar.timestamp)
    pub timestamp: i64,
    // special fields
    // @@protoc_insertion_point(special_field:prometheus.Exemplar.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Exemplar {
    fn default() -> &'a Exemplar {
        <Exemplar as ::protobuf::Message>::default_instance()
    }
}

impl Exemplar {
    pub fn new() -> Exemplar {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "labels",
            |m: &Exemplar| { &m.labels },
            |m: &mut Exemplar| { &mut m.labels },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &Exemplar| { &m.value },
            |m: &mut Exemplar| { &mut m.value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "timestamp",
            |m: &Exemplar| { &m.timestamp },
            |m: &mut Exemplar| { &mut m.timestamp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Exemplar>(
            "Exemplar",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Exemplar {
    const NAME: &'static str = "Exemplar";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.labels.push(is.read_message()?);
                },
                17 => {
                    self.value = is.read_double()?;
                },
                24 => {
                    self.timestamp = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.labels {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.value != 0. {
            my_size += 1 + 8;
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::int64_size(3, self.timestamp);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.labels {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if self.value != 0. {
            os.write_double(2, self.value)?;
        }
        if self.timestamp != 0 {
            os.write_int64(3, self.timestamp)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Exemplar {
        Exemplar::new()
    }

    fn clear(&mut self) {
        self.labels.clear();
        self.value = 0.;
        self.timestamp = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Exemplar {
        static instance: Exemplar = Exemplar {
            labels: ::std::vec::Vec::new(),
            value: 0.,
            timestamp: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Exemplar {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Exemplar").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Exemplar {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Exemplar {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:prometheus.TimeSeries)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TimeSeries {
    // message fields
    // @@protoc_insertion_point(field:prometheus.TimeSeries.labels)
    pub labels: ::std::vec::Vec<Label>,
    // @@protoc_insertion_point(field:prometheus.TimeSeries.samples)
    pub samples: ::std::vec::Vec<Sample>,
    // @@protoc_insertion_point(field:prometheus.TimeSeries.exemplars)
    pub exemplars: ::std::vec::Vec<Exemplar>,
    // special fields
    // @@protoc_insertion_point(special_field:prometheus.TimeSeries.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TimeSeries {
    fn default() -> &'a TimeSeries {
        <TimeSeries as ::protobuf::Message>::default_instance()
    }
}

impl TimeSeries {
    pub fn new() -> TimeSeries {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "labels",
            |m: &TimeSeries| { &m.labels },
            |m: &mut TimeSeries| { &mut m.labels },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "samples",
            |m: &TimeSeries| { &m.samples },
            |m: &mut TimeSeries| { &mut m.samples },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "exemplars",
            |m: &TimeSeries| { &m.exemplars },
            |m: &mut TimeSeries| { &mut m.exemplars },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TimeSeries>(
            "TimeSeries",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TimeSeries {
    const NAME: &'static str = "TimeSeries";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.labels.push(is.read_message()?);
                },
                18 => {
                    self.samples.push(is.read_message()?);
                },
                26 => {
                    self.exemplars.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.labels {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.samples {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.exemplars {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.labels {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.samples {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.exemplars {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TimeSeries {
        TimeSeries::new()
    }

    fn clear(&mut self) {
        self.labels.clear();
        self.samples.clear();
        self.exemplars.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TimeSeries {
        static instance: TimeSeries = TimeSeries {
            labels: ::std::vec::Vec::new(),
            samples: ::std::vec::Vec::new(),
            exemplars: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TimeSeries {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TimeSeries").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TimeSeries {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TimeSeries {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:prometheus.Label)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Label {
    // message fields
    // @@protoc_insertion_point(field:prometheus.Label.name)
    pub name: ::protobuf::Chars,
    // @@protoc_insertion_point(field:prometheus.Label.value)
    pub value: ::protobuf::Chars,
    // special fields
    // @@protoc_insertion_point(special_field:prometheus.Label.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Label {
    fn default() -> &'a Label {
        <Label as ::protobuf::Message>::default_instance()
    }
}

impl Label {
    pub fn new() -> Label {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Label| { &m.name },
            |m: &mut Label| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &Label| { &m.value },
            |m: &mut Label| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Label>(
            "Label",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Label {
    const NAME: &'static str = "Label";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_tokio_chars()?;
                },
                18 => {
                    self.value = is.read_tokio_chars()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.value.is_empty() {
            os.write_string(2, &self.value)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Label {
        Label::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.value.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Label {
        static instance: Label = Label {
            name: ::protobuf::Chars::new(),
            value: ::protobuf::Chars::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Label {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Label").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Label {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Label {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:prometheus.Labels)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Labels {
    // message fields
    // @@protoc_insertion_point(field:prometheus.Labels.labels)
    pub labels: ::std::vec::Vec<Label>,
    // special fields
    // @@protoc_insertion_point(special_field:prometheus.Labels.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Labels {
    fn default() -> &'a Labels {
        <Labels as ::protobuf::Message>::default_instance()
    }
}

impl Labels {
    pub fn new() -> Labels {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "labels",
            |m: &Labels| { &m.labels },
            |m: &mut Labels| { &mut m.labels },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Labels>(
            "Labels",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Labels {
    const NAME: &'static str = "Labels";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.labels.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.labels {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.labels {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Labels {
        Labels::new()
    }

    fn clear(&mut self) {
        self.labels.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Labels {
        static instance: Labels = Labels {
            labels: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Labels {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Labels").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Labels {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Labels {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:prometheus.LabelMatcher)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct LabelMatcher {
    // message fields
    // @@protoc_insertion_point(field:prometheus.LabelMatcher.type)
    pub type_: ::protobuf::EnumOrUnknown<label_matcher::Type>,
    // @@protoc_insertion_point(field:prometheus.LabelMatcher.name)
    pub name: ::protobuf::Chars,
    // @@protoc_insertion_point(field:prometheus.LabelMatcher.value)
    pub value: ::protobuf::Chars,
    // special fields
    // @@protoc_insertion_point(special_field:prometheus.LabelMatcher.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LabelMatcher {
    fn default() -> &'a LabelMatcher {
        <LabelMatcher as ::protobuf::Message>::default_instance()
    }
}

impl LabelMatcher {
    pub fn new() -> LabelMatcher {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &LabelMatcher| { &m.type_ },
            |m: &mut LabelMatcher| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &LabelMatcher| { &m.name },
            |m: &mut LabelMatcher| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &LabelMatcher| { &m.value },
            |m: &mut LabelMatcher| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LabelMatcher>(
            "LabelMatcher",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LabelMatcher {
    const NAME: &'static str = "LabelMatcher";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                18 => {
                    self.name = is.read_tokio_chars()?;
                },
                26 => {
                    self.value = is.read_tokio_chars()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != ::protobuf::EnumOrUnknown::new(label_matcher::Type::EQ) {
            my_size += ::protobuf::rt::int32_size(1, self.type_.value());
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != ::protobuf::EnumOrUnknown::new(label_matcher::Type::EQ) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if !self.value.is_empty() {
            os.write_string(3, &self.value)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LabelMatcher {
        LabelMatcher::new()
    }

    fn clear(&mut self) {
        self.type_ = ::protobuf::EnumOrUnknown::new(label_matcher::Type::EQ);
        self.name.clear();
        self.value.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LabelMatcher {
        static instance: LabelMatcher = LabelMatcher {
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            name: ::protobuf::Chars::new(),
            value: ::protobuf::Chars::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LabelMatcher {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LabelMatcher").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LabelMatcher {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LabelMatcher {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `LabelMatcher`
pub mod label_matcher {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:prometheus.LabelMatcher.Type)
    pub enum Type {
        // @@protoc_insertion_point(enum_value:prometheus.LabelMatcher.Type.EQ)
        EQ = 0,
        // @@protoc_insertion_point(enum_value:prometheus.LabelMatcher.Type.NEQ)
        NEQ = 1,
        // @@protoc_insertion_point(enum_value:prometheus.LabelMatcher.Type.RE)
        RE = 2,
        // @@protoc_insertion_point(enum_value:prometheus.LabelMatcher.Type.NRE)
        NRE = 3,
    }

    impl ::protobuf::Enum for Type {
        const NAME: &'static str = "Type";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Type> {
            match value {
                0 => ::std::option::Option::Some(Type::EQ),
                1 => ::std::option::Option::Some(Type::NEQ),
                2 => ::std::option::Option::Some(Type::RE),
                3 => ::std::option::Option::Some(Type::NRE),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Type> {
            match str {
                "EQ" => ::std::option::Option::Some(Type::EQ),
                "NEQ" => ::std::option::Option::Some(Type::NEQ),
                "RE" => ::std::option::Option::Some(Type::RE),
                "NRE" => ::std::option::Option::Some(Type::NRE),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Type] = &[
            Type::EQ,
            Type::NEQ,
            Type::RE,
            Type::NRE,
        ];
    }

    impl ::protobuf::EnumFull for Type {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("LabelMatcher.Type").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Type {
        fn default() -> Self {
            Type::EQ
        }
    }

    impl Type {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Type>("LabelMatcher.Type")
        }
    }
}

// @@protoc_insertion_point(message:prometheus.ReadHints)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ReadHints {
    // message fields
    // @@protoc_insertion_point(field:prometheus.ReadHints.step_ms)
    pub step_ms: i64,
    // @@protoc_insertion_point(field:prometheus.ReadHints.func)
    pub func: ::protobuf::Chars,
    // @@protoc_insertion_point(field:prometheus.ReadHints.start_ms)
    pub start_ms: i64,
    // @@protoc_insertion_point(field:prometheus.ReadHints.end_ms)
    pub end_ms: i64,
    // @@protoc_insertion_point(field:prometheus.ReadHints.grouping)
    pub grouping: ::std::vec::Vec<::protobuf::Chars>,
    // @@protoc_insertion_point(field:prometheus.ReadHints.by)
    pub by: bool,
    // @@protoc_insertion_point(field:prometheus.ReadHints.range_ms)
    pub range_ms: i64,
    // special fields
    // @@protoc_insertion_point(special_field:prometheus.ReadHints.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ReadHints {
    fn default() -> &'a ReadHints {
        <ReadHints as ::protobuf::Message>::default_instance()
    }
}

impl ReadHints {
    pub fn new() -> ReadHints {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "step_ms",
            |m: &ReadHints| { &m.step_ms },
            |m: &mut ReadHints| { &mut m.step_ms },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "func",
            |m: &ReadHints| { &m.func },
            |m: &mut ReadHints| { &mut m.func },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "start_ms",
            |m: &ReadHints| { &m.start_ms },
            |m: &mut ReadHints| { &mut m.start_ms },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "end_ms",
            |m: &ReadHints| { &m.end_ms },
            |m: &mut ReadHints| { &mut m.end_ms },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "grouping",
            |m: &ReadHints| { &m.grouping },
            |m: &mut ReadHints| { &mut m.grouping },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "by",
            |m: &ReadHints| { &m.by },
            |m: &mut ReadHints| { &mut m.by },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "range_ms",
            |m: &ReadHints| { &m.range_ms },
            |m: &mut ReadHints| { &mut m.range_ms },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ReadHints>(
            "ReadHints",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ReadHints {
    const NAME: &'static str = "ReadHints";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.step_ms = is.read_int64()?;
                },
                18 => {
                    self.func = is.read_tokio_chars()?;
                },
                24 => {
                    self.start_ms = is.read_int64()?;
                },
                32 => {
                    self.end_ms = is.read_int64()?;
                },
                42 => {
                    self.grouping.push(is.read_tokio_chars()?);
                },
                48 => {
                    self.by = is.read_bool()?;
                },
                56 => {
                    self.range_ms = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.step_ms != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.step_ms);
        }
        if !self.func.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.func);
        }
        if self.start_ms != 0 {
            my_size += ::protobuf::rt::int64_size(3, self.start_ms);
        }
        if self.end_ms != 0 {
            my_size += ::protobuf::rt::int64_size(4, self.end_ms);
        }
        for value in &self.grouping {
            my_size += ::protobuf::rt::string_size(5, &value);
        };
        if self.by != false {
            my_size += 1 + 1;
        }
        if self.range_ms != 0 {
            my_size += ::protobuf::rt::int64_size(7, self.range_ms);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.step_ms != 0 {
            os.write_int64(1, self.step_ms)?;
        }
        if !self.func.is_empty() {
            os.write_string(2, &self.func)?;
        }
        if self.start_ms != 0 {
            os.write_int64(3, self.start_ms)?;
        }
        if self.end_ms != 0 {
            os.write_int64(4, self.end_ms)?;
        }
        for v in &self.grouping {
            os.write_string(5, &v)?;
        };
        if self.by != false {
            os.write_bool(6, self.by)?;
        }
        if self.range_ms != 0 {
            os.write_int64(7, self.range_ms)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ReadHints {
        ReadHints::new()
    }

    fn clear(&mut self) {
        self.step_ms = 0;
        self.func.clear();
        self.start_ms = 0;
        self.end_ms = 0;
        self.grouping.clear();
        self.by = false;
        self.range_ms = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ReadHints {
        static instance: ReadHints = ReadHints {
            step_ms: 0,
            func: ::protobuf::Chars::new(),
            start_ms: 0,
            end_ms: 0,
            grouping: ::std::vec::Vec::new(),
            by: false,
            range_ms: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ReadHints {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ReadHints").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ReadHints {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadHints {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:prometheus.Chunk)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Chunk {
    // message fields
    // @@protoc_insertion_point(field:prometheus.Chunk.min_time_ms)
    pub min_time_ms: i64,
    // @@protoc_insertion_point(field:prometheus.Chunk.max_time_ms)
    pub max_time_ms: i64,
    // @@protoc_insertion_point(field:prometheus.Chunk.type)
    pub type_: ::protobuf::EnumOrUnknown<chunk::Encoding>,
    // @@protoc_insertion_point(field:prometheus.Chunk.data)
    pub data: ::bytes::Bytes,
    // special fields
    // @@protoc_insertion_point(special_field:prometheus.Chunk.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Chunk {
    fn default() -> &'a Chunk {
        <Chunk as ::protobuf::Message>::default_instance()
    }
}

impl Chunk {
    pub fn new() -> Chunk {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "min_time_ms",
            |m: &Chunk| { &m.min_time_ms },
            |m: &mut Chunk| { &mut m.min_time_ms },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "max_time_ms",
            |m: &Chunk| { &m.max_time_ms },
            |m: &mut Chunk| { &mut m.max_time_ms },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &Chunk| { &m.type_ },
            |m: &mut Chunk| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &Chunk| { &m.data },
            |m: &mut Chunk| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Chunk>(
            "Chunk",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Chunk {
    const NAME: &'static str = "Chunk";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.min_time_ms = is.read_int64()?;
                },
                16 => {
                    self.max_time_ms = is.read_int64()?;
                },
                24 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                34 => {
                    self.data = is.read_tokio_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.min_time_ms != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.min_time_ms);
        }
        if self.max_time_ms != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.max_time_ms);
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(chunk::Encoding::UNKNOWN) {
            my_size += ::protobuf::rt::int32_size(3, self.type_.value());
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.min_time_ms != 0 {
            os.write_int64(1, self.min_time_ms)?;
        }
        if self.max_time_ms != 0 {
            os.write_int64(2, self.max_time_ms)?;
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(chunk::Encoding::UNKNOWN) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if !self.data.is_empty() {
            os.write_bytes(4, &self.data)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Chunk {
        Chunk::new()
    }

    fn clear(&mut self) {
        self.min_time_ms = 0;
        self.max_time_ms = 0;
        self.type_ = ::protobuf::EnumOrUnknown::new(chunk::Encoding::UNKNOWN);
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Chunk {
        static instance: Chunk = Chunk {
            min_time_ms: 0,
            max_time_ms: 0,
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            data: ::bytes::Bytes::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Chunk {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Chunk").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Chunk {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Chunk {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Chunk`
pub mod chunk {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:prometheus.Chunk.Encoding)
    pub enum Encoding {
        // @@protoc_insertion_point(enum_value:prometheus.Chunk.Encoding.UNKNOWN)
        UNKNOWN = 0,
        // @@protoc_insertion_point(enum_value:prometheus.Chunk.Encoding.XOR)
        XOR = 1,
    }

    impl ::protobuf::Enum for Encoding {
        const NAME: &'static str = "Encoding";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Encoding> {
            match value {
                0 => ::std::option::Option::Some(Encoding::UNKNOWN),
                1 => ::std::option::Option::Some(Encoding::XOR),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Encoding> {
            match str {
                "UNKNOWN" => ::std::option::Option::Some(Encoding::UNKNOWN),
                "XOR" => ::std::option::Option::Some(Encoding::XOR),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Encoding] = &[
            Encoding::UNKNOWN,
            Encoding::XOR,
        ];
    }

    impl ::protobuf::EnumFull for Encoding {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("Chunk.Encoding").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Encoding {
        fn default() -> Self {
            Encoding::UNKNOWN
        }
    }

    impl Encoding {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Encoding>("Chunk.Encoding")
        }
    }
}

// @@protoc_insertion_point(message:prometheus.ChunkedSeries)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ChunkedSeries {
    // message fields
    // @@protoc_insertion_point(field:prometheus.ChunkedSeries.labels)
    pub labels: ::std::vec::Vec<Label>,
    // @@protoc_insertion_point(field:prometheus.ChunkedSeries.chunks)
    pub chunks: ::std::vec::Vec<Chunk>,
    // special fields
    // @@protoc_insertion_point(special_field:prometheus.ChunkedSeries.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ChunkedSeries {
    fn default() -> &'a ChunkedSeries {
        <ChunkedSeries as ::protobuf::Message>::default_instance()
    }
}

impl ChunkedSeries {
    pub fn new() -> ChunkedSeries {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "labels",
            |m: &ChunkedSeries| { &m.labels },
            |m: &mut ChunkedSeries| { &mut m.labels },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "chunks",
            |m: &ChunkedSeries| { &m.chunks },
            |m: &mut ChunkedSeries| { &mut m.chunks },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ChunkedSeries>(
            "ChunkedSeries",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ChunkedSeries {
    const NAME: &'static str = "ChunkedSeries";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.labels.push(is.read_message()?);
                },
                18 => {
                    self.chunks.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.labels {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.chunks {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.labels {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.chunks {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ChunkedSeries {
        ChunkedSeries::new()
    }

    fn clear(&mut self) {
        self.labels.clear();
        self.chunks.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ChunkedSeries {
        static instance: ChunkedSeries = ChunkedSeries {
            labels: ::std::vec::Vec::new(),
            chunks: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ChunkedSeries {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ChunkedSeries").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ChunkedSeries {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChunkedSeries {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dprometheus/prompb/types.proto\x12\nprometheus\x1a\x14gogoproto/gog\
    o.proto\"\xbe\x02\n\x0eMetricMetadata\x129\n\x04type\x18\x01\x20\x01(\
    \x0e2%.prometheus.MetricMetadata.MetricTypeR\x04type\x12,\n\x12metric_fa\
    mily_name\x18\x02\x20\x01(\tR\x10metricFamilyName\x12\x12\n\x04help\x18\
    \x04\x20\x01(\tR\x04help\x12\x12\n\x04unit\x18\x05\x20\x01(\tR\x04unit\"\
    \x9a\x01\n\nMetricType\x12\x0b\n\x07UNKNOWN\x10\0\x12\x0b\n\x07COUNTER\
    \x10\x01\x12\t\n\x05GAUGE\x10\x02\x12\r\n\tHISTOGRAM\x10\x03\x12\x12\n\
    \x0eGAUGEHISTOGRAM\x10\x04\x12\x0b\n\x07SUMMARY\x10\x05\x12\x08\n\x04INF\
    O\x10\x06\x12\x0c\n\x08STATESET\x10\x07\x12\x0f\n\x0bDIRECTGAUGE\x10d\
    \x12\x0e\n\nDELTAGAUGE\x10e\"]\n\x06Sample\x12\x14\n\x05value\x18\x01\
    \x20\x01(\x01R\x05value\x12\x1c\n\ttimestamp\x18\x02\x20\x01(\x03R\ttime\
    stamp\x12\x1f\n\x0bsample_rate\x18d\x20\x01(\x01R\nsampleRate\"o\n\x08Ex\
    emplar\x12/\n\x06labels\x18\x01\x20\x03(\x0b2\x11.prometheus.LabelR\x06l\
    abelsB\x04\xc8\xde\x1f\0\x12\x14\n\x05value\x18\x02\x20\x01(\x01R\x05val\
    ue\x12\x1c\n\ttimestamp\x18\x03\x20\x01(\x03R\ttimestamp\"\xab\x01\n\nTi\
    meSeries\x12/\n\x06labels\x18\x01\x20\x03(\x0b2\x11.prometheus.LabelR\
    \x06labelsB\x04\xc8\xde\x1f\0\x122\n\x07samples\x18\x02\x20\x03(\x0b2\
    \x12.prometheus.SampleR\x07samplesB\x04\xc8\xde\x1f\0\x128\n\texemplars\
    \x18\x03\x20\x03(\x0b2\x14.prometheus.ExemplarR\texemplarsB\x04\xc8\xde\
    \x1f\0\"1\n\x05Label\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\
    \x14\n\x05value\x18\x02\x20\x01(\tR\x05value\"9\n\x06Labels\x12/\n\x06la\
    bels\x18\x01\x20\x03(\x0b2\x11.prometheus.LabelR\x06labelsB\x04\xc8\xde\
    \x1f\0\"\x95\x01\n\x0cLabelMatcher\x121\n\x04type\x18\x01\x20\x01(\x0e2\
    \x1d.prometheus.LabelMatcher.TypeR\x04type\x12\x12\n\x04name\x18\x02\x20\
    \x01(\tR\x04name\x12\x14\n\x05value\x18\x03\x20\x01(\tR\x05value\"(\n\
    \x04Type\x12\x06\n\x02EQ\x10\0\x12\x07\n\x03NEQ\x10\x01\x12\x06\n\x02RE\
    \x10\x02\x12\x07\n\x03NRE\x10\x03\"\xb1\x01\n\tReadHints\x12\x17\n\x07st\
    ep_ms\x18\x01\x20\x01(\x03R\x06stepMs\x12\x12\n\x04func\x18\x02\x20\x01(\
    \tR\x04func\x12\x19\n\x08start_ms\x18\x03\x20\x01(\x03R\x07startMs\x12\
    \x15\n\x06end_ms\x18\x04\x20\x01(\x03R\x05endMs\x12\x1a\n\x08grouping\
    \x18\x05\x20\x03(\tR\x08grouping\x12\x0e\n\x02by\x18\x06\x20\x01(\x08R\
    \x02by\x12\x19\n\x08range_ms\x18\x07\x20\x01(\x03R\x07rangeMs\"\xad\x01\
    \n\x05Chunk\x12\x1e\n\x0bmin_time_ms\x18\x01\x20\x01(\x03R\tminTimeMs\
    \x12\x1e\n\x0bmax_time_ms\x18\x02\x20\x01(\x03R\tmaxTimeMs\x12.\n\x04typ\
    e\x18\x03\x20\x01(\x0e2\x1a.prometheus.Chunk.EncodingR\x04type\x12\x12\n\
    \x04data\x18\x04\x20\x01(\x0cR\x04data\"\x20\n\x08Encoding\x12\x0b\n\x07\
    UNKNOWN\x10\0\x12\x07\n\x03XOR\x10\x01\"q\n\rChunkedSeries\x12/\n\x06lab\
    els\x18\x01\x20\x03(\x0b2\x11.prometheus.LabelR\x06labelsB\x04\xc8\xde\
    \x1f\0\x12/\n\x06chunks\x18\x02\x20\x03(\x0b2\x11.prometheus.ChunkR\x06c\
    hunksB\x04\xc8\xde\x1f\0B\x08Z\x06prompbb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::gogo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(10);
            messages.push(MetricMetadata::generated_message_descriptor_data());
            messages.push(Sample::generated_message_descriptor_data());
            messages.push(Exemplar::generated_message_descriptor_data());
            messages.push(TimeSeries::generated_message_descriptor_data());
            messages.push(Label::generated_message_descriptor_data());
            messages.push(Labels::generated_message_descriptor_data());
            messages.push(LabelMatcher::generated_message_descriptor_data());
            messages.push(ReadHints::generated_message_descriptor_data());
            messages.push(Chunk::generated_message_descriptor_data());
            messages.push(ChunkedSeries::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(3);
            enums.push(metric_metadata::MetricType::generated_enum_descriptor_data());
            enums.push(label_matcher::Type::generated_enum_descriptor_data());
            enums.push(chunk::Encoding::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
