// proto - bitdrift's client/server API definitions
// Copyright Bitdrift, Inc. All rights reserved.
//
// Use of this source code and APIs are governed by a source available license that can be found in
// the LICENSE file or at:
// https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt

// This file is generated by rust-protobuf 4.0.0-alpha.0. Do not edit
// .proto file is parsed by protoc 27.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `bitdrift_public/protobuf/pulse/v1/pulse.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_4_0_0_ALPHA_0;

// @@protoc_insertion_point(message:bitdrift_public.protobuf.pulse.v1.Kubelet)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Kubelet {
    // special fields
    // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.pulse.v1.Kubelet.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Kubelet {
    fn default() -> &'a Kubelet {
        <Kubelet as ::protobuf::Message>::default_instance()
    }
}

impl Kubelet {
    pub fn new() -> Kubelet {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Kubelet>(
            "Kubelet",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Kubelet {
    const NAME: &'static str = "Kubelet";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Kubelet {
        Kubelet::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Kubelet {
        static instance: Kubelet = Kubelet {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Kubelet {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Kubelet").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Kubelet {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Kubelet {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:bitdrift_public.protobuf.pulse.v1.PodName)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PodName {
    // special fields
    // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.pulse.v1.PodName.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PodName {
    fn default() -> &'a PodName {
        <PodName as ::protobuf::Message>::default_instance()
    }
}

impl PodName {
    pub fn new() -> PodName {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PodName>(
            "PodName",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PodName {
    const NAME: &'static str = "PodName";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PodName {
        PodName::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PodName {
        static instance: PodName = PodName {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PodName {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PodName").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PodName {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PodName {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:bitdrift_public.protobuf.pulse.v1.Namespace)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Namespace {
    // special fields
    // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.pulse.v1.Namespace.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Namespace {
    fn default() -> &'a Namespace {
        <Namespace as ::protobuf::Message>::default_instance()
    }
}

impl Namespace {
    pub fn new() -> Namespace {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Namespace>(
            "Namespace",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Namespace {
    const NAME: &'static str = "Namespace";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Namespace {
        Namespace::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Namespace {
        static instance: Namespace = Namespace {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Namespace {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Namespace").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Namespace {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Namespace {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:bitdrift_public.protobuf.pulse.v1.Service)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Service {
    // special fields
    // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.pulse.v1.Service.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Service {
    fn default() -> &'a Service {
        <Service as ::protobuf::Message>::default_instance()
    }
}

impl Service {
    pub fn new() -> Service {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Service>(
            "Service",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Service {
    const NAME: &'static str = "Service";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Service {
        Service::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Service {
        static instance: Service = Service {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Service {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Service").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Service {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Service {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:bitdrift_public.protobuf.pulse.v1.Deployment)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Deployment {
    // special fields
    // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.pulse.v1.Deployment.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Deployment {
    fn default() -> &'a Deployment {
        <Deployment as ::protobuf::Message>::default_instance()
    }
}

impl Deployment {
    pub fn new() -> Deployment {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Deployment>(
            "Deployment",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Deployment {
    const NAME: &'static str = "Deployment";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Deployment {
        Deployment::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Deployment {
        static instance: Deployment = Deployment {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Deployment {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Deployment").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Deployment {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Deployment {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:bitdrift_public.protobuf.pulse.v1.UserProvided)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UserProvided {
    // message fields
    // @@protoc_insertion_point(field:bitdrift_public.protobuf.pulse.v1.UserProvided.name)
    pub name: ::protobuf::Chars,
    // special fields
    // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.pulse.v1.UserProvided.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UserProvided {
    fn default() -> &'a UserProvided {
        <UserProvided as ::protobuf::Message>::default_instance()
    }
}

impl UserProvided {
    pub fn new() -> UserProvided {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &UserProvided| { &m.name },
            |m: &mut UserProvided| { &mut m.name },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UserProvided>(
            "UserProvided",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UserProvided {
    const NAME: &'static str = "UserProvided";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_tokio_chars()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UserProvided {
        UserProvided::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UserProvided {
        static instance: UserProvided = UserProvided {
            name: ::protobuf::Chars::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UserProvided {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UserProvided").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UserProvided {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UserProvided {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:bitdrift_public.protobuf.pulse.v1.EntityType)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EntityType {
    // message oneof groups
    pub entity_type: ::std::option::Option<entity_type::Entity_type>,
    // special fields
    // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.pulse.v1.EntityType.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EntityType {
    fn default() -> &'a EntityType {
        <EntityType as ::protobuf::Message>::default_instance()
    }
}

impl EntityType {
    pub fn new() -> EntityType {
        ::std::default::Default::default()
    }

    // .bitdrift_public.protobuf.pulse.v1.Kubelet kubelet = 1;

    pub fn kubelet(&self) -> &Kubelet {
        match self.entity_type {
            ::std::option::Option::Some(entity_type::Entity_type::Kubelet(ref v)) => v,
            _ => <Kubelet as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_kubelet(&mut self) {
        self.entity_type = ::std::option::Option::None;
    }

    pub fn has_kubelet(&self) -> bool {
        match self.entity_type {
            ::std::option::Option::Some(entity_type::Entity_type::Kubelet(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_kubelet(&mut self, v: Kubelet) {
        self.entity_type = ::std::option::Option::Some(entity_type::Entity_type::Kubelet(v))
    }

    // Mutable pointer to the field.
    pub fn mut_kubelet(&mut self) -> &mut Kubelet {
        if let ::std::option::Option::Some(entity_type::Entity_type::Kubelet(_)) = self.entity_type {
        } else {
            self.entity_type = ::std::option::Option::Some(entity_type::Entity_type::Kubelet(Kubelet::new()));
        }
        match self.entity_type {
            ::std::option::Option::Some(entity_type::Entity_type::Kubelet(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_kubelet(&mut self) -> Kubelet {
        if self.has_kubelet() {
            match self.entity_type.take() {
                ::std::option::Option::Some(entity_type::Entity_type::Kubelet(v)) => v,
                _ => panic!(),
            }
        } else {
            Kubelet::new()
        }
    }

    // .bitdrift_public.protobuf.pulse.v1.Deployment deployment = 2;

    pub fn deployment(&self) -> &Deployment {
        match self.entity_type {
            ::std::option::Option::Some(entity_type::Entity_type::Deployment(ref v)) => v,
            _ => <Deployment as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_deployment(&mut self) {
        self.entity_type = ::std::option::Option::None;
    }

    pub fn has_deployment(&self) -> bool {
        match self.entity_type {
            ::std::option::Option::Some(entity_type::Entity_type::Deployment(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_deployment(&mut self, v: Deployment) {
        self.entity_type = ::std::option::Option::Some(entity_type::Entity_type::Deployment(v))
    }

    // Mutable pointer to the field.
    pub fn mut_deployment(&mut self) -> &mut Deployment {
        if let ::std::option::Option::Some(entity_type::Entity_type::Deployment(_)) = self.entity_type {
        } else {
            self.entity_type = ::std::option::Option::Some(entity_type::Entity_type::Deployment(Deployment::new()));
        }
        match self.entity_type {
            ::std::option::Option::Some(entity_type::Entity_type::Deployment(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_deployment(&mut self) -> Deployment {
        if self.has_deployment() {
            match self.entity_type.take() {
                ::std::option::Option::Some(entity_type::Entity_type::Deployment(v)) => v,
                _ => panic!(),
            }
        } else {
            Deployment::new()
        }
    }

    // .bitdrift_public.protobuf.pulse.v1.PodName pod_name = 3;

    pub fn pod_name(&self) -> &PodName {
        match self.entity_type {
            ::std::option::Option::Some(entity_type::Entity_type::PodName(ref v)) => v,
            _ => <PodName as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_pod_name(&mut self) {
        self.entity_type = ::std::option::Option::None;
    }

    pub fn has_pod_name(&self) -> bool {
        match self.entity_type {
            ::std::option::Option::Some(entity_type::Entity_type::PodName(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_pod_name(&mut self, v: PodName) {
        self.entity_type = ::std::option::Option::Some(entity_type::Entity_type::PodName(v))
    }

    // Mutable pointer to the field.
    pub fn mut_pod_name(&mut self) -> &mut PodName {
        if let ::std::option::Option::Some(entity_type::Entity_type::PodName(_)) = self.entity_type {
        } else {
            self.entity_type = ::std::option::Option::Some(entity_type::Entity_type::PodName(PodName::new()));
        }
        match self.entity_type {
            ::std::option::Option::Some(entity_type::Entity_type::PodName(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_pod_name(&mut self) -> PodName {
        if self.has_pod_name() {
            match self.entity_type.take() {
                ::std::option::Option::Some(entity_type::Entity_type::PodName(v)) => v,
                _ => panic!(),
            }
        } else {
            PodName::new()
        }
    }

    // .bitdrift_public.protobuf.pulse.v1.Namespace namespace = 4;

    pub fn namespace(&self) -> &Namespace {
        match self.entity_type {
            ::std::option::Option::Some(entity_type::Entity_type::Namespace(ref v)) => v,
            _ => <Namespace as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_namespace(&mut self) {
        self.entity_type = ::std::option::Option::None;
    }

    pub fn has_namespace(&self) -> bool {
        match self.entity_type {
            ::std::option::Option::Some(entity_type::Entity_type::Namespace(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_namespace(&mut self, v: Namespace) {
        self.entity_type = ::std::option::Option::Some(entity_type::Entity_type::Namespace(v))
    }

    // Mutable pointer to the field.
    pub fn mut_namespace(&mut self) -> &mut Namespace {
        if let ::std::option::Option::Some(entity_type::Entity_type::Namespace(_)) = self.entity_type {
        } else {
            self.entity_type = ::std::option::Option::Some(entity_type::Entity_type::Namespace(Namespace::new()));
        }
        match self.entity_type {
            ::std::option::Option::Some(entity_type::Entity_type::Namespace(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_namespace(&mut self) -> Namespace {
        if self.has_namespace() {
            match self.entity_type.take() {
                ::std::option::Option::Some(entity_type::Entity_type::Namespace(v)) => v,
                _ => panic!(),
            }
        } else {
            Namespace::new()
        }
    }

    // .bitdrift_public.protobuf.pulse.v1.Service service = 5;

    pub fn service(&self) -> &Service {
        match self.entity_type {
            ::std::option::Option::Some(entity_type::Entity_type::Service(ref v)) => v,
            _ => <Service as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_service(&mut self) {
        self.entity_type = ::std::option::Option::None;
    }

    pub fn has_service(&self) -> bool {
        match self.entity_type {
            ::std::option::Option::Some(entity_type::Entity_type::Service(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_service(&mut self, v: Service) {
        self.entity_type = ::std::option::Option::Some(entity_type::Entity_type::Service(v))
    }

    // Mutable pointer to the field.
    pub fn mut_service(&mut self) -> &mut Service {
        if let ::std::option::Option::Some(entity_type::Entity_type::Service(_)) = self.entity_type {
        } else {
            self.entity_type = ::std::option::Option::Some(entity_type::Entity_type::Service(Service::new()));
        }
        match self.entity_type {
            ::std::option::Option::Some(entity_type::Entity_type::Service(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_service(&mut self) -> Service {
        if self.has_service() {
            match self.entity_type.take() {
                ::std::option::Option::Some(entity_type::Entity_type::Service(v)) => v,
                _ => panic!(),
            }
        } else {
            Service::new()
        }
    }

    // .bitdrift_public.protobuf.pulse.v1.UserProvided user_provided = 6;

    pub fn user_provided(&self) -> &UserProvided {
        match self.entity_type {
            ::std::option::Option::Some(entity_type::Entity_type::UserProvided(ref v)) => v,
            _ => <UserProvided as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_user_provided(&mut self) {
        self.entity_type = ::std::option::Option::None;
    }

    pub fn has_user_provided(&self) -> bool {
        match self.entity_type {
            ::std::option::Option::Some(entity_type::Entity_type::UserProvided(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_user_provided(&mut self, v: UserProvided) {
        self.entity_type = ::std::option::Option::Some(entity_type::Entity_type::UserProvided(v))
    }

    // Mutable pointer to the field.
    pub fn mut_user_provided(&mut self) -> &mut UserProvided {
        if let ::std::option::Option::Some(entity_type::Entity_type::UserProvided(_)) = self.entity_type {
        } else {
            self.entity_type = ::std::option::Option::Some(entity_type::Entity_type::UserProvided(UserProvided::new()));
        }
        match self.entity_type {
            ::std::option::Option::Some(entity_type::Entity_type::UserProvided(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_user_provided(&mut self) -> UserProvided {
        if self.has_user_provided() {
            match self.entity_type.take() {
                ::std::option::Option::Some(entity_type::Entity_type::UserProvided(v)) => v,
                _ => panic!(),
            }
        } else {
            UserProvided::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Kubelet>(
            "kubelet",
            EntityType::has_kubelet,
            EntityType::kubelet,
            EntityType::mut_kubelet,
            EntityType::set_kubelet,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Deployment>(
            "deployment",
            EntityType::has_deployment,
            EntityType::deployment,
            EntityType::mut_deployment,
            EntityType::set_deployment,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, PodName>(
            "pod_name",
            EntityType::has_pod_name,
            EntityType::pod_name,
            EntityType::mut_pod_name,
            EntityType::set_pod_name,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Namespace>(
            "namespace",
            EntityType::has_namespace,
            EntityType::namespace,
            EntityType::mut_namespace,
            EntityType::set_namespace,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Service>(
            "service",
            EntityType::has_service,
            EntityType::service,
            EntityType::mut_service,
            EntityType::set_service,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, UserProvided>(
            "user_provided",
            EntityType::has_user_provided,
            EntityType::user_provided,
            EntityType::mut_user_provided,
            EntityType::set_user_provided,
        ));
        oneofs.push(entity_type::Entity_type::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EntityType>(
            "EntityType",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EntityType {
    const NAME: &'static str = "EntityType";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.entity_type = ::std::option::Option::Some(entity_type::Entity_type::Kubelet(is.read_message()?));
                },
                18 => {
                    self.entity_type = ::std::option::Option::Some(entity_type::Entity_type::Deployment(is.read_message()?));
                },
                26 => {
                    self.entity_type = ::std::option::Option::Some(entity_type::Entity_type::PodName(is.read_message()?));
                },
                34 => {
                    self.entity_type = ::std::option::Option::Some(entity_type::Entity_type::Namespace(is.read_message()?));
                },
                42 => {
                    self.entity_type = ::std::option::Option::Some(entity_type::Entity_type::Service(is.read_message()?));
                },
                50 => {
                    self.entity_type = ::std::option::Option::Some(entity_type::Entity_type::UserProvided(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.entity_type {
            match v {
                &entity_type::Entity_type::Kubelet(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &entity_type::Entity_type::Deployment(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &entity_type::Entity_type::PodName(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &entity_type::Entity_type::Namespace(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &entity_type::Entity_type::Service(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &entity_type::Entity_type::UserProvided(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.entity_type {
            match v {
                &entity_type::Entity_type::Kubelet(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &entity_type::Entity_type::Deployment(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &entity_type::Entity_type::PodName(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &entity_type::Entity_type::Namespace(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &entity_type::Entity_type::Service(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &entity_type::Entity_type::UserProvided(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EntityType {
        EntityType::new()
    }

    fn clear(&mut self) {
        self.entity_type = ::std::option::Option::None;
        self.entity_type = ::std::option::Option::None;
        self.entity_type = ::std::option::Option::None;
        self.entity_type = ::std::option::Option::None;
        self.entity_type = ::std::option::Option::None;
        self.entity_type = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EntityType {
        static instance: EntityType = EntityType {
            entity_type: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EntityType {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EntityType").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EntityType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EntityType {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `EntityType`
pub mod entity_type {

    #[derive(Clone,PartialEq,Debug)]
    // @@protoc_insertion_point(oneof:bitdrift_public.protobuf.pulse.v1.EntityType.entity_type)
    pub enum Entity_type {
        // @@protoc_insertion_point(oneof_field:bitdrift_public.protobuf.pulse.v1.EntityType.kubelet)
        Kubelet(super::Kubelet),
        // @@protoc_insertion_point(oneof_field:bitdrift_public.protobuf.pulse.v1.EntityType.deployment)
        Deployment(super::Deployment),
        // @@protoc_insertion_point(oneof_field:bitdrift_public.protobuf.pulse.v1.EntityType.pod_name)
        PodName(super::PodName),
        // @@protoc_insertion_point(oneof_field:bitdrift_public.protobuf.pulse.v1.EntityType.namespace)
        Namespace(super::Namespace),
        // @@protoc_insertion_point(oneof_field:bitdrift_public.protobuf.pulse.v1.EntityType.service)
        Service(super::Service),
        // @@protoc_insertion_point(oneof_field:bitdrift_public.protobuf.pulse.v1.EntityType.user_provided)
        UserProvided(super::UserProvided),
    }

    impl ::protobuf::Oneof for Entity_type {
    }

    impl ::protobuf::OneofFull for Entity_type {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::EntityType as ::protobuf::MessageFull>::descriptor().oneof_by_name("entity_type").unwrap()).clone()
        }
    }

    impl Entity_type {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Entity_type>("entity_type")
        }
    }
}

// @@protoc_insertion_point(message:bitdrift_public.protobuf.pulse.v1.ExtraMetadata)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ExtraMetadata {
    // message fields
    // @@protoc_insertion_point(field:bitdrift_public.protobuf.pulse.v1.ExtraMetadata.items)
    pub items: ::std::vec::Vec<Metadata>,
    // special fields
    // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.pulse.v1.ExtraMetadata.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ExtraMetadata {
    fn default() -> &'a ExtraMetadata {
        <ExtraMetadata as ::protobuf::Message>::default_instance()
    }
}

impl ExtraMetadata {
    pub fn new() -> ExtraMetadata {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "items",
            |m: &ExtraMetadata| { &m.items },
            |m: &mut ExtraMetadata| { &mut m.items },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ExtraMetadata>(
            "ExtraMetadata",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ExtraMetadata {
    const NAME: &'static str = "ExtraMetadata";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.items.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.items {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.items {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ExtraMetadata {
        ExtraMetadata::new()
    }

    fn clear(&mut self) {
        self.items.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ExtraMetadata {
        static instance: ExtraMetadata = ExtraMetadata {
            items: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ExtraMetadata {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ExtraMetadata").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ExtraMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExtraMetadata {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:bitdrift_public.protobuf.pulse.v1.Metadata)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Metadata {
    // message fields
    // @@protoc_insertion_point(field:bitdrift_public.protobuf.pulse.v1.Metadata.value)
    pub value: ::protobuf::Chars,
    // @@protoc_insertion_point(field:bitdrift_public.protobuf.pulse.v1.Metadata.metadata_type)
    pub metadata_type: ::protobuf::MessageField<EntityType>,
    // @@protoc_insertion_point(field:bitdrift_public.protobuf.pulse.v1.Metadata.annotations)
    pub annotations: ::std::vec::Vec<metadata::Annotation>,
    // special fields
    // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.pulse.v1.Metadata.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Metadata {
    fn default() -> &'a Metadata {
        <Metadata as ::protobuf::Message>::default_instance()
    }
}

impl Metadata {
    pub fn new() -> Metadata {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &Metadata| { &m.value },
            |m: &mut Metadata| { &mut m.value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, EntityType>(
            "metadata_type",
            |m: &Metadata| { &m.metadata_type },
            |m: &mut Metadata| { &mut m.metadata_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "annotations",
            |m: &Metadata| { &m.annotations },
            |m: &mut Metadata| { &mut m.annotations },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Metadata>(
            "Metadata",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Metadata {
    const NAME: &'static str = "Metadata";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    self.value = is.read_tokio_chars()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata_type)?;
                },
                34 => {
                    self.annotations.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.value);
        }
        if let Some(v) = self.metadata_type.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.annotations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.value.is_empty() {
            os.write_string(2, &self.value)?;
        }
        if let Some(v) = self.metadata_type.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        for v in &self.annotations {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Metadata {
        Metadata::new()
    }

    fn clear(&mut self) {
        self.value.clear();
        self.metadata_type.clear();
        self.annotations.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Metadata {
        static instance: Metadata = Metadata {
            value: ::protobuf::Chars::new(),
            metadata_type: ::protobuf::MessageField::none(),
            annotations: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Metadata {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Metadata").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Metadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Metadata {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Metadata`
pub mod metadata {
    // @@protoc_insertion_point(message:bitdrift_public.protobuf.pulse.v1.Metadata.Annotation)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Annotation {
        // message fields
        // @@protoc_insertion_point(field:bitdrift_public.protobuf.pulse.v1.Metadata.Annotation.key)
        pub key: ::protobuf::Chars,
        // @@protoc_insertion_point(field:bitdrift_public.protobuf.pulse.v1.Metadata.Annotation.value)
        pub value: ::protobuf::Chars,
        // special fields
        // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.pulse.v1.Metadata.Annotation.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Annotation {
        fn default() -> &'a Annotation {
            <Annotation as ::protobuf::Message>::default_instance()
        }
    }

    impl Annotation {
        pub fn new() -> Annotation {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "key",
                |m: &Annotation| { &m.key },
                |m: &mut Annotation| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "value",
                |m: &Annotation| { &m.value },
                |m: &mut Annotation| { &mut m.value },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Annotation>(
                "Metadata.Annotation",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Annotation {
        const NAME: &'static str = "Annotation";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.key = is.read_tokio_chars()?;
                    },
                    18 => {
                        self.value = is.read_tokio_chars()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.key.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.key);
            }
            if !self.value.is_empty() {
                my_size += ::protobuf::rt::string_size(2, &self.value);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.key.is_empty() {
                os.write_string(1, &self.key)?;
            }
            if !self.value.is_empty() {
                os.write_string(2, &self.value)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Annotation {
            Annotation::new()
        }

        fn clear(&mut self) {
            self.key.clear();
            self.value.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Annotation {
            static instance: Annotation = Annotation {
                key: ::protobuf::Chars::new(),
                value: ::protobuf::Chars::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Annotation {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Metadata.Annotation").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Annotation {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Annotation {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:bitdrift_public.protobuf.pulse.v1.LoggingObservations)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct LoggingObservations {
    // message fields
    // @@protoc_insertion_point(field:bitdrift_public.protobuf.pulse.v1.LoggingObservations.observations)
    pub observations: ::std::vec::Vec<LoggingObservation>,
    // special fields
    // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.pulse.v1.LoggingObservations.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LoggingObservations {
    fn default() -> &'a LoggingObservations {
        <LoggingObservations as ::protobuf::Message>::default_instance()
    }
}

impl LoggingObservations {
    pub fn new() -> LoggingObservations {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "observations",
            |m: &LoggingObservations| { &m.observations },
            |m: &mut LoggingObservations| { &mut m.observations },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LoggingObservations>(
            "LoggingObservations",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LoggingObservations {
    const NAME: &'static str = "LoggingObservations";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.observations.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.observations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.observations {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LoggingObservations {
        LoggingObservations::new()
    }

    fn clear(&mut self) {
        self.observations.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LoggingObservations {
        static instance: LoggingObservations = LoggingObservations {
            observations: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LoggingObservations {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LoggingObservations").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LoggingObservations {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LoggingObservations {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:bitdrift_public.protobuf.pulse.v1.LoggingObservation)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct LoggingObservation {
    // message fields
    // @@protoc_insertion_point(field:bitdrift_public.protobuf.pulse.v1.LoggingObservation.delta_count)
    pub delta_count: u64,
    // @@protoc_insertion_point(field:bitdrift_public.protobuf.pulse.v1.LoggingObservation.delta_byte_count)
    pub delta_byte_count: u64,
    // message oneof groups
    pub additional_metadata: ::std::option::Option<logging_observation::Additional_metadata>,
    // special fields
    // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.pulse.v1.LoggingObservation.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LoggingObservation {
    fn default() -> &'a LoggingObservation {
        <LoggingObservation as ::protobuf::Message>::default_instance()
    }
}

impl LoggingObservation {
    pub fn new() -> LoggingObservation {
        ::std::default::Default::default()
    }

    // .bitdrift_public.protobuf.pulse.v1.ExtraMetadata metadata = 3;

    pub fn metadata(&self) -> &ExtraMetadata {
        match self.additional_metadata {
            ::std::option::Option::Some(logging_observation::Additional_metadata::Metadata(ref v)) => v,
            _ => <ExtraMetadata as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_metadata(&mut self) {
        self.additional_metadata = ::std::option::Option::None;
    }

    pub fn has_metadata(&self) -> bool {
        match self.additional_metadata {
            ::std::option::Option::Some(logging_observation::Additional_metadata::Metadata(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: ExtraMetadata) {
        self.additional_metadata = ::std::option::Option::Some(logging_observation::Additional_metadata::Metadata(v))
    }

    // Mutable pointer to the field.
    pub fn mut_metadata(&mut self) -> &mut ExtraMetadata {
        if let ::std::option::Option::Some(logging_observation::Additional_metadata::Metadata(_)) = self.additional_metadata {
        } else {
            self.additional_metadata = ::std::option::Option::Some(logging_observation::Additional_metadata::Metadata(ExtraMetadata::new()));
        }
        match self.additional_metadata {
            ::std::option::Option::Some(logging_observation::Additional_metadata::Metadata(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_metadata(&mut self) -> ExtraMetadata {
        if self.has_metadata() {
            match self.additional_metadata.take() {
                ::std::option::Option::Some(logging_observation::Additional_metadata::Metadata(v)) => v,
                _ => panic!(),
            }
        } else {
            ExtraMetadata::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "delta_count",
            |m: &LoggingObservation| { &m.delta_count },
            |m: &mut LoggingObservation| { &mut m.delta_count },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "delta_byte_count",
            |m: &LoggingObservation| { &m.delta_byte_count },
            |m: &mut LoggingObservation| { &mut m.delta_byte_count },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ExtraMetadata>(
            "metadata",
            LoggingObservation::has_metadata,
            LoggingObservation::metadata,
            LoggingObservation::mut_metadata,
            LoggingObservation::set_metadata,
        ));
        oneofs.push(logging_observation::Additional_metadata::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LoggingObservation>(
            "LoggingObservation",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LoggingObservation {
    const NAME: &'static str = "LoggingObservation";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.delta_count = is.read_uint64()?;
                },
                16 => {
                    self.delta_byte_count = is.read_uint64()?;
                },
                26 => {
                    self.additional_metadata = ::std::option::Option::Some(logging_observation::Additional_metadata::Metadata(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.delta_count != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.delta_count);
        }
        if self.delta_byte_count != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.delta_byte_count);
        }
        if let ::std::option::Option::Some(ref v) = self.additional_metadata {
            match v {
                &logging_observation::Additional_metadata::Metadata(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.delta_count != 0 {
            os.write_uint64(1, self.delta_count)?;
        }
        if self.delta_byte_count != 0 {
            os.write_uint64(2, self.delta_byte_count)?;
        }
        if let ::std::option::Option::Some(ref v) = self.additional_metadata {
            match v {
                &logging_observation::Additional_metadata::Metadata(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LoggingObservation {
        LoggingObservation::new()
    }

    fn clear(&mut self) {
        self.delta_count = 0;
        self.delta_byte_count = 0;
        self.additional_metadata = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LoggingObservation {
        static instance: LoggingObservation = LoggingObservation {
            delta_count: 0,
            delta_byte_count: 0,
            additional_metadata: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LoggingObservation {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LoggingObservation").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LoggingObservation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LoggingObservation {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `LoggingObservation`
pub mod logging_observation {

    #[derive(Clone,PartialEq,Debug)]
    // @@protoc_insertion_point(oneof:bitdrift_public.protobuf.pulse.v1.LoggingObservation.additional_metadata)
    pub enum Additional_metadata {
        // @@protoc_insertion_point(oneof_field:bitdrift_public.protobuf.pulse.v1.LoggingObservation.metadata)
        Metadata(super::ExtraMetadata),
    }

    impl ::protobuf::Oneof for Additional_metadata {
    }

    impl ::protobuf::OneofFull for Additional_metadata {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::LoggingObservation as ::protobuf::MessageFull>::descriptor().oneof_by_name("additional_metadata").unwrap()).clone()
        }
    }

    impl Additional_metadata {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Additional_metadata>("additional_metadata")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n-bitdrift_public/protobuf/pulse/v1/pulse.proto\x12!bitdrift_public.pro\
    tobuf.pulse.v1\x1a\x17validate/validate.proto\"\t\n\x07Kubelet\"\t\n\x07\
    PodName\"\x0b\n\tNamespace\"\t\n\x07Service\"\x0c\n\nDeployment\"\"\n\
    \x0cUserProvided\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\"\xf0\x03\
    \n\nEntityType\x12F\n\x07kubelet\x18\x01\x20\x01(\x0b2*.bitdrift_public.\
    protobuf.pulse.v1.KubeletH\0R\x07kubelet\x12O\n\ndeployment\x18\x02\x20\
    \x01(\x0b2-.bitdrift_public.protobuf.pulse.v1.DeploymentH\0R\ndeployment\
    \x12G\n\x08pod_name\x18\x03\x20\x01(\x0b2*.bitdrift_public.protobuf.puls\
    e.v1.PodNameH\0R\x07podName\x12L\n\tnamespace\x18\x04\x20\x01(\x0b2,.bit\
    drift_public.protobuf.pulse.v1.NamespaceH\0R\tnamespace\x12F\n\x07servic\
    e\x18\x05\x20\x01(\x0b2*.bitdrift_public.protobuf.pulse.v1.ServiceH\0R\
    \x07service\x12V\n\ruser_provided\x18\x06\x20\x01(\x0b2/.bitdrift_public\
    .protobuf.pulse.v1.UserProvidedH\0R\x0cuserProvidedB\x12\n\x0bentity_typ\
    e\x12\x03\xf8B\x01\"R\n\rExtraMetadata\x12A\n\x05items\x18\x01\x20\x03(\
    \x0b2+.bitdrift_public.protobuf.pulse.v1.MetadataR\x05items\"\x84\x02\n\
    \x08Metadata\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value\x12R\n\rmet\
    adata_type\x18\x03\x20\x01(\x0b2-.bitdrift_public.protobuf.pulse.v1.Enti\
    tyTypeR\x0cmetadataType\x12X\n\x0bannotations\x18\x04\x20\x03(\x0b26.bit\
    drift_public.protobuf.pulse.v1.Metadata.AnnotationR\x0bannotations\x1a4\
    \n\nAnnotation\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05\
    value\x18\x02\x20\x01(\tR\x05value\"p\n\x13LoggingObservations\x12Y\n\
    \x0cobservations\x18\x01\x20\x03(\x0b25.bitdrift_public.protobuf.pulse.v\
    1.LoggingObservationR\x0cobservations\"\xcb\x01\n\x12LoggingObservation\
    \x12\x1f\n\x0bdelta_count\x18\x01\x20\x01(\x04R\ndeltaCount\x12(\n\x10de\
    lta_byte_count\x18\x02\x20\x01(\x04R\x0edeltaByteCount\x12N\n\x08metadat\
    a\x18\x03\x20\x01(\x0b20.bitdrift_public.protobuf.pulse.v1.ExtraMetadata\
    H\0R\x08metadataB\x1a\n\x13additional_metadata\x12\x03\xf8B\x01b\x06prot\
    o3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::validate::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(12);
            messages.push(Kubelet::generated_message_descriptor_data());
            messages.push(PodName::generated_message_descriptor_data());
            messages.push(Namespace::generated_message_descriptor_data());
            messages.push(Service::generated_message_descriptor_data());
            messages.push(Deployment::generated_message_descriptor_data());
            messages.push(UserProvided::generated_message_descriptor_data());
            messages.push(EntityType::generated_message_descriptor_data());
            messages.push(ExtraMetadata::generated_message_descriptor_data());
            messages.push(Metadata::generated_message_descriptor_data());
            messages.push(LoggingObservations::generated_message_descriptor_data());
            messages.push(LoggingObservation::generated_message_descriptor_data());
            messages.push(metadata::Annotation::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
