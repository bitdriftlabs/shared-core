// proto - bitdrift's client/server API definitions
// Copyright Bitdrift, Inc. All rights reserved.
//
// Use of this source code and APIs are governed by a source available license that can be found in
// the LICENSE file or at:
// https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt

// This file is generated by rust-protobuf 4.0.0-alpha.0. Do not edit
// .proto file is parsed by protoc 27.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `bitdrift_public/protobuf/filter/v1/filter.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_4_0_0_ALPHA_0;

// @@protoc_insertion_point(message:bitdrift_public.protobuf.filter.v1.FiltersConfiguration)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct FiltersConfiguration {
    // message fields
    // @@protoc_insertion_point(field:bitdrift_public.protobuf.filter.v1.FiltersConfiguration.filters)
    pub filters: ::std::vec::Vec<Filter>,
    // special fields
    // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.filter.v1.FiltersConfiguration.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FiltersConfiguration {
    fn default() -> &'a FiltersConfiguration {
        <FiltersConfiguration as ::protobuf::Message>::default_instance()
    }
}

impl FiltersConfiguration {
    pub fn new() -> FiltersConfiguration {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "filters",
            |m: &FiltersConfiguration| { &m.filters },
            |m: &mut FiltersConfiguration| { &mut m.filters },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FiltersConfiguration>(
            "FiltersConfiguration",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FiltersConfiguration {
    const NAME: &'static str = "FiltersConfiguration";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.filters.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.filters {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.filters {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FiltersConfiguration {
        FiltersConfiguration::new()
    }

    fn clear(&mut self) {
        self.filters.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FiltersConfiguration {
        static instance: FiltersConfiguration = FiltersConfiguration {
            filters: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FiltersConfiguration {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FiltersConfiguration").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FiltersConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FiltersConfiguration {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:bitdrift_public.protobuf.filter.v1.Filter)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Filter {
    // message fields
    // @@protoc_insertion_point(field:bitdrift_public.protobuf.filter.v1.Filter.matcher)
    pub matcher: ::protobuf::MessageField<super::log_matcher::LogMatcher>,
    // @@protoc_insertion_point(field:bitdrift_public.protobuf.filter.v1.Filter.transforms)
    pub transforms: ::std::vec::Vec<filter::Transform>,
    // special fields
    // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.filter.v1.Filter.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Filter {
    fn default() -> &'a Filter {
        <Filter as ::protobuf::Message>::default_instance()
    }
}

impl Filter {
    pub fn new() -> Filter {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::log_matcher::LogMatcher>(
            "matcher",
            |m: &Filter| { &m.matcher },
            |m: &mut Filter| { &mut m.matcher },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "transforms",
            |m: &Filter| { &m.transforms },
            |m: &mut Filter| { &mut m.transforms },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Filter>(
            "Filter",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Filter {
    const NAME: &'static str = "Filter";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.matcher)?;
                },
                18 => {
                    self.transforms.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.matcher.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.transforms {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.matcher.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.transforms {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Filter {
        Filter::new()
    }

    fn clear(&mut self) {
        self.matcher.clear();
        self.transforms.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Filter {
        static instance: Filter = Filter {
            matcher: ::protobuf::MessageField::none(),
            transforms: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Filter {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Filter").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Filter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Filter {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Filter`
pub mod filter {
    // @@protoc_insertion_point(message:bitdrift_public.protobuf.filter.v1.Filter.Transform)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Transform {
        // message oneof groups
        pub transform_type: ::std::option::Option<transform::Transform_type>,
        // special fields
        // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.filter.v1.Filter.Transform.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Transform {
        fn default() -> &'a Transform {
            <Transform as ::protobuf::Message>::default_instance()
        }
    }

    impl Transform {
        pub fn new() -> Transform {
            ::std::default::Default::default()
        }

        // .bitdrift_public.protobuf.filter.v1.Filter.Transform.CaptureFields capture_fields = 1;

        pub fn capture_fields(&self) -> &transform::CaptureFields {
            match self.transform_type {
                ::std::option::Option::Some(transform::Transform_type::CaptureFields(ref v)) => v,
                _ => <transform::CaptureFields as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_capture_fields(&mut self) {
            self.transform_type = ::std::option::Option::None;
        }

        pub fn has_capture_fields(&self) -> bool {
            match self.transform_type {
                ::std::option::Option::Some(transform::Transform_type::CaptureFields(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_capture_fields(&mut self, v: transform::CaptureFields) {
            self.transform_type = ::std::option::Option::Some(transform::Transform_type::CaptureFields(v))
        }

        // Mutable pointer to the field.
        pub fn mut_capture_fields(&mut self) -> &mut transform::CaptureFields {
            if let ::std::option::Option::Some(transform::Transform_type::CaptureFields(_)) = self.transform_type {
            } else {
                self.transform_type = ::std::option::Option::Some(transform::Transform_type::CaptureFields(transform::CaptureFields::new()));
            }
            match self.transform_type {
                ::std::option::Option::Some(transform::Transform_type::CaptureFields(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_capture_fields(&mut self) -> transform::CaptureFields {
            if self.has_capture_fields() {
                match self.transform_type.take() {
                    ::std::option::Option::Some(transform::Transform_type::CaptureFields(v)) => v,
                    _ => panic!(),
                }
            } else {
                transform::CaptureFields::new()
            }
        }

        // .bitdrift_public.protobuf.filter.v1.Filter.Transform.SetField set_field = 2;

        pub fn set_field(&self) -> &transform::SetField {
            match self.transform_type {
                ::std::option::Option::Some(transform::Transform_type::SetField(ref v)) => v,
                _ => <transform::SetField as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_set_field(&mut self) {
            self.transform_type = ::std::option::Option::None;
        }

        pub fn has_set_field(&self) -> bool {
            match self.transform_type {
                ::std::option::Option::Some(transform::Transform_type::SetField(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_set_field(&mut self, v: transform::SetField) {
            self.transform_type = ::std::option::Option::Some(transform::Transform_type::SetField(v))
        }

        // Mutable pointer to the field.
        pub fn mut_set_field(&mut self) -> &mut transform::SetField {
            if let ::std::option::Option::Some(transform::Transform_type::SetField(_)) = self.transform_type {
            } else {
                self.transform_type = ::std::option::Option::Some(transform::Transform_type::SetField(transform::SetField::new()));
            }
            match self.transform_type {
                ::std::option::Option::Some(transform::Transform_type::SetField(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_set_field(&mut self) -> transform::SetField {
            if self.has_set_field() {
                match self.transform_type.take() {
                    ::std::option::Option::Some(transform::Transform_type::SetField(v)) => v,
                    _ => panic!(),
                }
            } else {
                transform::SetField::new()
            }
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(1);
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, transform::CaptureFields>(
                "capture_fields",
                Transform::has_capture_fields,
                Transform::capture_fields,
                Transform::mut_capture_fields,
                Transform::set_capture_fields,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, transform::SetField>(
                "set_field",
                Transform::has_set_field,
                Transform::set_field,
                Transform::mut_set_field,
                Transform::set_set_field,
            ));
            oneofs.push(transform::Transform_type::generated_oneof_descriptor_data());
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Transform>(
                "Filter.Transform",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Transform {
        const NAME: &'static str = "Transform";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.transform_type = ::std::option::Option::Some(transform::Transform_type::CaptureFields(is.read_message()?));
                    },
                    18 => {
                        self.transform_type = ::std::option::Option::Some(transform::Transform_type::SetField(is.read_message()?));
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let ::std::option::Option::Some(ref v) = self.transform_type {
                match v {
                    &transform::Transform_type::CaptureFields(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                    &transform::Transform_type::SetField(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                };
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let ::std::option::Option::Some(ref v) = self.transform_type {
                match v {
                    &transform::Transform_type::CaptureFields(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                    },
                    &transform::Transform_type::SetField(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                    },
                };
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Transform {
            Transform::new()
        }

        fn clear(&mut self) {
            self.transform_type = ::std::option::Option::None;
            self.transform_type = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Transform {
            static instance: Transform = Transform {
                transform_type: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Transform {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Filter.Transform").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Transform {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Transform {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `Transform`
    pub mod transform {

        #[derive(Clone,PartialEq,Debug)]
        // @@protoc_insertion_point(oneof:bitdrift_public.protobuf.filter.v1.Filter.Transform.transform_type)
        pub enum Transform_type {
            // @@protoc_insertion_point(oneof_field:bitdrift_public.protobuf.filter.v1.Filter.Transform.capture_fields)
            CaptureFields(CaptureFields),
            // @@protoc_insertion_point(oneof_field:bitdrift_public.protobuf.filter.v1.Filter.Transform.set_field)
            SetField(SetField),
        }

        impl ::protobuf::Oneof for Transform_type {
        }

        impl ::protobuf::OneofFull for Transform_type {
            fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| <super::Transform as ::protobuf::MessageFull>::descriptor().oneof_by_name("transform_type").unwrap()).clone()
            }
        }

        impl Transform_type {
            pub(in super::super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
                ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Transform_type>("transform_type")
            }
        }
        // @@protoc_insertion_point(message:bitdrift_public.protobuf.filter.v1.Filter.Transform.CaptureFields)
        #[derive(PartialEq,Clone,Default,Debug)]
        pub struct CaptureFields {
            // message fields
            // @@protoc_insertion_point(field:bitdrift_public.protobuf.filter.v1.Filter.Transform.CaptureFields.fields)
            pub fields: ::protobuf::MessageField<capture_fields::Fields>,
            // special fields
            // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.filter.v1.Filter.Transform.CaptureFields.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a CaptureFields {
            fn default() -> &'a CaptureFields {
                <CaptureFields as ::protobuf::Message>::default_instance()
            }
        }

        impl CaptureFields {
            pub fn new() -> CaptureFields {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(1);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, capture_fields::Fields>(
                    "fields",
                    |m: &CaptureFields| { &m.fields },
                    |m: &mut CaptureFields| { &mut m.fields },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CaptureFields>(
                    "Filter.Transform.CaptureFields",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for CaptureFields {
            const NAME: &'static str = "CaptureFields";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        18 => {
                            ::protobuf::rt::read_singular_message_into_field(is, &mut self.fields)?;
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if let Some(v) = self.fields.as_ref() {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if let Some(v) = self.fields.as_ref() {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> CaptureFields {
                CaptureFields::new()
            }

            fn clear(&mut self) {
                self.fields.clear();
                self.special_fields.clear();
            }

            fn default_instance() -> &'static CaptureFields {
                static instance: CaptureFields = CaptureFields {
                    fields: ::protobuf::MessageField::none(),
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for CaptureFields {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("Filter.Transform.CaptureFields").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for CaptureFields {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for CaptureFields {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }

        /// Nested message and enums of message `CaptureFields`
        pub mod capture_fields {
            // @@protoc_insertion_point(message:bitdrift_public.protobuf.filter.v1.Filter.Transform.CaptureFields.Fields)
            #[derive(PartialEq,Clone,Default,Debug)]
            pub struct Fields {
                // message oneof groups
                pub fields_type: ::std::option::Option<fields::Fields_type>,
                // special fields
                // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.filter.v1.Filter.Transform.CaptureFields.Fields.special_fields)
                pub special_fields: ::protobuf::SpecialFields,
            }

            impl<'a> ::std::default::Default for &'a Fields {
                fn default() -> &'a Fields {
                    <Fields as ::protobuf::Message>::default_instance()
                }
            }

            impl Fields {
                pub fn new() -> Fields {
                    ::std::default::Default::default()
                }

                // .bitdrift_public.protobuf.filter.v1.Filter.Transform.CaptureFields.Fields.SingleField single = 1;

                pub fn single(&self) -> &fields::SingleField {
                    match self.fields_type {
                        ::std::option::Option::Some(fields::Fields_type::Single(ref v)) => v,
                        _ => <fields::SingleField as ::protobuf::Message>::default_instance(),
                    }
                }

                pub fn clear_single(&mut self) {
                    self.fields_type = ::std::option::Option::None;
                }

                pub fn has_single(&self) -> bool {
                    match self.fields_type {
                        ::std::option::Option::Some(fields::Fields_type::Single(..)) => true,
                        _ => false,
                    }
                }

                // Param is passed by value, moved
                pub fn set_single(&mut self, v: fields::SingleField) {
                    self.fields_type = ::std::option::Option::Some(fields::Fields_type::Single(v))
                }

                // Mutable pointer to the field.
                pub fn mut_single(&mut self) -> &mut fields::SingleField {
                    if let ::std::option::Option::Some(fields::Fields_type::Single(_)) = self.fields_type {
                    } else {
                        self.fields_type = ::std::option::Option::Some(fields::Fields_type::Single(fields::SingleField::new()));
                    }
                    match self.fields_type {
                        ::std::option::Option::Some(fields::Fields_type::Single(ref mut v)) => v,
                        _ => panic!(),
                    }
                }

                // Take field
                pub fn take_single(&mut self) -> fields::SingleField {
                    if self.has_single() {
                        match self.fields_type.take() {
                            ::std::option::Option::Some(fields::Fields_type::Single(v)) => v,
                            _ => panic!(),
                        }
                    } else {
                        fields::SingleField::new()
                    }
                }

                pub(in super::super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                    let mut fields = ::std::vec::Vec::with_capacity(1);
                    let mut oneofs = ::std::vec::Vec::with_capacity(1);
                    fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, fields::SingleField>(
                        "single",
                        Fields::has_single,
                        Fields::single,
                        Fields::mut_single,
                        Fields::set_single,
                    ));
                    oneofs.push(fields::Fields_type::generated_oneof_descriptor_data());
                    ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Fields>(
                        "Filter.Transform.CaptureFields.Fields",
                        fields,
                        oneofs,
                    )
                }
            }

            impl ::protobuf::Message for Fields {
                const NAME: &'static str = "Fields";

                fn is_initialized(&self) -> bool {
                    true
                }

                fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => {
                                self.fields_type = ::std::option::Option::Some(fields::Fields_type::Single(is.read_message()?));
                            },
                            tag => {
                                ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                            },
                        };
                    }
                    ::std::result::Result::Ok(())
                }

                // Compute sizes of nested messages
                #[allow(unused_variables)]
                fn compute_size(&self) -> u64 {
                    let mut my_size = 0;
                    if let ::std::option::Option::Some(ref v) = self.fields_type {
                        match v {
                            &fields::Fields_type::Single(ref v) => {
                                let len = v.compute_size();
                                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                            },
                        };
                    }
                    my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                    self.special_fields.cached_size().set(my_size as u32);
                    my_size
                }

                fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                    if let ::std::option::Option::Some(ref v) = self.fields_type {
                        match v {
                            &fields::Fields_type::Single(ref v) => {
                                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                            },
                        };
                    }
                    os.write_unknown_fields(self.special_fields.unknown_fields())?;
                    ::std::result::Result::Ok(())
                }

                fn special_fields(&self) -> &::protobuf::SpecialFields {
                    &self.special_fields
                }

                fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                    &mut self.special_fields
                }

                fn new() -> Fields {
                    Fields::new()
                }

                fn clear(&mut self) {
                    self.fields_type = ::std::option::Option::None;
                    self.special_fields.clear();
                }

                fn default_instance() -> &'static Fields {
                    static instance: Fields = Fields {
                        fields_type: ::std::option::Option::None,
                        special_fields: ::protobuf::SpecialFields::new(),
                    };
                    &instance
                }
            }

            impl ::protobuf::MessageFull for Fields {
                fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                    static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                    descriptor.get(|| super::super::super::file_descriptor().message_by_package_relative_name("Filter.Transform.CaptureFields.Fields").unwrap()).clone()
                }
            }

            impl ::std::fmt::Display for Fields {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    ::protobuf::text_format::fmt(self, f)
                }
            }

            impl ::protobuf::reflect::ProtobufValue for Fields {
                type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
            }

            /// Nested message and enums of message `Fields`
            pub mod fields {

                #[derive(Clone,PartialEq,Debug)]
                // @@protoc_insertion_point(oneof:bitdrift_public.protobuf.filter.v1.Filter.Transform.CaptureFields.Fields.fields_type)
                pub enum Fields_type {
                    // @@protoc_insertion_point(oneof_field:bitdrift_public.protobuf.filter.v1.Filter.Transform.CaptureFields.Fields.single)
                    Single(SingleField),
                }

                impl ::protobuf::Oneof for Fields_type {
                }

                impl ::protobuf::OneofFull for Fields_type {
                    fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
                        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
                        descriptor.get(|| <super::Fields as ::protobuf::MessageFull>::descriptor().oneof_by_name("fields_type").unwrap()).clone()
                    }
                }

                impl Fields_type {
                    pub(in super::super::super::super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
                        ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Fields_type>("fields_type")
                    }
                }
                // @@protoc_insertion_point(message:bitdrift_public.protobuf.filter.v1.Filter.Transform.CaptureFields.Fields.SingleField)
                #[derive(PartialEq,Clone,Default,Debug)]
                pub struct SingleField {
                    // message fields
                    // @@protoc_insertion_point(field:bitdrift_public.protobuf.filter.v1.Filter.Transform.CaptureFields.Fields.SingleField.name)
                    pub name: ::std::string::String,
                    // special fields
                    // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.filter.v1.Filter.Transform.CaptureFields.Fields.SingleField.special_fields)
                    pub special_fields: ::protobuf::SpecialFields,
                }

                impl<'a> ::std::default::Default for &'a SingleField {
                    fn default() -> &'a SingleField {
                        <SingleField as ::protobuf::Message>::default_instance()
                    }
                }

                impl SingleField {
                    pub fn new() -> SingleField {
                        ::std::default::Default::default()
                    }

                    pub(in super::super::super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                        let mut fields = ::std::vec::Vec::with_capacity(1);
                        let mut oneofs = ::std::vec::Vec::with_capacity(0);
                        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                            "name",
                            |m: &SingleField| { &m.name },
                            |m: &mut SingleField| { &mut m.name },
                        ));
                        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SingleField>(
                            "Filter.Transform.CaptureFields.Fields.SingleField",
                            fields,
                            oneofs,
                        )
                    }
                }

                impl ::protobuf::Message for SingleField {
                    const NAME: &'static str = "SingleField";

                    fn is_initialized(&self) -> bool {
                        true
                    }

                    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                        while let Some(tag) = is.read_raw_tag_or_eof()? {
                            match tag {
                                10 => {
                                    self.name = is.read_string()?;
                                },
                                tag => {
                                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                                },
                            };
                        }
                        ::std::result::Result::Ok(())
                    }

                    // Compute sizes of nested messages
                    #[allow(unused_variables)]
                    fn compute_size(&self) -> u64 {
                        let mut my_size = 0;
                        if !self.name.is_empty() {
                            my_size += ::protobuf::rt::string_size(1, &self.name);
                        }
                        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                        self.special_fields.cached_size().set(my_size as u32);
                        my_size
                    }

                    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                        if !self.name.is_empty() {
                            os.write_string(1, &self.name)?;
                        }
                        os.write_unknown_fields(self.special_fields.unknown_fields())?;
                        ::std::result::Result::Ok(())
                    }

                    fn special_fields(&self) -> &::protobuf::SpecialFields {
                        &self.special_fields
                    }

                    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                        &mut self.special_fields
                    }

                    fn new() -> SingleField {
                        SingleField::new()
                    }

                    fn clear(&mut self) {
                        self.name.clear();
                        self.special_fields.clear();
                    }

                    fn default_instance() -> &'static SingleField {
                        static instance: SingleField = SingleField {
                            name: ::std::string::String::new(),
                            special_fields: ::protobuf::SpecialFields::new(),
                        };
                        &instance
                    }
                }

                impl ::protobuf::MessageFull for SingleField {
                    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                        descriptor.get(|| super::super::super::super::file_descriptor().message_by_package_relative_name("Filter.Transform.CaptureFields.Fields.SingleField").unwrap()).clone()
                    }
                }

                impl ::std::fmt::Display for SingleField {
                    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        ::protobuf::text_format::fmt(self, f)
                    }
                }

                impl ::protobuf::reflect::ProtobufValue for SingleField {
                    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
                }
            }
        }

        // @@protoc_insertion_point(message:bitdrift_public.protobuf.filter.v1.Filter.Transform.SetField)
        #[derive(PartialEq,Clone,Default,Debug)]
        pub struct SetField {
            // message fields
            // @@protoc_insertion_point(field:bitdrift_public.protobuf.filter.v1.Filter.Transform.SetField.name)
            pub name: ::std::string::String,
            // @@protoc_insertion_point(field:bitdrift_public.protobuf.filter.v1.Filter.Transform.SetField.value)
            pub value: ::std::string::String,
            // special fields
            // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.filter.v1.Filter.Transform.SetField.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a SetField {
            fn default() -> &'a SetField {
                <SetField as ::protobuf::Message>::default_instance()
            }
        }

        impl SetField {
            pub fn new() -> SetField {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(2);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "name",
                    |m: &SetField| { &m.name },
                    |m: &mut SetField| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "value",
                    |m: &SetField| { &m.value },
                    |m: &mut SetField| { &mut m.value },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SetField>(
                    "Filter.Transform.SetField",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for SetField {
            const NAME: &'static str = "SetField";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        10 => {
                            self.name = is.read_string()?;
                        },
                        18 => {
                            self.value = is.read_string()?;
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if !self.name.is_empty() {
                    my_size += ::protobuf::rt::string_size(1, &self.name);
                }
                if !self.value.is_empty() {
                    my_size += ::protobuf::rt::string_size(2, &self.value);
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if !self.name.is_empty() {
                    os.write_string(1, &self.name)?;
                }
                if !self.value.is_empty() {
                    os.write_string(2, &self.value)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> SetField {
                SetField::new()
            }

            fn clear(&mut self) {
                self.name.clear();
                self.value.clear();
                self.special_fields.clear();
            }

            fn default_instance() -> &'static SetField {
                static instance: SetField = SetField {
                    name: ::std::string::String::new(),
                    value: ::std::string::String::new(),
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for SetField {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("Filter.Transform.SetField").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for SetField {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for SetField {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n/bitdrift_public/protobuf/filter/v1/filter.proto\x12\"bitdrift_public.\
    protobuf.filter.v1\x1a\x17validate/validate.proto\x1a5bitdrift_public/pr\
    otobuf/matcher/v1/log_matcher.proto\"\\\n\x14FiltersConfiguration\x12D\n\
    \x07filters\x18\x01\x20\x03(\x0b2*.bitdrift_public.protobuf.filter.v1.Fi\
    lterR\x07filters\"\xa6\x06\n\x06Filter\x12S\n\x07matcher\x18\x01\x20\x01\
    (\x0b2/.bitdrift_public.protobuf.matcher.v1.LogMatcherR\x07matcherB\x08\
    \xfaB\x05\x8a\x01\x02\x10\x01\x12^\n\ntransforms\x18\x02\x20\x03(\x0b24.\
    bitdrift_public.protobuf.filter.v1.Filter.TransformR\ntransformsB\x08\
    \xfaB\x05\x92\x01\x02\x08\x01\x1a\xe6\x04\n\tTransform\x12k\n\x0ecapture\
    _fields\x18\x01\x20\x01(\x0b2B.bitdrift_public.protobuf.filter.v1.Filter\
    .Transform.CaptureFieldsH\0R\rcaptureFields\x12\\\n\tset_field\x18\x02\
    \x20\x01(\x0b2=.bitdrift_public.protobuf.filter.v1.Filter.Transform.SetF\
    ieldH\0R\x08setField\x1a\xae\x02\n\rCaptureFields\x12a\n\x06fields\x18\
    \x02\x20\x01(\x0b2I.bitdrift_public.protobuf.filter.v1.Filter.Transform.\
    CaptureFields.FieldsR\x06fields\x1a\xb9\x01\n\x06Fields\x12o\n\x06single\
    \x18\x01\x20\x01(\x0b2U.bitdrift_public.protobuf.filter.v1.Filter.Transf\
    orm.CaptureFields.Fields.SingleFieldH\0R\x06single\x1a*\n\x0bSingleField\
    \x12\x1b\n\x04name\x18\x01\x20\x01(\tR\x04nameB\x07\xfaB\x04r\x02\x10\
    \x01B\x12\n\x0bfields_type\x12\x03\xf8B\x01\x1aF\n\x08SetField\x12\x1b\n\
    \x04name\x18\x01\x20\x01(\tR\x04nameB\x07\xfaB\x04r\x02\x10\x01\x12\x1d\
    \n\x05value\x18\x02\x20\x01(\tR\x05valueB\x07\xfaB\x04r\x02\x10\x01B\x15\
    \n\x0etransform_type\x12\x03\xf8B\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::validate::file_descriptor().clone());
            deps.push(super::log_matcher::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(7);
            messages.push(FiltersConfiguration::generated_message_descriptor_data());
            messages.push(Filter::generated_message_descriptor_data());
            messages.push(filter::Transform::generated_message_descriptor_data());
            messages.push(filter::transform::CaptureFields::generated_message_descriptor_data());
            messages.push(filter::transform::SetField::generated_message_descriptor_data());
            messages.push(filter::transform::capture_fields::Fields::generated_message_descriptor_data());
            messages.push(filter::transform::capture_fields::fields::SingleField::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
