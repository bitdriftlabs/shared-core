// proto - bitdrift's client/server API definitions
// Copyright Bitdrift, Inc. All rights reserved.
//
// Use of this source code and APIs are governed by a source available license that can be found in
// the LICENSE file or at:
// https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt

// This file is generated by rust-protobuf 4.0.0-alpha.0. Do not edit
// .proto file is parsed by protoc 29.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `bitdrift_public/protobuf/ingest/v1/api.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_4_0_0_ALPHA_0;

// @@protoc_insertion_point(message:bitdrift_public.protobuf.ingest.v1.IngestMetricRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct IngestMetricRequest {
    // message fields
    // @@protoc_insertion_point(field:bitdrift_public.protobuf.ingest.v1.IngestMetricRequest.metric_id)
    pub metric_id: ::std::string::String,
    // @@protoc_insertion_point(field:bitdrift_public.protobuf.ingest.v1.IngestMetricRequest.platform_type)
    pub platform_type: ::protobuf::EnumOrUnknown<MetricPlatformType>,
    // @@protoc_insertion_point(field:bitdrift_public.protobuf.ingest.v1.IngestMetricRequest.app_id)
    pub app_id: ::std::string::String,
    // @@protoc_insertion_point(field:bitdrift_public.protobuf.ingest.v1.IngestMetricRequest.app_version)
    pub app_version: ::std::string::String,
    // @@protoc_insertion_point(field:bitdrift_public.protobuf.ingest.v1.IngestMetricRequest.timestamp)
    pub timestamp: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // message oneof groups
    pub metric_value_type: ::std::option::Option<ingest_metric_request::Metric_value_type>,
    // special fields
    // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.ingest.v1.IngestMetricRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a IngestMetricRequest {
    fn default() -> &'a IngestMetricRequest {
        <IngestMetricRequest as ::protobuf::Message>::default_instance()
    }
}

impl IngestMetricRequest {
    pub fn new() -> IngestMetricRequest {
        ::std::default::Default::default()
    }

    // uint64 counter_delta = 6;

    pub fn counter_delta(&self) -> u64 {
        match self.metric_value_type {
            ::std::option::Option::Some(ingest_metric_request::Metric_value_type::CounterDelta(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_counter_delta(&mut self) {
        self.metric_value_type = ::std::option::Option::None;
    }

    pub fn has_counter_delta(&self) -> bool {
        match self.metric_value_type {
            ::std::option::Option::Some(ingest_metric_request::Metric_value_type::CounterDelta(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_counter_delta(&mut self, v: u64) {
        self.metric_value_type = ::std::option::Option::Some(ingest_metric_request::Metric_value_type::CounterDelta(v))
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "metric_id",
            |m: &IngestMetricRequest| { &m.metric_id },
            |m: &mut IngestMetricRequest| { &mut m.metric_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "platform_type",
            |m: &IngestMetricRequest| { &m.platform_type },
            |m: &mut IngestMetricRequest| { &mut m.platform_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "app_id",
            |m: &IngestMetricRequest| { &m.app_id },
            |m: &mut IngestMetricRequest| { &mut m.app_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "app_version",
            |m: &IngestMetricRequest| { &m.app_version },
            |m: &mut IngestMetricRequest| { &mut m.app_version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "timestamp",
            |m: &IngestMetricRequest| { &m.timestamp },
            |m: &mut IngestMetricRequest| { &mut m.timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "counter_delta",
            IngestMetricRequest::has_counter_delta,
            IngestMetricRequest::counter_delta,
            IngestMetricRequest::set_counter_delta,
        ));
        oneofs.push(ingest_metric_request::Metric_value_type::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<IngestMetricRequest>(
            "IngestMetricRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for IngestMetricRequest {
    const NAME: &'static str = "IngestMetricRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.metric_id = is.read_string()?;
                },
                16 => {
                    self.platform_type = is.read_enum_or_unknown()?;
                },
                26 => {
                    self.app_id = is.read_string()?;
                },
                34 => {
                    self.app_version = is.read_string()?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.timestamp)?;
                },
                48 => {
                    self.metric_value_type = ::std::option::Option::Some(ingest_metric_request::Metric_value_type::CounterDelta(is.read_uint64()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.metric_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.metric_id);
        }
        if self.platform_type != ::protobuf::EnumOrUnknown::new(MetricPlatformType::UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(2, self.platform_type.value());
        }
        if !self.app_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.app_id);
        }
        if !self.app_version.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.app_version);
        }
        if let Some(v) = self.timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.metric_value_type {
            match v {
                &ingest_metric_request::Metric_value_type::CounterDelta(v) => {
                    my_size += ::protobuf::rt::uint64_size(6, v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.metric_id.is_empty() {
            os.write_string(1, &self.metric_id)?;
        }
        if self.platform_type != ::protobuf::EnumOrUnknown::new(MetricPlatformType::UNSPECIFIED) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.platform_type))?;
        }
        if !self.app_id.is_empty() {
            os.write_string(3, &self.app_id)?;
        }
        if !self.app_version.is_empty() {
            os.write_string(4, &self.app_version)?;
        }
        if let Some(v) = self.timestamp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.metric_value_type {
            match v {
                &ingest_metric_request::Metric_value_type::CounterDelta(v) => {
                    os.write_uint64(6, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> IngestMetricRequest {
        IngestMetricRequest::new()
    }

    fn clear(&mut self) {
        self.metric_id.clear();
        self.platform_type = ::protobuf::EnumOrUnknown::new(MetricPlatformType::UNSPECIFIED);
        self.app_id.clear();
        self.app_version.clear();
        self.timestamp.clear();
        self.metric_value_type = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static IngestMetricRequest {
        static instance: IngestMetricRequest = IngestMetricRequest {
            metric_id: ::std::string::String::new(),
            platform_type: ::protobuf::EnumOrUnknown::from_i32(0),
            app_id: ::std::string::String::new(),
            app_version: ::std::string::String::new(),
            timestamp: ::protobuf::MessageField::none(),
            metric_value_type: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for IngestMetricRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("IngestMetricRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for IngestMetricRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IngestMetricRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `IngestMetricRequest`
pub mod ingest_metric_request {

    #[derive(Clone,PartialEq,Debug)]
    // @@protoc_insertion_point(oneof:bitdrift_public.protobuf.ingest.v1.IngestMetricRequest.metric_value_type)
    pub enum Metric_value_type {
        // @@protoc_insertion_point(oneof_field:bitdrift_public.protobuf.ingest.v1.IngestMetricRequest.counter_delta)
        CounterDelta(u64),
    }

    impl ::protobuf::Oneof for Metric_value_type {
    }

    impl ::protobuf::OneofFull for Metric_value_type {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::IngestMetricRequest as ::protobuf::MessageFull>::descriptor().oneof_by_name("metric_value_type").unwrap()).clone()
        }
    }

    impl Metric_value_type {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Metric_value_type>("metric_value_type")
        }
    }
}

// @@protoc_insertion_point(message:bitdrift_public.protobuf.ingest.v1.IngestMetricResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct IngestMetricResponse {
    // special fields
    // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.ingest.v1.IngestMetricResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a IngestMetricResponse {
    fn default() -> &'a IngestMetricResponse {
        <IngestMetricResponse as ::protobuf::Message>::default_instance()
    }
}

impl IngestMetricResponse {
    pub fn new() -> IngestMetricResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<IngestMetricResponse>(
            "IngestMetricResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for IngestMetricResponse {
    const NAME: &'static str = "IngestMetricResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> IngestMetricResponse {
        IngestMetricResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static IngestMetricResponse {
        static instance: IngestMetricResponse = IngestMetricResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for IngestMetricResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("IngestMetricResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for IngestMetricResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IngestMetricResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:bitdrift_public.protobuf.ingest.v1.MetricPlatformType)
pub enum MetricPlatformType {
    // @@protoc_insertion_point(enum_value:bitdrift_public.protobuf.ingest.v1.MetricPlatformType.UNSPECIFIED)
    UNSPECIFIED = 0,
    // @@protoc_insertion_point(enum_value:bitdrift_public.protobuf.ingest.v1.MetricPlatformType.APPLE)
    APPLE = 1,
    // @@protoc_insertion_point(enum_value:bitdrift_public.protobuf.ingest.v1.MetricPlatformType.ANDROID)
    ANDROID = 2,
    // @@protoc_insertion_point(enum_value:bitdrift_public.protobuf.ingest.v1.MetricPlatformType.ELECTRON)
    ELECTRON = 3,
}

impl ::protobuf::Enum for MetricPlatformType {
    const NAME: &'static str = "MetricPlatformType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MetricPlatformType> {
        match value {
            0 => ::std::option::Option::Some(MetricPlatformType::UNSPECIFIED),
            1 => ::std::option::Option::Some(MetricPlatformType::APPLE),
            2 => ::std::option::Option::Some(MetricPlatformType::ANDROID),
            3 => ::std::option::Option::Some(MetricPlatformType::ELECTRON),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<MetricPlatformType> {
        match str {
            "UNSPECIFIED" => ::std::option::Option::Some(MetricPlatformType::UNSPECIFIED),
            "APPLE" => ::std::option::Option::Some(MetricPlatformType::APPLE),
            "ANDROID" => ::std::option::Option::Some(MetricPlatformType::ANDROID),
            "ELECTRON" => ::std::option::Option::Some(MetricPlatformType::ELECTRON),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [MetricPlatformType] = &[
        MetricPlatformType::UNSPECIFIED,
        MetricPlatformType::APPLE,
        MetricPlatformType::ANDROID,
        MetricPlatformType::ELECTRON,
    ];
}

impl ::protobuf::EnumFull for MetricPlatformType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("MetricPlatformType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for MetricPlatformType {
    fn default() -> Self {
        MetricPlatformType::UNSPECIFIED
    }
}

impl MetricPlatformType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<MetricPlatformType>("MetricPlatformType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n,bitdrift_public/protobuf/ingest/v1/api.proto\x12\"bitdrift_public.pro\
    tobuf.ingest.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x17validate/v\
    alidate.proto\"\xe7\x02\n\x13IngestMetricRequest\x12$\n\tmetric_id\x18\
    \x01\x20\x01(\tR\x08metricIdB\x07\xfaB\x04r\x02\x10\x01\x12e\n\rplatform\
    _type\x18\x02\x20\x01(\x0e26.bitdrift_public.protobuf.ingest.v1.MetricPl\
    atformTypeR\x0cplatformTypeB\x08\xfaB\x05\x82\x01\x02\x10\x01\x12\x1e\n\
    \x06app_id\x18\x03\x20\x01(\tR\x05appIdB\x07\xfaB\x04r\x02\x10\x01\x12(\
    \n\x0bapp_version\x18\x04\x20\x01(\tR\nappVersionB\x07\xfaB\x04r\x02\x10\
    \x01\x128\n\ttimestamp\x18\x05\x20\x01(\x0b2\x1a.google.protobuf.Timesta\
    mpR\ttimestamp\x12%\n\rcounter_delta\x18\x06\x20\x01(\x04H\0R\x0ccounter\
    DeltaB\x18\n\x11metric_value_type\x12\x03\xf8B\x01\"\x16\n\x14IngestMetr\
    icResponse*K\n\x12MetricPlatformType\x12\x0f\n\x0bUNSPECIFIED\x10\0\x12\
    \t\n\x05APPLE\x10\x01\x12\x0b\n\x07ANDROID\x10\x02\x12\x0c\n\x08ELECTRON\
    \x10\x032\x95\x01\n\rIngestService\x12\x83\x01\n\x0cIngestMetric\x127.bi\
    tdrift_public.protobuf.ingest.v1.IngestMetricRequest\x1a8.bitdrift_publi\
    c.protobuf.ingest.v1.IngestMetricResponse\"\0b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            deps.push(super::validate::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(IngestMetricRequest::generated_message_descriptor_data());
            messages.push(IngestMetricResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(MetricPlatformType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
