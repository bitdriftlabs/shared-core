// proto - bitdrift's client/server API definitions
// Copyright Bitdrift, Inc. All rights reserved.
//
// Use of this source code and APIs are governed by a source available license that can be found in
// the LICENSE file or at:
// https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt

// This file is generated by rust-protobuf 4.0.0-alpha.0. Do not edit
// .proto file is parsed by protoc 28.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `bitdrift_public/protobuf/client/v1/matcher.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_4_0_0_ALPHA_0;

// @@protoc_insertion_point(message:bitdrift_public.protobuf.client.v1.Matcher)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Matcher {
    // message oneof groups
    pub type_: ::std::option::Option<matcher::Type>,
    // special fields
    // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.client.v1.Matcher.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Matcher {
    fn default() -> &'a Matcher {
        <Matcher as ::protobuf::Message>::default_instance()
    }
}

impl Matcher {
    pub fn new() -> Matcher {
        ::std::default::Default::default()
    }

    // bool always = 1;

    pub fn always(&self) -> bool {
        match self.type_ {
            ::std::option::Option::Some(matcher::Type::Always(v)) => v,
            _ => false,
        }
    }

    pub fn clear_always(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_always(&self) -> bool {
        match self.type_ {
            ::std::option::Option::Some(matcher::Type::Always(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_always(&mut self, v: bool) {
        self.type_ = ::std::option::Option::Some(matcher::Type::Always(v))
    }

    // .bitdrift_public.protobuf.client.v1.Matcher.MatcherList and = 2;

    pub fn and(&self) -> &matcher::MatcherList {
        match self.type_ {
            ::std::option::Option::Some(matcher::Type::And(ref v)) => v,
            _ => <matcher::MatcherList as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_and(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_and(&self) -> bool {
        match self.type_ {
            ::std::option::Option::Some(matcher::Type::And(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_and(&mut self, v: matcher::MatcherList) {
        self.type_ = ::std::option::Option::Some(matcher::Type::And(v))
    }

    // Mutable pointer to the field.
    pub fn mut_and(&mut self) -> &mut matcher::MatcherList {
        if let ::std::option::Option::Some(matcher::Type::And(_)) = self.type_ {
        } else {
            self.type_ = ::std::option::Option::Some(matcher::Type::And(matcher::MatcherList::new()));
        }
        match self.type_ {
            ::std::option::Option::Some(matcher::Type::And(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_and(&mut self) -> matcher::MatcherList {
        if self.has_and() {
            match self.type_.take() {
                ::std::option::Option::Some(matcher::Type::And(v)) => v,
                _ => panic!(),
            }
        } else {
            matcher::MatcherList::new()
        }
    }

    // .bitdrift_public.protobuf.client.v1.Matcher.MatcherList or = 3;

    pub fn or(&self) -> &matcher::MatcherList {
        match self.type_ {
            ::std::option::Option::Some(matcher::Type::Or(ref v)) => v,
            _ => <matcher::MatcherList as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_or(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_or(&self) -> bool {
        match self.type_ {
            ::std::option::Option::Some(matcher::Type::Or(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_or(&mut self, v: matcher::MatcherList) {
        self.type_ = ::std::option::Option::Some(matcher::Type::Or(v))
    }

    // Mutable pointer to the field.
    pub fn mut_or(&mut self) -> &mut matcher::MatcherList {
        if let ::std::option::Option::Some(matcher::Type::Or(_)) = self.type_ {
        } else {
            self.type_ = ::std::option::Option::Some(matcher::Type::Or(matcher::MatcherList::new()));
        }
        match self.type_ {
            ::std::option::Option::Some(matcher::Type::Or(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_or(&mut self) -> matcher::MatcherList {
        if self.has_or() {
            match self.type_.take() {
                ::std::option::Option::Some(matcher::Type::Or(v)) => v,
                _ => panic!(),
            }
        } else {
            matcher::MatcherList::new()
        }
    }

    // .bitdrift_public.protobuf.client.v1.Matcher.StringMatch string = 4;

    pub fn string(&self) -> &matcher::StringMatch {
        match self.type_ {
            ::std::option::Option::Some(matcher::Type::String(ref v)) => v,
            _ => <matcher::StringMatch as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_string(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_string(&self) -> bool {
        match self.type_ {
            ::std::option::Option::Some(matcher::Type::String(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_string(&mut self, v: matcher::StringMatch) {
        self.type_ = ::std::option::Option::Some(matcher::Type::String(v))
    }

    // Mutable pointer to the field.
    pub fn mut_string(&mut self) -> &mut matcher::StringMatch {
        if let ::std::option::Option::Some(matcher::Type::String(_)) = self.type_ {
        } else {
            self.type_ = ::std::option::Option::Some(matcher::Type::String(matcher::StringMatch::new()));
        }
        match self.type_ {
            ::std::option::Option::Some(matcher::Type::String(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_string(&mut self) -> matcher::StringMatch {
        if self.has_string() {
            match self.type_.take() {
                ::std::option::Option::Some(matcher::Type::String(v)) => v,
                _ => panic!(),
            }
        } else {
            matcher::StringMatch::new()
        }
    }

    // .bitdrift_public.protobuf.client.v1.Matcher.IntMatch integer = 5;

    pub fn integer(&self) -> &matcher::IntMatch {
        match self.type_ {
            ::std::option::Option::Some(matcher::Type::Integer(ref v)) => v,
            _ => <matcher::IntMatch as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_integer(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_integer(&self) -> bool {
        match self.type_ {
            ::std::option::Option::Some(matcher::Type::Integer(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_integer(&mut self, v: matcher::IntMatch) {
        self.type_ = ::std::option::Option::Some(matcher::Type::Integer(v))
    }

    // Mutable pointer to the field.
    pub fn mut_integer(&mut self) -> &mut matcher::IntMatch {
        if let ::std::option::Option::Some(matcher::Type::Integer(_)) = self.type_ {
        } else {
            self.type_ = ::std::option::Option::Some(matcher::Type::Integer(matcher::IntMatch::new()));
        }
        match self.type_ {
            ::std::option::Option::Some(matcher::Type::Integer(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_integer(&mut self) -> matcher::IntMatch {
        if self.has_integer() {
            match self.type_.take() {
                ::std::option::Option::Some(matcher::Type::Integer(v)) => v,
                _ => panic!(),
            }
        } else {
            matcher::IntMatch::new()
        }
    }

    // .bitdrift_public.protobuf.client.v1.Matcher.ConsistentHashMatch consistent = 6;

    pub fn consistent(&self) -> &matcher::ConsistentHashMatch {
        match self.type_ {
            ::std::option::Option::Some(matcher::Type::Consistent(ref v)) => v,
            _ => <matcher::ConsistentHashMatch as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_consistent(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_consistent(&self) -> bool {
        match self.type_ {
            ::std::option::Option::Some(matcher::Type::Consistent(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_consistent(&mut self, v: matcher::ConsistentHashMatch) {
        self.type_ = ::std::option::Option::Some(matcher::Type::Consistent(v))
    }

    // Mutable pointer to the field.
    pub fn mut_consistent(&mut self) -> &mut matcher::ConsistentHashMatch {
        if let ::std::option::Option::Some(matcher::Type::Consistent(_)) = self.type_ {
        } else {
            self.type_ = ::std::option::Option::Some(matcher::Type::Consistent(matcher::ConsistentHashMatch::new()));
        }
        match self.type_ {
            ::std::option::Option::Some(matcher::Type::Consistent(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_consistent(&mut self) -> matcher::ConsistentHashMatch {
        if self.has_consistent() {
            match self.type_.take() {
                ::std::option::Option::Some(matcher::Type::Consistent(v)) => v,
                _ => panic!(),
            }
        } else {
            matcher::ConsistentHashMatch::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "always",
            Matcher::has_always,
            Matcher::always,
            Matcher::set_always,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, matcher::MatcherList>(
            "and",
            Matcher::has_and,
            Matcher::and,
            Matcher::mut_and,
            Matcher::set_and,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, matcher::MatcherList>(
            "or",
            Matcher::has_or,
            Matcher::or,
            Matcher::mut_or,
            Matcher::set_or,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, matcher::StringMatch>(
            "string",
            Matcher::has_string,
            Matcher::string,
            Matcher::mut_string,
            Matcher::set_string,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, matcher::IntMatch>(
            "integer",
            Matcher::has_integer,
            Matcher::integer,
            Matcher::mut_integer,
            Matcher::set_integer,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, matcher::ConsistentHashMatch>(
            "consistent",
            Matcher::has_consistent,
            Matcher::consistent,
            Matcher::mut_consistent,
            Matcher::set_consistent,
        ));
        oneofs.push(matcher::Type::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Matcher>(
            "Matcher",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Matcher {
    const NAME: &'static str = "Matcher";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = ::std::option::Option::Some(matcher::Type::Always(is.read_bool()?));
                },
                18 => {
                    self.type_ = ::std::option::Option::Some(matcher::Type::And(is.read_message()?));
                },
                26 => {
                    self.type_ = ::std::option::Option::Some(matcher::Type::Or(is.read_message()?));
                },
                34 => {
                    self.type_ = ::std::option::Option::Some(matcher::Type::String(is.read_message()?));
                },
                42 => {
                    self.type_ = ::std::option::Option::Some(matcher::Type::Integer(is.read_message()?));
                },
                50 => {
                    self.type_ = ::std::option::Option::Some(matcher::Type::Consistent(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.type_ {
            match v {
                &matcher::Type::Always(v) => {
                    my_size += 1 + 1;
                },
                &matcher::Type::And(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &matcher::Type::Or(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &matcher::Type::String(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &matcher::Type::Integer(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &matcher::Type::Consistent(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.type_ {
            match v {
                &matcher::Type::Always(v) => {
                    os.write_bool(1, v)?;
                },
                &matcher::Type::And(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &matcher::Type::Or(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &matcher::Type::String(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &matcher::Type::Integer(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &matcher::Type::Consistent(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Matcher {
        Matcher::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Matcher {
        static instance: Matcher = Matcher {
            type_: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Matcher {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Matcher").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Matcher {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Matcher {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Matcher`
pub mod matcher {

    #[derive(Clone,PartialEq,Debug)]
    // @@protoc_insertion_point(oneof:bitdrift_public.protobuf.client.v1.Matcher.type)
    pub enum Type {
        // @@protoc_insertion_point(oneof_field:bitdrift_public.protobuf.client.v1.Matcher.always)
        Always(bool),
        // @@protoc_insertion_point(oneof_field:bitdrift_public.protobuf.client.v1.Matcher.and)
        And(MatcherList),
        // @@protoc_insertion_point(oneof_field:bitdrift_public.protobuf.client.v1.Matcher.or)
        Or(MatcherList),
        // @@protoc_insertion_point(oneof_field:bitdrift_public.protobuf.client.v1.Matcher.string)
        String(StringMatch),
        // @@protoc_insertion_point(oneof_field:bitdrift_public.protobuf.client.v1.Matcher.integer)
        Integer(IntMatch),
        // @@protoc_insertion_point(oneof_field:bitdrift_public.protobuf.client.v1.Matcher.consistent)
        Consistent(ConsistentHashMatch),
    }

    impl ::protobuf::Oneof for Type {
    }

    impl ::protobuf::OneofFull for Type {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Matcher as ::protobuf::MessageFull>::descriptor().oneof_by_name("type").unwrap()).clone()
        }
    }

    impl Type {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Type>("type")
        }
    }
    // @@protoc_insertion_point(message:bitdrift_public.protobuf.client.v1.Matcher.Key)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Key {
        // message oneof groups
        pub type_: ::std::option::Option<key::Type>,
        // special fields
        // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.client.v1.Matcher.Key.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Key {
        fn default() -> &'a Key {
            <Key as ::protobuf::Message>::default_instance()
        }
    }

    impl Key {
        pub fn new() -> Key {
            ::std::default::Default::default()
        }

        // string static_device_metadata = 1;

        pub fn static_device_metadata(&self) -> &str {
            match self.type_ {
                ::std::option::Option::Some(key::Type::StaticDeviceMetadata(ref v)) => v,
                _ => "",
            }
        }

        pub fn clear_static_device_metadata(&mut self) {
            self.type_ = ::std::option::Option::None;
        }

        pub fn has_static_device_metadata(&self) -> bool {
            match self.type_ {
                ::std::option::Option::Some(key::Type::StaticDeviceMetadata(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_static_device_metadata(&mut self, v: ::std::string::String) {
            self.type_ = ::std::option::Option::Some(key::Type::StaticDeviceMetadata(v))
        }

        // Mutable pointer to the field.
        pub fn mut_static_device_metadata(&mut self) -> &mut ::std::string::String {
            if let ::std::option::Option::Some(key::Type::StaticDeviceMetadata(_)) = self.type_ {
            } else {
                self.type_ = ::std::option::Option::Some(key::Type::StaticDeviceMetadata(::std::string::String::new()));
            }
            match self.type_ {
                ::std::option::Option::Some(key::Type::StaticDeviceMetadata(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_static_device_metadata(&mut self) -> ::std::string::String {
            if self.has_static_device_metadata() {
                match self.type_.take() {
                    ::std::option::Option::Some(key::Type::StaticDeviceMetadata(v)) => v,
                    _ => panic!(),
                }
            } else {
                ::std::string::String::new()
            }
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(1);
            fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
                "static_device_metadata",
                Key::has_static_device_metadata,
                Key::static_device_metadata,
                Key::set_static_device_metadata,
            ));
            oneofs.push(key::Type::generated_oneof_descriptor_data());
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Key>(
                "Matcher.Key",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Key {
        const NAME: &'static str = "Key";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.type_ = ::std::option::Option::Some(key::Type::StaticDeviceMetadata(is.read_string()?));
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let ::std::option::Option::Some(ref v) = self.type_ {
                match v {
                    &key::Type::StaticDeviceMetadata(ref v) => {
                        my_size += ::protobuf::rt::string_size(1, &v);
                    },
                };
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let ::std::option::Option::Some(ref v) = self.type_ {
                match v {
                    &key::Type::StaticDeviceMetadata(ref v) => {
                        os.write_string(1, v)?;
                    },
                };
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Key {
            Key::new()
        }

        fn clear(&mut self) {
            self.type_ = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Key {
            static instance: Key = Key {
                type_: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Key {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Matcher.Key").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Key {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Key {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `Key`
    pub mod key {

        #[derive(Clone,PartialEq,Debug)]
        // @@protoc_insertion_point(oneof:bitdrift_public.protobuf.client.v1.Matcher.Key.type)
        pub enum Type {
            // @@protoc_insertion_point(oneof_field:bitdrift_public.protobuf.client.v1.Matcher.Key.static_device_metadata)
            StaticDeviceMetadata(::std::string::String),
        }

        impl ::protobuf::Oneof for Type {
        }

        impl ::protobuf::OneofFull for Type {
            fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| <super::Key as ::protobuf::MessageFull>::descriptor().oneof_by_name("type").unwrap()).clone()
            }
        }

        impl Type {
            pub(in super::super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
                ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Type>("type")
            }
        }
    }

    // @@protoc_insertion_point(message:bitdrift_public.protobuf.client.v1.Matcher.MatcherList)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct MatcherList {
        // message fields
        // @@protoc_insertion_point(field:bitdrift_public.protobuf.client.v1.Matcher.MatcherList.matchers)
        pub matchers: ::std::vec::Vec<super::Matcher>,
        // special fields
        // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.client.v1.Matcher.MatcherList.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a MatcherList {
        fn default() -> &'a MatcherList {
            <MatcherList as ::protobuf::Message>::default_instance()
        }
    }

    impl MatcherList {
        pub fn new() -> MatcherList {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "matchers",
                |m: &MatcherList| { &m.matchers },
                |m: &mut MatcherList| { &mut m.matchers },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MatcherList>(
                "Matcher.MatcherList",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for MatcherList {
        const NAME: &'static str = "MatcherList";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.matchers.push(is.read_message()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            for value in &self.matchers {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            for v in &self.matchers {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> MatcherList {
            MatcherList::new()
        }

        fn clear(&mut self) {
            self.matchers.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static MatcherList {
            static instance: MatcherList = MatcherList {
                matchers: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for MatcherList {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Matcher.MatcherList").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for MatcherList {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for MatcherList {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:bitdrift_public.protobuf.client.v1.Matcher.StringMatch)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct StringMatch {
        // message fields
        // @@protoc_insertion_point(field:bitdrift_public.protobuf.client.v1.Matcher.StringMatch.key)
        pub key: ::protobuf::MessageField<Key>,
        // @@protoc_insertion_point(field:bitdrift_public.protobuf.client.v1.Matcher.StringMatch.value)
        pub value: ::std::string::String,
        // @@protoc_insertion_point(field:bitdrift_public.protobuf.client.v1.Matcher.StringMatch.match_type)
        pub match_type: ::protobuf::EnumOrUnknown<string_match::Type>,
        // special fields
        // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.client.v1.Matcher.StringMatch.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a StringMatch {
        fn default() -> &'a StringMatch {
            <StringMatch as ::protobuf::Message>::default_instance()
        }
    }

    impl StringMatch {
        pub fn new() -> StringMatch {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Key>(
                "key",
                |m: &StringMatch| { &m.key },
                |m: &mut StringMatch| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "value",
                |m: &StringMatch| { &m.value },
                |m: &mut StringMatch| { &mut m.value },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "match_type",
                |m: &StringMatch| { &m.match_type },
                |m: &mut StringMatch| { &mut m.match_type },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StringMatch>(
                "Matcher.StringMatch",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for StringMatch {
        const NAME: &'static str = "StringMatch";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.key)?;
                    },
                    18 => {
                        self.value = is.read_string()?;
                    },
                    24 => {
                        self.match_type = is.read_enum_or_unknown()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.key.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if !self.value.is_empty() {
                my_size += ::protobuf::rt::string_size(2, &self.value);
            }
            if self.match_type != ::protobuf::EnumOrUnknown::new(string_match::Type::EQUALS) {
                my_size += ::protobuf::rt::int32_size(3, self.match_type.value());
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.key.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            if !self.value.is_empty() {
                os.write_string(2, &self.value)?;
            }
            if self.match_type != ::protobuf::EnumOrUnknown::new(string_match::Type::EQUALS) {
                os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.match_type))?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> StringMatch {
            StringMatch::new()
        }

        fn clear(&mut self) {
            self.key.clear();
            self.value.clear();
            self.match_type = ::protobuf::EnumOrUnknown::new(string_match::Type::EQUALS);
            self.special_fields.clear();
        }

        fn default_instance() -> &'static StringMatch {
            static instance: StringMatch = StringMatch {
                key: ::protobuf::MessageField::none(),
                value: ::std::string::String::new(),
                match_type: ::protobuf::EnumOrUnknown::from_i32(0),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for StringMatch {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Matcher.StringMatch").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for StringMatch {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for StringMatch {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `StringMatch`
    pub mod string_match {
        #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
        // @@protoc_insertion_point(enum:bitdrift_public.protobuf.client.v1.Matcher.StringMatch.Type)
        pub enum Type {
            // @@protoc_insertion_point(enum_value:bitdrift_public.protobuf.client.v1.Matcher.StringMatch.Type.EQUALS)
            EQUALS = 0,
        }

        impl ::protobuf::Enum for Type {
            const NAME: &'static str = "Type";

            fn value(&self) -> i32 {
                *self as i32
            }

            fn from_i32(value: i32) -> ::std::option::Option<Type> {
                match value {
                    0 => ::std::option::Option::Some(Type::EQUALS),
                    _ => ::std::option::Option::None
                }
            }

            fn from_str(str: &str) -> ::std::option::Option<Type> {
                match str {
                    "EQUALS" => ::std::option::Option::Some(Type::EQUALS),
                    _ => ::std::option::Option::None
                }
            }

            const VALUES: &'static [Type] = &[
                Type::EQUALS,
            ];
        }

        impl ::protobuf::EnumFull for Type {
            fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().enum_by_package_relative_name("Matcher.StringMatch.Type").unwrap()).clone()
            }

            fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
                let index = *self as usize;
                Self::enum_descriptor().value_by_index(index)
            }
        }

        impl ::std::default::Default for Type {
            fn default() -> Self {
                Type::EQUALS
            }
        }

        impl Type {
            pub(in super::super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
                ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Type>("Matcher.StringMatch.Type")
            }
        }
    }

    // @@protoc_insertion_point(message:bitdrift_public.protobuf.client.v1.Matcher.IntMatch)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct IntMatch {
        // message fields
        // @@protoc_insertion_point(field:bitdrift_public.protobuf.client.v1.Matcher.IntMatch.key)
        pub key: ::protobuf::MessageField<Key>,
        // @@protoc_insertion_point(field:bitdrift_public.protobuf.client.v1.Matcher.IntMatch.value)
        pub value: i64,
        // @@protoc_insertion_point(field:bitdrift_public.protobuf.client.v1.Matcher.IntMatch.match_type)
        pub match_type: ::protobuf::EnumOrUnknown<int_match::Type>,
        // special fields
        // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.client.v1.Matcher.IntMatch.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a IntMatch {
        fn default() -> &'a IntMatch {
            <IntMatch as ::protobuf::Message>::default_instance()
        }
    }

    impl IntMatch {
        pub fn new() -> IntMatch {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Key>(
                "key",
                |m: &IntMatch| { &m.key },
                |m: &mut IntMatch| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "value",
                |m: &IntMatch| { &m.value },
                |m: &mut IntMatch| { &mut m.value },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "match_type",
                |m: &IntMatch| { &m.match_type },
                |m: &mut IntMatch| { &mut m.match_type },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<IntMatch>(
                "Matcher.IntMatch",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for IntMatch {
        const NAME: &'static str = "IntMatch";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.key)?;
                    },
                    16 => {
                        self.value = is.read_int64()?;
                    },
                    24 => {
                        self.match_type = is.read_enum_or_unknown()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.key.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if self.value != 0 {
                my_size += ::protobuf::rt::int64_size(2, self.value);
            }
            if self.match_type != ::protobuf::EnumOrUnknown::new(int_match::Type::EQUALS) {
                my_size += ::protobuf::rt::int32_size(3, self.match_type.value());
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.key.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            if self.value != 0 {
                os.write_int64(2, self.value)?;
            }
            if self.match_type != ::protobuf::EnumOrUnknown::new(int_match::Type::EQUALS) {
                os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.match_type))?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> IntMatch {
            IntMatch::new()
        }

        fn clear(&mut self) {
            self.key.clear();
            self.value = 0;
            self.match_type = ::protobuf::EnumOrUnknown::new(int_match::Type::EQUALS);
            self.special_fields.clear();
        }

        fn default_instance() -> &'static IntMatch {
            static instance: IntMatch = IntMatch {
                key: ::protobuf::MessageField::none(),
                value: 0,
                match_type: ::protobuf::EnumOrUnknown::from_i32(0),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for IntMatch {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Matcher.IntMatch").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for IntMatch {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for IntMatch {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `IntMatch`
    pub mod int_match {
        #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
        // @@protoc_insertion_point(enum:bitdrift_public.protobuf.client.v1.Matcher.IntMatch.Type)
        pub enum Type {
            // @@protoc_insertion_point(enum_value:bitdrift_public.protobuf.client.v1.Matcher.IntMatch.Type.EQUALS)
            EQUALS = 0,
            // @@protoc_insertion_point(enum_value:bitdrift_public.protobuf.client.v1.Matcher.IntMatch.Type.GREATER_THAN)
            GREATER_THAN = 1,
            // @@protoc_insertion_point(enum_value:bitdrift_public.protobuf.client.v1.Matcher.IntMatch.Type.GREATER_THAN_OR_EQUAL)
            GREATER_THAN_OR_EQUAL = 2,
        }

        impl ::protobuf::Enum for Type {
            const NAME: &'static str = "Type";

            fn value(&self) -> i32 {
                *self as i32
            }

            fn from_i32(value: i32) -> ::std::option::Option<Type> {
                match value {
                    0 => ::std::option::Option::Some(Type::EQUALS),
                    1 => ::std::option::Option::Some(Type::GREATER_THAN),
                    2 => ::std::option::Option::Some(Type::GREATER_THAN_OR_EQUAL),
                    _ => ::std::option::Option::None
                }
            }

            fn from_str(str: &str) -> ::std::option::Option<Type> {
                match str {
                    "EQUALS" => ::std::option::Option::Some(Type::EQUALS),
                    "GREATER_THAN" => ::std::option::Option::Some(Type::GREATER_THAN),
                    "GREATER_THAN_OR_EQUAL" => ::std::option::Option::Some(Type::GREATER_THAN_OR_EQUAL),
                    _ => ::std::option::Option::None
                }
            }

            const VALUES: &'static [Type] = &[
                Type::EQUALS,
                Type::GREATER_THAN,
                Type::GREATER_THAN_OR_EQUAL,
            ];
        }

        impl ::protobuf::EnumFull for Type {
            fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().enum_by_package_relative_name("Matcher.IntMatch.Type").unwrap()).clone()
            }

            fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
                let index = *self as usize;
                Self::enum_descriptor().value_by_index(index)
            }
        }

        impl ::std::default::Default for Type {
            fn default() -> Self {
                Type::EQUALS
            }
        }

        impl Type {
            pub(in super::super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
                ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Type>("Matcher.IntMatch.Type")
            }
        }
    }

    // @@protoc_insertion_point(message:bitdrift_public.protobuf.client.v1.Matcher.ConsistentHashMatch)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ConsistentHashMatch {
        // message fields
        // @@protoc_insertion_point(field:bitdrift_public.protobuf.client.v1.Matcher.ConsistentHashMatch.key)
        pub key: ::protobuf::MessageField<Key>,
        // @@protoc_insertion_point(field:bitdrift_public.protobuf.client.v1.Matcher.ConsistentHashMatch.seed)
        pub seed: u64,
        // @@protoc_insertion_point(field:bitdrift_public.protobuf.client.v1.Matcher.ConsistentHashMatch.numerator)
        pub numerator: u64,
        // @@protoc_insertion_point(field:bitdrift_public.protobuf.client.v1.Matcher.ConsistentHashMatch.denominator)
        pub denominator: u64,
        // special fields
        // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.client.v1.Matcher.ConsistentHashMatch.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ConsistentHashMatch {
        fn default() -> &'a ConsistentHashMatch {
            <ConsistentHashMatch as ::protobuf::Message>::default_instance()
        }
    }

    impl ConsistentHashMatch {
        pub fn new() -> ConsistentHashMatch {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Key>(
                "key",
                |m: &ConsistentHashMatch| { &m.key },
                |m: &mut ConsistentHashMatch| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "seed",
                |m: &ConsistentHashMatch| { &m.seed },
                |m: &mut ConsistentHashMatch| { &mut m.seed },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "numerator",
                |m: &ConsistentHashMatch| { &m.numerator },
                |m: &mut ConsistentHashMatch| { &mut m.numerator },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "denominator",
                |m: &ConsistentHashMatch| { &m.denominator },
                |m: &mut ConsistentHashMatch| { &mut m.denominator },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ConsistentHashMatch>(
                "Matcher.ConsistentHashMatch",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for ConsistentHashMatch {
        const NAME: &'static str = "ConsistentHashMatch";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.key)?;
                    },
                    16 => {
                        self.seed = is.read_uint64()?;
                    },
                    24 => {
                        self.numerator = is.read_uint64()?;
                    },
                    32 => {
                        self.denominator = is.read_uint64()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.key.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if self.seed != 0 {
                my_size += ::protobuf::rt::uint64_size(2, self.seed);
            }
            if self.numerator != 0 {
                my_size += ::protobuf::rt::uint64_size(3, self.numerator);
            }
            if self.denominator != 0 {
                my_size += ::protobuf::rt::uint64_size(4, self.denominator);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.key.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            if self.seed != 0 {
                os.write_uint64(2, self.seed)?;
            }
            if self.numerator != 0 {
                os.write_uint64(3, self.numerator)?;
            }
            if self.denominator != 0 {
                os.write_uint64(4, self.denominator)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ConsistentHashMatch {
            ConsistentHashMatch::new()
        }

        fn clear(&mut self) {
            self.key.clear();
            self.seed = 0;
            self.numerator = 0;
            self.denominator = 0;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ConsistentHashMatch {
            static instance: ConsistentHashMatch = ConsistentHashMatch {
                key: ::protobuf::MessageField::none(),
                seed: 0,
                numerator: 0,
                denominator: 0,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for ConsistentHashMatch {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Matcher.ConsistentHashMatch").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ConsistentHashMatch {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for ConsistentHashMatch {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:bitdrift_public.protobuf.client.v1.RootMatcher)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RootMatcher {
    // message fields
    // @@protoc_insertion_point(field:bitdrift_public.protobuf.client.v1.RootMatcher.matcher)
    pub matcher: ::protobuf::MessageField<Matcher>,
    // message oneof groups
    pub target_type: ::std::option::Option<root_matcher::Target_type>,
    // special fields
    // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.client.v1.RootMatcher.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RootMatcher {
    fn default() -> &'a RootMatcher {
        <RootMatcher as ::protobuf::Message>::default_instance()
    }
}

impl RootMatcher {
    pub fn new() -> RootMatcher {
        ::std::default::Default::default()
    }

    // .bitdrift_public.protobuf.client.v1.RootMatcher.ClientTarget client_target = 1;

    pub fn client_target(&self) -> &root_matcher::ClientTarget {
        match self.target_type {
            ::std::option::Option::Some(root_matcher::Target_type::ClientTarget(ref v)) => v,
            _ => <root_matcher::ClientTarget as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_client_target(&mut self) {
        self.target_type = ::std::option::Option::None;
    }

    pub fn has_client_target(&self) -> bool {
        match self.target_type {
            ::std::option::Option::Some(root_matcher::Target_type::ClientTarget(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_client_target(&mut self, v: root_matcher::ClientTarget) {
        self.target_type = ::std::option::Option::Some(root_matcher::Target_type::ClientTarget(v))
    }

    // Mutable pointer to the field.
    pub fn mut_client_target(&mut self) -> &mut root_matcher::ClientTarget {
        if let ::std::option::Option::Some(root_matcher::Target_type::ClientTarget(_)) = self.target_type {
        } else {
            self.target_type = ::std::option::Option::Some(root_matcher::Target_type::ClientTarget(root_matcher::ClientTarget::new()));
        }
        match self.target_type {
            ::std::option::Option::Some(root_matcher::Target_type::ClientTarget(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_client_target(&mut self) -> root_matcher::ClientTarget {
        if self.has_client_target() {
            match self.target_type.take() {
                ::std::option::Option::Some(root_matcher::Target_type::ClientTarget(v)) => v,
                _ => panic!(),
            }
        } else {
            root_matcher::ClientTarget::new()
        }
    }

    // .bitdrift_public.protobuf.client.v1.RootMatcher.ServerTarget server_target = 2;

    pub fn server_target(&self) -> &root_matcher::ServerTarget {
        match self.target_type {
            ::std::option::Option::Some(root_matcher::Target_type::ServerTarget(ref v)) => v,
            _ => <root_matcher::ServerTarget as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_server_target(&mut self) {
        self.target_type = ::std::option::Option::None;
    }

    pub fn has_server_target(&self) -> bool {
        match self.target_type {
            ::std::option::Option::Some(root_matcher::Target_type::ServerTarget(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_server_target(&mut self, v: root_matcher::ServerTarget) {
        self.target_type = ::std::option::Option::Some(root_matcher::Target_type::ServerTarget(v))
    }

    // Mutable pointer to the field.
    pub fn mut_server_target(&mut self) -> &mut root_matcher::ServerTarget {
        if let ::std::option::Option::Some(root_matcher::Target_type::ServerTarget(_)) = self.target_type {
        } else {
            self.target_type = ::std::option::Option::Some(root_matcher::Target_type::ServerTarget(root_matcher::ServerTarget::new()));
        }
        match self.target_type {
            ::std::option::Option::Some(root_matcher::Target_type::ServerTarget(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_server_target(&mut self) -> root_matcher::ServerTarget {
        if self.has_server_target() {
            match self.target_type.take() {
                ::std::option::Option::Some(root_matcher::Target_type::ServerTarget(v)) => v,
                _ => panic!(),
            }
        } else {
            root_matcher::ServerTarget::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, root_matcher::ClientTarget>(
            "client_target",
            RootMatcher::has_client_target,
            RootMatcher::client_target,
            RootMatcher::mut_client_target,
            RootMatcher::set_client_target,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, root_matcher::ServerTarget>(
            "server_target",
            RootMatcher::has_server_target,
            RootMatcher::server_target,
            RootMatcher::mut_server_target,
            RootMatcher::set_server_target,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Matcher>(
            "matcher",
            |m: &RootMatcher| { &m.matcher },
            |m: &mut RootMatcher| { &mut m.matcher },
        ));
        oneofs.push(root_matcher::Target_type::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RootMatcher>(
            "RootMatcher",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RootMatcher {
    const NAME: &'static str = "RootMatcher";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.target_type = ::std::option::Option::Some(root_matcher::Target_type::ClientTarget(is.read_message()?));
                },
                18 => {
                    self.target_type = ::std::option::Option::Some(root_matcher::Target_type::ServerTarget(is.read_message()?));
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.matcher)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.matcher.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.target_type {
            match v {
                &root_matcher::Target_type::ClientTarget(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &root_matcher::Target_type::ServerTarget(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.matcher.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.target_type {
            match v {
                &root_matcher::Target_type::ClientTarget(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &root_matcher::Target_type::ServerTarget(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RootMatcher {
        RootMatcher::new()
    }

    fn clear(&mut self) {
        self.target_type = ::std::option::Option::None;
        self.target_type = ::std::option::Option::None;
        self.matcher.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RootMatcher {
        static instance: RootMatcher = RootMatcher {
            matcher: ::protobuf::MessageField::none(),
            target_type: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RootMatcher {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RootMatcher").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RootMatcher {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RootMatcher {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `RootMatcher`
pub mod root_matcher {

    #[derive(Clone,PartialEq,Debug)]
    // @@protoc_insertion_point(oneof:bitdrift_public.protobuf.client.v1.RootMatcher.target_type)
    pub enum Target_type {
        // @@protoc_insertion_point(oneof_field:bitdrift_public.protobuf.client.v1.RootMatcher.client_target)
        ClientTarget(ClientTarget),
        // @@protoc_insertion_point(oneof_field:bitdrift_public.protobuf.client.v1.RootMatcher.server_target)
        ServerTarget(ServerTarget),
    }

    impl ::protobuf::Oneof for Target_type {
    }

    impl ::protobuf::OneofFull for Target_type {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::RootMatcher as ::protobuf::MessageFull>::descriptor().oneof_by_name("target_type").unwrap()).clone()
        }
    }

    impl Target_type {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Target_type>("target_type")
        }
    }
    // @@protoc_insertion_point(message:bitdrift_public.protobuf.client.v1.RootMatcher.ClientTarget)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ClientTarget {
        // special fields
        // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.client.v1.RootMatcher.ClientTarget.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ClientTarget {
        fn default() -> &'a ClientTarget {
            <ClientTarget as ::protobuf::Message>::default_instance()
        }
    }

    impl ClientTarget {
        pub fn new() -> ClientTarget {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(0);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ClientTarget>(
                "RootMatcher.ClientTarget",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for ClientTarget {
        const NAME: &'static str = "ClientTarget";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ClientTarget {
            ClientTarget::new()
        }

        fn clear(&mut self) {
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ClientTarget {
            static instance: ClientTarget = ClientTarget {
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for ClientTarget {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("RootMatcher.ClientTarget").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ClientTarget {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for ClientTarget {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:bitdrift_public.protobuf.client.v1.RootMatcher.ServerTarget)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ServerTarget {
        // special fields
        // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.client.v1.RootMatcher.ServerTarget.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ServerTarget {
        fn default() -> &'a ServerTarget {
            <ServerTarget as ::protobuf::Message>::default_instance()
        }
    }

    impl ServerTarget {
        pub fn new() -> ServerTarget {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(0);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ServerTarget>(
                "RootMatcher.ServerTarget",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for ServerTarget {
        const NAME: &'static str = "ServerTarget";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ServerTarget {
            ServerTarget::new()
        }

        fn clear(&mut self) {
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ServerTarget {
            static instance: ServerTarget = ServerTarget {
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for ServerTarget {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("RootMatcher.ServerTarget").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ServerTarget {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for ServerTarget {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n0bitdrift_public/protobuf/client/v1/matcher.proto\x12\"bitdrift_public\
    .protobuf.client.v1\x1a\x17validate/validate.proto\"\xb8\n\n\x07Matcher\
    \x12!\n\x06always\x18\x01\x20\x01(\x08H\0R\x06alwaysB\x07\xfaB\x04j\x02\
    \x08\x01\x12K\n\x03and\x18\x02\x20\x01(\x0b27.bitdrift_public.protobuf.c\
    lient.v1.Matcher.MatcherListH\0R\x03and\x12I\n\x02or\x18\x03\x20\x01(\
    \x0b27.bitdrift_public.protobuf.client.v1.Matcher.MatcherListH\0R\x02or\
    \x12Q\n\x06string\x18\x04\x20\x01(\x0b27.bitdrift_public.protobuf.client\
    .v1.Matcher.StringMatchH\0R\x06string\x12P\n\x07integer\x18\x05\x20\x01(\
    \x0b24.bitdrift_public.protobuf.client.v1.Matcher.IntMatchH\0R\x07intege\
    r\x12a\n\nconsistent\x18\x06\x20\x01(\x0b2?.bitdrift_public.protobuf.cli\
    ent.v1.Matcher.ConsistentHashMatchH\0R\nconsistent\x1aS\n\x03Key\x12?\n\
    \x16static_device_metadata\x18\x01\x20\x01(\tH\0R\x14staticDeviceMetadat\
    aB\x07\xfaB\x04r\x02\x10\x01B\x0b\n\x04type\x12\x03\xf8B\x01\x1a`\n\x0bM\
    atcherList\x12Q\n\x08matchers\x18\x01\x20\x03(\x0b2+.bitdrift_public.pro\
    tobuf.client.v1.MatcherR\x08matchersB\x08\xfaB\x05\x92\x01\x02\x08\x02\
    \x1a\xe1\x01\n\x0bStringMatch\x12K\n\x03key\x18\x01\x20\x01(\x0b2/.bitdr\
    ift_public.protobuf.client.v1.Matcher.KeyR\x03keyB\x08\xfaB\x05\x8a\x01\
    \x02\x10\x01\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value\x12[\n\nmat\
    ch_type\x18\x03\x20\x01(\x0e2<.bitdrift_public.protobuf.client.v1.Matche\
    r.StringMatch.TypeR\tmatchType\"\x12\n\x04Type\x12\n\n\x06EQUALS\x10\0\
    \x1a\x88\x02\n\x08IntMatch\x12K\n\x03key\x18\x01\x20\x01(\x0b2/.bitdrift\
    _public.protobuf.client.v1.Matcher.KeyR\x03keyB\x08\xfaB\x05\x8a\x01\x02\
    \x10\x01\x12\x14\n\x05value\x18\x02\x20\x01(\x03R\x05value\x12X\n\nmatch\
    _type\x18\x03\x20\x01(\x0e29.bitdrift_public.protobuf.client.v1.Matcher.\
    IntMatch.TypeR\tmatchType\"?\n\x04Type\x12\n\n\x06EQUALS\x10\0\x12\x10\n\
    \x0cGREATER_THAN\x10\x01\x12\x19\n\x15GREATER_THAN_OR_EQUAL\x10\x02\x1a\
    \xb6\x01\n\x13ConsistentHashMatch\x12K\n\x03key\x18\x01\x20\x01(\x0b2/.b\
    itdrift_public.protobuf.client.v1.Matcher.KeyR\x03keyB\x08\xfaB\x05\x8a\
    \x01\x02\x10\x01\x12\x12\n\x04seed\x18\x02\x20\x01(\x04R\x04seed\x12\x1c\
    \n\tnumerator\x18\x03\x20\x01(\x04R\tnumerator\x12\x20\n\x0bdenominator\
    \x18\x04\x20\x01(\x04R\x0bdenominatorB\x0b\n\x04type\x12\x03\xf8B\x01\"\
    \xdc\x02\n\x0bRootMatcher\x12c\n\rclient_target\x18\x01\x20\x01(\x0b2<.b\
    itdrift_public.protobuf.client.v1.RootMatcher.ClientTargetH\0R\x0cclient\
    Target\x12c\n\rserver_target\x18\x02\x20\x01(\x0b2<.bitdrift_public.prot\
    obuf.client.v1.RootMatcher.ServerTargetH\0R\x0cserverTarget\x12O\n\x07ma\
    tcher\x18\x03\x20\x01(\x0b2+.bitdrift_public.protobuf.client.v1.MatcherR\
    \x07matcherB\x08\xfaB\x05\x8a\x01\x02\x10\x01\x1a\x0e\n\x0cClientTarget\
    \x1a\x0e\n\x0cServerTargetB\x12\n\x0btarget_type\x12\x03\xf8B\x01b\x06pr\
    oto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::validate::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(9);
            messages.push(Matcher::generated_message_descriptor_data());
            messages.push(RootMatcher::generated_message_descriptor_data());
            messages.push(matcher::Key::generated_message_descriptor_data());
            messages.push(matcher::MatcherList::generated_message_descriptor_data());
            messages.push(matcher::StringMatch::generated_message_descriptor_data());
            messages.push(matcher::IntMatch::generated_message_descriptor_data());
            messages.push(matcher::ConsistentHashMatch::generated_message_descriptor_data());
            messages.push(root_matcher::ClientTarget::generated_message_descriptor_data());
            messages.push(root_matcher::ServerTarget::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(matcher::string_match::Type::generated_enum_descriptor_data());
            enums.push(matcher::int_match::Type::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
