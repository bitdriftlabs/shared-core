// proto - bitdrift's client/server API definitions
// Copyright Bitdrift, Inc. All rights reserved.
//
// Use of this source code and APIs are governed by a source available license that can be found in
// the LICENSE file or at:
// https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt

// This file is generated by rust-protobuf 4.0.0-alpha.0. Do not edit
// .proto file is parsed by protoc 27.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `bitdrift_public/protobuf/client/v1/runtime.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_4_0_0_ALPHA_0;

// @@protoc_insertion_point(message:bitdrift_public.protobuf.client.v1.RuntimeSet)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RuntimeSet {
    // message fields
    // @@protoc_insertion_point(field:bitdrift_public.protobuf.client.v1.RuntimeSet.runtimes)
    pub runtimes: ::std::vec::Vec<runtime_set::RuntimeAndMatcher>,
    // special fields
    // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.client.v1.RuntimeSet.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RuntimeSet {
    fn default() -> &'a RuntimeSet {
        <RuntimeSet as ::protobuf::Message>::default_instance()
    }
}

impl RuntimeSet {
    pub fn new() -> RuntimeSet {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "runtimes",
            |m: &RuntimeSet| { &m.runtimes },
            |m: &mut RuntimeSet| { &mut m.runtimes },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RuntimeSet>(
            "RuntimeSet",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RuntimeSet {
    const NAME: &'static str = "RuntimeSet";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.runtimes.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.runtimes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.runtimes {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RuntimeSet {
        RuntimeSet::new()
    }

    fn clear(&mut self) {
        self.runtimes.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RuntimeSet {
        static instance: RuntimeSet = RuntimeSet {
            runtimes: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RuntimeSet {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RuntimeSet").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RuntimeSet {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RuntimeSet {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `RuntimeSet`
pub mod runtime_set {
    // @@protoc_insertion_point(message:bitdrift_public.protobuf.client.v1.RuntimeSet.RuntimeAndMatcher)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct RuntimeAndMatcher {
        // message fields
        // @@protoc_insertion_point(field:bitdrift_public.protobuf.client.v1.RuntimeSet.RuntimeAndMatcher.matcher)
        pub matcher: ::protobuf::MessageField<super::super::matcher::Matcher>,
        // @@protoc_insertion_point(field:bitdrift_public.protobuf.client.v1.RuntimeSet.RuntimeAndMatcher.runtime)
        pub runtime: ::protobuf::MessageField<super::Runtime>,
        // special fields
        // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.client.v1.RuntimeSet.RuntimeAndMatcher.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a RuntimeAndMatcher {
        fn default() -> &'a RuntimeAndMatcher {
            <RuntimeAndMatcher as ::protobuf::Message>::default_instance()
        }
    }

    impl RuntimeAndMatcher {
        pub fn new() -> RuntimeAndMatcher {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::matcher::Matcher>(
                "matcher",
                |m: &RuntimeAndMatcher| { &m.matcher },
                |m: &mut RuntimeAndMatcher| { &mut m.matcher },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Runtime>(
                "runtime",
                |m: &RuntimeAndMatcher| { &m.runtime },
                |m: &mut RuntimeAndMatcher| { &mut m.runtime },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RuntimeAndMatcher>(
                "RuntimeSet.RuntimeAndMatcher",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for RuntimeAndMatcher {
        const NAME: &'static str = "RuntimeAndMatcher";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.matcher)?;
                    },
                    18 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.runtime)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.matcher.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.runtime.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.matcher.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            if let Some(v) = self.runtime.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> RuntimeAndMatcher {
            RuntimeAndMatcher::new()
        }

        fn clear(&mut self) {
            self.matcher.clear();
            self.runtime.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static RuntimeAndMatcher {
            static instance: RuntimeAndMatcher = RuntimeAndMatcher {
                matcher: ::protobuf::MessageField::none(),
                runtime: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for RuntimeAndMatcher {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("RuntimeSet.RuntimeAndMatcher").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for RuntimeAndMatcher {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for RuntimeAndMatcher {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:bitdrift_public.protobuf.client.v1.Runtime)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Runtime {
    // message fields
    // @@protoc_insertion_point(field:bitdrift_public.protobuf.client.v1.Runtime.values)
    pub values: ::std::collections::HashMap<::std::string::String, runtime::Value>,
    // special fields
    // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.client.v1.Runtime.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Runtime {
    fn default() -> &'a Runtime {
        <Runtime as ::protobuf::Message>::default_instance()
    }
}

impl Runtime {
    pub fn new() -> Runtime {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "values",
            |m: &Runtime| { &m.values },
            |m: &mut Runtime| { &mut m.values },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Runtime>(
            "Runtime",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Runtime {
    const NAME: &'static str = "Runtime";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.values.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for (k, v) in &self.values {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for (k, v) in &self.values {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(10)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Runtime {
        Runtime::new()
    }

    fn clear(&mut self) {
        self.values.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Runtime {
        static instance: ::protobuf::rt::Lazy<Runtime> = ::protobuf::rt::Lazy::new();
        instance.get(Runtime::new)
    }
}

impl ::protobuf::MessageFull for Runtime {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Runtime").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Runtime {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Runtime {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Runtime`
pub mod runtime {
    // @@protoc_insertion_point(message:bitdrift_public.protobuf.client.v1.Runtime.Value)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Value {
        // message oneof groups
        pub type_: ::std::option::Option<value::Type>,
        // special fields
        // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.client.v1.Runtime.Value.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Value {
        fn default() -> &'a Value {
            <Value as ::protobuf::Message>::default_instance()
        }
    }

    impl Value {
        pub fn new() -> Value {
            ::std::default::Default::default()
        }

        // bool bool_value = 1;

        pub fn bool_value(&self) -> bool {
            match self.type_ {
                ::std::option::Option::Some(value::Type::BoolValue(v)) => v,
                _ => false,
            }
        }

        pub fn clear_bool_value(&mut self) {
            self.type_ = ::std::option::Option::None;
        }

        pub fn has_bool_value(&self) -> bool {
            match self.type_ {
                ::std::option::Option::Some(value::Type::BoolValue(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_bool_value(&mut self, v: bool) {
            self.type_ = ::std::option::Option::Some(value::Type::BoolValue(v))
        }

        // uint32 uint_value = 2;

        pub fn uint_value(&self) -> u32 {
            match self.type_ {
                ::std::option::Option::Some(value::Type::UintValue(v)) => v,
                _ => 0,
            }
        }

        pub fn clear_uint_value(&mut self) {
            self.type_ = ::std::option::Option::None;
        }

        pub fn has_uint_value(&self) -> bool {
            match self.type_ {
                ::std::option::Option::Some(value::Type::UintValue(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_uint_value(&mut self, v: u32) {
            self.type_ = ::std::option::Option::Some(value::Type::UintValue(v))
        }

        // string string_value = 3;

        pub fn string_value(&self) -> &str {
            match self.type_ {
                ::std::option::Option::Some(value::Type::StringValue(ref v)) => v,
                _ => "",
            }
        }

        pub fn clear_string_value(&mut self) {
            self.type_ = ::std::option::Option::None;
        }

        pub fn has_string_value(&self) -> bool {
            match self.type_ {
                ::std::option::Option::Some(value::Type::StringValue(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_string_value(&mut self, v: ::std::string::String) {
            self.type_ = ::std::option::Option::Some(value::Type::StringValue(v))
        }

        // Mutable pointer to the field.
        pub fn mut_string_value(&mut self) -> &mut ::std::string::String {
            if let ::std::option::Option::Some(value::Type::StringValue(_)) = self.type_ {
            } else {
                self.type_ = ::std::option::Option::Some(value::Type::StringValue(::std::string::String::new()));
            }
            match self.type_ {
                ::std::option::Option::Some(value::Type::StringValue(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_string_value(&mut self) -> ::std::string::String {
            if self.has_string_value() {
                match self.type_.take() {
                    ::std::option::Option::Some(value::Type::StringValue(v)) => v,
                    _ => panic!(),
                }
            } else {
                ::std::string::String::new()
            }
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(1);
            fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
                "bool_value",
                Value::has_bool_value,
                Value::bool_value,
                Value::set_bool_value,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
                "uint_value",
                Value::has_uint_value,
                Value::uint_value,
                Value::set_uint_value,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
                "string_value",
                Value::has_string_value,
                Value::string_value,
                Value::set_string_value,
            ));
            oneofs.push(value::Type::generated_oneof_descriptor_data());
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Value>(
                "Runtime.Value",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Value {
        const NAME: &'static str = "Value";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.type_ = ::std::option::Option::Some(value::Type::BoolValue(is.read_bool()?));
                    },
                    16 => {
                        self.type_ = ::std::option::Option::Some(value::Type::UintValue(is.read_uint32()?));
                    },
                    26 => {
                        self.type_ = ::std::option::Option::Some(value::Type::StringValue(is.read_string()?));
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let ::std::option::Option::Some(ref v) = self.type_ {
                match v {
                    &value::Type::BoolValue(v) => {
                        my_size += 1 + 1;
                    },
                    &value::Type::UintValue(v) => {
                        my_size += ::protobuf::rt::uint32_size(2, v);
                    },
                    &value::Type::StringValue(ref v) => {
                        my_size += ::protobuf::rt::string_size(3, &v);
                    },
                };
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let ::std::option::Option::Some(ref v) = self.type_ {
                match v {
                    &value::Type::BoolValue(v) => {
                        os.write_bool(1, v)?;
                    },
                    &value::Type::UintValue(v) => {
                        os.write_uint32(2, v)?;
                    },
                    &value::Type::StringValue(ref v) => {
                        os.write_string(3, v)?;
                    },
                };
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Value {
            Value::new()
        }

        fn clear(&mut self) {
            self.type_ = ::std::option::Option::None;
            self.type_ = ::std::option::Option::None;
            self.type_ = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Value {
            static instance: Value = Value {
                type_: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Value {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Runtime.Value").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Value {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Value {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `Value`
    pub mod value {

        #[derive(Clone,PartialEq,Debug)]
        // @@protoc_insertion_point(oneof:bitdrift_public.protobuf.client.v1.Runtime.Value.type)
        pub enum Type {
            // @@protoc_insertion_point(oneof_field:bitdrift_public.protobuf.client.v1.Runtime.Value.bool_value)
            BoolValue(bool),
            // @@protoc_insertion_point(oneof_field:bitdrift_public.protobuf.client.v1.Runtime.Value.uint_value)
            UintValue(u32),
            // @@protoc_insertion_point(oneof_field:bitdrift_public.protobuf.client.v1.Runtime.Value.string_value)
            StringValue(::std::string::String),
        }

        impl ::protobuf::Oneof for Type {
        }

        impl ::protobuf::OneofFull for Type {
            fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| <super::Value as ::protobuf::MessageFull>::descriptor().oneof_by_name("type").unwrap()).clone()
            }
        }

        impl Type {
            pub(in super::super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
                ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Type>("type")
            }
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n0bitdrift_public/protobuf/client/v1/runtime.proto\x12\"bitdrift_public\
    .protobuf.client.v1\x1a0bitdrift_public/protobuf/client/v1/matcher.proto\
    \x1a\x17validate/validate.proto\"\xa2\x02\n\nRuntimeSet\x12\\\n\x08runti\
    mes\x18\x01\x20\x03(\x0b2@.bitdrift_public.protobuf.client.v1.RuntimeSet\
    .RuntimeAndMatcherR\x08runtimes\x1a\xb5\x01\n\x11RuntimeAndMatcher\x12O\
    \n\x07matcher\x18\x01\x20\x01(\x0b2+.bitdrift_public.protobuf.client.v1.\
    MatcherR\x07matcherB\x08\xfaB\x05\x8a\x01\x02\x10\x01\x12O\n\x07runtime\
    \x18\x02\x20\x01(\x0b2+.bitdrift_public.protobuf.client.v1.RuntimeR\x07r\
    untimeB\x08\xfaB\x05\x8a\x01\x02\x10\x01\"\xc5\x02\n\x07Runtime\x12O\n\
    \x06values\x18\x01\x20\x03(\x0b27.bitdrift_public.protobuf.client.v1.Run\
    time.ValuesEntryR\x06values\x1a{\n\x05Value\x12\x1f\n\nbool_value\x18\
    \x01\x20\x01(\x08H\0R\tboolValue\x12\x1f\n\nuint_value\x18\x02\x20\x01(\
    \rH\0R\tuintValue\x12#\n\x0cstring_value\x18\x03\x20\x01(\tH\0R\x0bstrin\
    gValueB\x0b\n\x04type\x12\x03\xf8B\x01\x1al\n\x0bValuesEntry\x12\x10\n\
    \x03key\x18\x01\x20\x01(\tR\x03key\x12G\n\x05value\x18\x02\x20\x01(\x0b2\
    1.bitdrift_public.protobuf.client.v1.Runtime.ValueR\x05value:\x028\x01b\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::matcher::file_descriptor().clone());
            deps.push(super::validate::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(RuntimeSet::generated_message_descriptor_data());
            messages.push(Runtime::generated_message_descriptor_data());
            messages.push(runtime_set::RuntimeAndMatcher::generated_message_descriptor_data());
            messages.push(runtime::Value::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
