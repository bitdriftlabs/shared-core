// proto - bitdrift's client/server API definitions
// Copyright Bitdrift, Inc. All rights reserved.
//
// Use of this source code and APIs are governed by a source available license that can be found in
// the LICENSE file or at:
// https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt

// This file is generated by rust-protobuf 4.0.0-alpha.0. Do not edit
// .proto file is parsed by protoc 32.0
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `bitdrift_public/protobuf/client/v1/metric.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_4_0_0_ALPHA_0;

// @@protoc_insertion_point(message:bitdrift_public.protobuf.client.v1.PendingAggregationIndex)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PendingAggregationIndex {
    // message fields
    // @@protoc_insertion_point(field:bitdrift_public.protobuf.client.v1.PendingAggregationIndex.pending_files)
    pub pending_files: ::std::vec::Vec<pending_aggregation_index::PendingFile>,
    // special fields
    // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.client.v1.PendingAggregationIndex.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PendingAggregationIndex {
    fn default() -> &'a PendingAggregationIndex {
        <PendingAggregationIndex as ::protobuf::Message>::default_instance()
    }
}

impl PendingAggregationIndex {
    pub fn new() -> PendingAggregationIndex {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "pending_files",
            |m: &PendingAggregationIndex| { &m.pending_files },
            |m: &mut PendingAggregationIndex| { &mut m.pending_files },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PendingAggregationIndex>(
            "PendingAggregationIndex",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PendingAggregationIndex {
    const NAME: &'static str = "PendingAggregationIndex";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.pending_files.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.pending_files {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.pending_files {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PendingAggregationIndex {
        PendingAggregationIndex::new()
    }

    fn clear(&mut self) {
        self.pending_files.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PendingAggregationIndex {
        static instance: PendingAggregationIndex = PendingAggregationIndex {
            pending_files: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PendingAggregationIndex {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PendingAggregationIndex").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PendingAggregationIndex {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PendingAggregationIndex {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `PendingAggregationIndex`
pub mod pending_aggregation_index {
    // @@protoc_insertion_point(message:bitdrift_public.protobuf.client.v1.PendingAggregationIndex.PendingFile)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct PendingFile {
        // message fields
        // @@protoc_insertion_point(field:bitdrift_public.protobuf.client.v1.PendingAggregationIndex.PendingFile.name)
        pub name: ::std::string::String,
        // @@protoc_insertion_point(field:bitdrift_public.protobuf.client.v1.PendingAggregationIndex.PendingFile.period_start)
        pub period_start: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
        // @@protoc_insertion_point(field:bitdrift_public.protobuf.client.v1.PendingAggregationIndex.PendingFile.period_end)
        pub period_end: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
        // special fields
        // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.client.v1.PendingAggregationIndex.PendingFile.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PendingFile {
        fn default() -> &'a PendingFile {
            <PendingFile as ::protobuf::Message>::default_instance()
        }
    }

    impl PendingFile {
        pub fn new() -> PendingFile {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "name",
                |m: &PendingFile| { &m.name },
                |m: &mut PendingFile| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
                "period_start",
                |m: &PendingFile| { &m.period_start },
                |m: &mut PendingFile| { &mut m.period_start },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
                "period_end",
                |m: &PendingFile| { &m.period_end },
                |m: &mut PendingFile| { &mut m.period_end },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PendingFile>(
                "PendingAggregationIndex.PendingFile",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for PendingFile {
        const NAME: &'static str = "PendingFile";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.name = is.read_string()?;
                    },
                    18 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.period_start)?;
                    },
                    26 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.period_end)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.name.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.name);
            }
            if let Some(v) = self.period_start.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.period_end.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.name.is_empty() {
                os.write_string(1, &self.name)?;
            }
            if let Some(v) = self.period_start.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            if let Some(v) = self.period_end.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PendingFile {
            PendingFile::new()
        }

        fn clear(&mut self) {
            self.name.clear();
            self.period_start.clear();
            self.period_end.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PendingFile {
            static instance: PendingFile = PendingFile {
                name: ::std::string::String::new(),
                period_start: ::protobuf::MessageField::none(),
                period_end: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for PendingFile {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("PendingAggregationIndex.PendingFile").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for PendingFile {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for PendingFile {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:bitdrift_public.protobuf.client.v1.Counter)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Counter {
    // message fields
    // @@protoc_insertion_point(field:bitdrift_public.protobuf.client.v1.Counter.value)
    pub value: u64,
    // special fields
    // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.client.v1.Counter.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Counter {
    fn default() -> &'a Counter {
        <Counter as ::protobuf::Message>::default_instance()
    }
}

impl Counter {
    pub fn new() -> Counter {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &Counter| { &m.value },
            |m: &mut Counter| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Counter>(
            "Counter",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Counter {
    const NAME: &'static str = "Counter";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                16 => {
                    self.value = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.value != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.value != 0 {
            os.write_uint64(2, self.value)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Counter {
        Counter::new()
    }

    fn clear(&mut self) {
        self.value = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Counter {
        static instance: Counter = Counter {
            value: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Counter {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Counter").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Counter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Counter {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:bitdrift_public.protobuf.client.v1.DDSketchHistogram)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DDSketchHistogram {
    // message fields
    // @@protoc_insertion_point(field:bitdrift_public.protobuf.client.v1.DDSketchHistogram.serialized)
    pub serialized: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.client.v1.DDSketchHistogram.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DDSketchHistogram {
    fn default() -> &'a DDSketchHistogram {
        <DDSketchHistogram as ::protobuf::Message>::default_instance()
    }
}

impl DDSketchHistogram {
    pub fn new() -> DDSketchHistogram {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "serialized",
            |m: &DDSketchHistogram| { &m.serialized },
            |m: &mut DDSketchHistogram| { &mut m.serialized },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DDSketchHistogram>(
            "DDSketchHistogram",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DDSketchHistogram {
    const NAME: &'static str = "DDSketchHistogram";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.serialized = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.serialized.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.serialized);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.serialized.is_empty() {
            os.write_bytes(1, &self.serialized)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DDSketchHistogram {
        DDSketchHistogram::new()
    }

    fn clear(&mut self) {
        self.serialized.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DDSketchHistogram {
        static instance: DDSketchHistogram = DDSketchHistogram {
            serialized: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DDSketchHistogram {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DDSketchHistogram").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DDSketchHistogram {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DDSketchHistogram {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:bitdrift_public.protobuf.client.v1.InlineHistogramValues)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct InlineHistogramValues {
    // message fields
    // @@protoc_insertion_point(field:bitdrift_public.protobuf.client.v1.InlineHistogramValues.values)
    pub values: ::std::vec::Vec<f64>,
    // special fields
    // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.client.v1.InlineHistogramValues.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a InlineHistogramValues {
    fn default() -> &'a InlineHistogramValues {
        <InlineHistogramValues as ::protobuf::Message>::default_instance()
    }
}

impl InlineHistogramValues {
    pub fn new() -> InlineHistogramValues {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "values",
            |m: &InlineHistogramValues| { &m.values },
            |m: &mut InlineHistogramValues| { &mut m.values },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<InlineHistogramValues>(
            "InlineHistogramValues",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for InlineHistogramValues {
    const NAME: &'static str = "InlineHistogramValues";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_double_into(&mut self.values)?;
                },
                9 => {
                    self.values.push(is.read_double()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::vec_packed_double_size(1, &self.values);
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_repeated_packed_double(1, &self.values)?;
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> InlineHistogramValues {
        InlineHistogramValues::new()
    }

    fn clear(&mut self) {
        self.values.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static InlineHistogramValues {
        static instance: InlineHistogramValues = InlineHistogramValues {
            values: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for InlineHistogramValues {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("InlineHistogramValues").unwrap()).clone()
    }
}

impl ::std::fmt::Display for InlineHistogramValues {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InlineHistogramValues {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:bitdrift_public.protobuf.client.v1.Metric)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Metric {
    // message fields
    // @@protoc_insertion_point(field:bitdrift_public.protobuf.client.v1.Metric.tags)
    pub tags: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // message oneof groups
    pub metric_name_type: ::std::option::Option<metric::Metric_name_type>,
    pub data: ::std::option::Option<metric::Data>,
    // special fields
    // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.client.v1.Metric.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Metric {
    fn default() -> &'a Metric {
        <Metric as ::protobuf::Message>::default_instance()
    }
}

impl Metric {
    pub fn new() -> Metric {
        ::std::default::Default::default()
    }

    // string name = 1;

    pub fn name(&self) -> &str {
        match self.metric_name_type {
            ::std::option::Option::Some(metric::Metric_name_type::Name(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.metric_name_type = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        match self.metric_name_type {
            ::std::option::Option::Some(metric::Metric_name_type::Name(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.metric_name_type = ::std::option::Option::Some(metric::Metric_name_type::Name(v))
    }

    // Mutable pointer to the field.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(metric::Metric_name_type::Name(_)) = self.metric_name_type {
        } else {
            self.metric_name_type = ::std::option::Option::Some(metric::Metric_name_type::Name(::std::string::String::new()));
        }
        match self.metric_name_type {
            ::std::option::Option::Some(metric::Metric_name_type::Name(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        if self.has_name() {
            match self.metric_name_type.take() {
                ::std::option::Option::Some(metric::Metric_name_type::Name(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string metric_id = 7;

    pub fn metric_id(&self) -> &str {
        match self.metric_name_type {
            ::std::option::Option::Some(metric::Metric_name_type::MetricId(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_metric_id(&mut self) {
        self.metric_name_type = ::std::option::Option::None;
    }

    pub fn has_metric_id(&self) -> bool {
        match self.metric_name_type {
            ::std::option::Option::Some(metric::Metric_name_type::MetricId(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_metric_id(&mut self, v: ::std::string::String) {
        self.metric_name_type = ::std::option::Option::Some(metric::Metric_name_type::MetricId(v))
    }

    // Mutable pointer to the field.
    pub fn mut_metric_id(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(metric::Metric_name_type::MetricId(_)) = self.metric_name_type {
        } else {
            self.metric_name_type = ::std::option::Option::Some(metric::Metric_name_type::MetricId(::std::string::String::new()));
        }
        match self.metric_name_type {
            ::std::option::Option::Some(metric::Metric_name_type::MetricId(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_metric_id(&mut self) -> ::std::string::String {
        if self.has_metric_id() {
            match self.metric_name_type.take() {
                ::std::option::Option::Some(metric::Metric_name_type::MetricId(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // .bitdrift_public.protobuf.client.v1.Counter counter = 3;

    pub fn counter(&self) -> &Counter {
        match self.data {
            ::std::option::Option::Some(metric::Data::Counter(ref v)) => v,
            _ => <Counter as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_counter(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_counter(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(metric::Data::Counter(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_counter(&mut self, v: Counter) {
        self.data = ::std::option::Option::Some(metric::Data::Counter(v))
    }

    // Mutable pointer to the field.
    pub fn mut_counter(&mut self) -> &mut Counter {
        if let ::std::option::Option::Some(metric::Data::Counter(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(metric::Data::Counter(Counter::new()));
        }
        match self.data {
            ::std::option::Option::Some(metric::Data::Counter(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_counter(&mut self) -> Counter {
        if self.has_counter() {
            match self.data.take() {
                ::std::option::Option::Some(metric::Data::Counter(v)) => v,
                _ => panic!(),
            }
        } else {
            Counter::new()
        }
    }

    // .bitdrift_public.protobuf.client.v1.DDSketchHistogram ddsketch_histogram = 5;

    pub fn ddsketch_histogram(&self) -> &DDSketchHistogram {
        match self.data {
            ::std::option::Option::Some(metric::Data::DdsketchHistogram(ref v)) => v,
            _ => <DDSketchHistogram as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_ddsketch_histogram(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_ddsketch_histogram(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(metric::Data::DdsketchHistogram(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ddsketch_histogram(&mut self, v: DDSketchHistogram) {
        self.data = ::std::option::Option::Some(metric::Data::DdsketchHistogram(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ddsketch_histogram(&mut self) -> &mut DDSketchHistogram {
        if let ::std::option::Option::Some(metric::Data::DdsketchHistogram(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(metric::Data::DdsketchHistogram(DDSketchHistogram::new()));
        }
        match self.data {
            ::std::option::Option::Some(metric::Data::DdsketchHistogram(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ddsketch_histogram(&mut self) -> DDSketchHistogram {
        if self.has_ddsketch_histogram() {
            match self.data.take() {
                ::std::option::Option::Some(metric::Data::DdsketchHistogram(v)) => v,
                _ => panic!(),
            }
        } else {
            DDSketchHistogram::new()
        }
    }

    // .bitdrift_public.protobuf.client.v1.InlineHistogramValues inline_histogram_values = 6;

    pub fn inline_histogram_values(&self) -> &InlineHistogramValues {
        match self.data {
            ::std::option::Option::Some(metric::Data::InlineHistogramValues(ref v)) => v,
            _ => <InlineHistogramValues as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_inline_histogram_values(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_inline_histogram_values(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(metric::Data::InlineHistogramValues(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_inline_histogram_values(&mut self, v: InlineHistogramValues) {
        self.data = ::std::option::Option::Some(metric::Data::InlineHistogramValues(v))
    }

    // Mutable pointer to the field.
    pub fn mut_inline_histogram_values(&mut self) -> &mut InlineHistogramValues {
        if let ::std::option::Option::Some(metric::Data::InlineHistogramValues(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(metric::Data::InlineHistogramValues(InlineHistogramValues::new()));
        }
        match self.data {
            ::std::option::Option::Some(metric::Data::InlineHistogramValues(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_inline_histogram_values(&mut self) -> InlineHistogramValues {
        if self.has_inline_histogram_values() {
            match self.data.take() {
                ::std::option::Option::Some(metric::Data::InlineHistogramValues(v)) => v,
                _ => panic!(),
            }
        } else {
            InlineHistogramValues::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(2);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "name",
            Metric::has_name,
            Metric::name,
            Metric::set_name,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "metric_id",
            Metric::has_metric_id,
            Metric::metric_id,
            Metric::set_metric_id,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "tags",
            |m: &Metric| { &m.tags },
            |m: &mut Metric| { &mut m.tags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Counter>(
            "counter",
            Metric::has_counter,
            Metric::counter,
            Metric::mut_counter,
            Metric::set_counter,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, DDSketchHistogram>(
            "ddsketch_histogram",
            Metric::has_ddsketch_histogram,
            Metric::ddsketch_histogram,
            Metric::mut_ddsketch_histogram,
            Metric::set_ddsketch_histogram,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, InlineHistogramValues>(
            "inline_histogram_values",
            Metric::has_inline_histogram_values,
            Metric::inline_histogram_values,
            Metric::mut_inline_histogram_values,
            Metric::set_inline_histogram_values,
        ));
        oneofs.push(metric::Metric_name_type::generated_oneof_descriptor_data());
        oneofs.push(metric::Data::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Metric>(
            "Metric",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Metric {
    const NAME: &'static str = "Metric";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.metric_name_type = ::std::option::Option::Some(metric::Metric_name_type::Name(is.read_string()?));
                },
                58 => {
                    self.metric_name_type = ::std::option::Option::Some(metric::Metric_name_type::MetricId(is.read_string()?));
                },
                18 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.tags.insert(key, value);
                },
                26 => {
                    self.data = ::std::option::Option::Some(metric::Data::Counter(is.read_message()?));
                },
                42 => {
                    self.data = ::std::option::Option::Some(metric::Data::DdsketchHistogram(is.read_message()?));
                },
                50 => {
                    self.data = ::std::option::Option::Some(metric::Data::InlineHistogramValues(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for (k, v) in &self.tags {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if let ::std::option::Option::Some(ref v) = self.metric_name_type {
            match v {
                &metric::Metric_name_type::Name(ref v) => {
                    my_size += ::protobuf::rt::string_size(1, &v);
                },
                &metric::Metric_name_type::MetricId(ref v) => {
                    my_size += ::protobuf::rt::string_size(7, &v);
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &metric::Data::Counter(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &metric::Data::DdsketchHistogram(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &metric::Data::InlineHistogramValues(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for (k, v) in &self.tags {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(18)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        if let ::std::option::Option::Some(ref v) = self.metric_name_type {
            match v {
                &metric::Metric_name_type::Name(ref v) => {
                    os.write_string(1, v)?;
                },
                &metric::Metric_name_type::MetricId(ref v) => {
                    os.write_string(7, v)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &metric::Data::Counter(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &metric::Data::DdsketchHistogram(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &metric::Data::InlineHistogramValues(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Metric {
        Metric::new()
    }

    fn clear(&mut self) {
        self.metric_name_type = ::std::option::Option::None;
        self.metric_name_type = ::std::option::Option::None;
        self.tags.clear();
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Metric {
        static instance: ::protobuf::rt::Lazy<Metric> = ::protobuf::rt::Lazy::new();
        instance.get(Metric::new)
    }
}

impl ::protobuf::MessageFull for Metric {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Metric").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Metric {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Metric {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Metric`
pub mod metric {

    #[derive(Clone,PartialEq,Debug)]
    // @@protoc_insertion_point(oneof:bitdrift_public.protobuf.client.v1.Metric.metric_name_type)
    pub enum Metric_name_type {
        // @@protoc_insertion_point(oneof_field:bitdrift_public.protobuf.client.v1.Metric.name)
        Name(::std::string::String),
        // @@protoc_insertion_point(oneof_field:bitdrift_public.protobuf.client.v1.Metric.metric_id)
        MetricId(::std::string::String),
    }

    impl ::protobuf::Oneof for Metric_name_type {
    }

    impl ::protobuf::OneofFull for Metric_name_type {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Metric as ::protobuf::MessageFull>::descriptor().oneof_by_name("metric_name_type").unwrap()).clone()
        }
    }

    impl Metric_name_type {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Metric_name_type>("metric_name_type")
        }
    }

    #[derive(Clone,PartialEq,Debug)]
    // @@protoc_insertion_point(oneof:bitdrift_public.protobuf.client.v1.Metric.data)
    pub enum Data {
        // @@protoc_insertion_point(oneof_field:bitdrift_public.protobuf.client.v1.Metric.counter)
        Counter(super::Counter),
        // @@protoc_insertion_point(oneof_field:bitdrift_public.protobuf.client.v1.Metric.ddsketch_histogram)
        DdsketchHistogram(super::DDSketchHistogram),
        // @@protoc_insertion_point(oneof_field:bitdrift_public.protobuf.client.v1.Metric.inline_histogram_values)
        InlineHistogramValues(super::InlineHistogramValues),
    }

    impl ::protobuf::Oneof for Data {
    }

    impl ::protobuf::OneofFull for Data {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Metric as ::protobuf::MessageFull>::descriptor().oneof_by_name("data").unwrap()).clone()
        }
    }

    impl Data {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Data>("data")
        }
    }
}

// @@protoc_insertion_point(message:bitdrift_public.protobuf.client.v1.MetricsList)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MetricsList {
    // message fields
    // @@protoc_insertion_point(field:bitdrift_public.protobuf.client.v1.MetricsList.metric)
    pub metric: ::std::vec::Vec<Metric>,
    // special fields
    // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.client.v1.MetricsList.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MetricsList {
    fn default() -> &'a MetricsList {
        <MetricsList as ::protobuf::Message>::default_instance()
    }
}

impl MetricsList {
    pub fn new() -> MetricsList {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "metric",
            |m: &MetricsList| { &m.metric },
            |m: &mut MetricsList| { &mut m.metric },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MetricsList>(
            "MetricsList",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MetricsList {
    const NAME: &'static str = "MetricsList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.metric.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.metric {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.metric {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MetricsList {
        MetricsList::new()
    }

    fn clear(&mut self) {
        self.metric.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MetricsList {
        static instance: MetricsList = MetricsList {
            metric: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MetricsList {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MetricsList").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MetricsList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetricsList {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n/bitdrift_public/protobuf/client/v1/metric.proto\x12\"bitdrift_public.\
    protobuf.client.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x17validat\
    e/validate.proto\"\xa5\x02\n\x17PendingAggregationIndex\x12l\n\rpending_\
    files\x18\x01\x20\x03(\x0b2G.bitdrift_public.protobuf.client.v1.PendingA\
    ggregationIndex.PendingFileR\x0cpendingFiles\x1a\x9b\x01\n\x0bPendingFil\
    e\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12=\n\x0cperiod_start\
    \x18\x02\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x0bperiodStart\x12\
    9\n\nperiod_end\x18\x03\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\tpe\
    riodEnd\"%\n\x07Counter\x12\x14\n\x05value\x18\x02\x20\x01(\x04R\x05valu\
    eJ\x04\x08\x01\x10\x02\"3\n\x11DDSketchHistogram\x12\x1e\n\nserialized\
    \x18\x01\x20\x01(\x0cR\nserialized\"/\n\x15InlineHistogramValues\x12\x16\
    \n\x06values\x18\x01\x20\x03(\x01R\x06values\"\x8d\x04\n\x06Metric\x12\
    \x14\n\x04name\x18\x01\x20\x01(\tH\0R\x04name\x12\x1d\n\tmetric_id\x18\
    \x07\x20\x01(\tH\0R\x08metricId\x12H\n\x04tags\x18\x02\x20\x03(\x0b24.bi\
    tdrift_public.protobuf.client.v1.Metric.TagsEntryR\x04tags\x12G\n\x07cou\
    nter\x18\x03\x20\x01(\x0b2+.bitdrift_public.protobuf.client.v1.CounterH\
    \x01R\x07counter\x12f\n\x12ddsketch_histogram\x18\x05\x20\x01(\x0b25.bit\
    drift_public.protobuf.client.v1.DDSketchHistogramH\x01R\x11ddsketchHisto\
    gram\x12s\n\x17inline_histogram_values\x18\x06\x20\x01(\x0b29.bitdrift_p\
    ublic.protobuf.client.v1.InlineHistogramValuesH\x01R\x15inlineHistogramV\
    alues\x1a7\n\tTagsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\
    \x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01B\x12\n\x10metric_\
    name_typeB\x0b\n\x04data\x12\x03\xf8B\x01J\x04\x08\x04\x10\x05\"Q\n\x0bM\
    etricsList\x12B\n\x06metric\x18\x01\x20\x03(\x0b2*.bitdrift_public.proto\
    buf.client.v1.MetricR\x06metricb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            deps.push(super::validate::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(7);
            messages.push(PendingAggregationIndex::generated_message_descriptor_data());
            messages.push(Counter::generated_message_descriptor_data());
            messages.push(DDSketchHistogram::generated_message_descriptor_data());
            messages.push(InlineHistogramValues::generated_message_descriptor_data());
            messages.push(Metric::generated_message_descriptor_data());
            messages.push(MetricsList::generated_message_descriptor_data());
            messages.push(pending_aggregation_index::PendingFile::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
