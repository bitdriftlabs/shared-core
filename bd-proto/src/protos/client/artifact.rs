// proto - bitdrift's client/server API definitions
// Copyright Bitdrift, Inc. All rights reserved.
//
// Use of this source code and APIs are governed by a source available license that can be found in
// the LICENSE file or at:
// https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt

// This file is generated by rust-protobuf 4.0.0-alpha.0. Do not edit
// .proto file is parsed by protoc 32.0
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `bitdrift_public/protobuf/client/v1/artifact.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_4_0_0_ALPHA_0;

// @@protoc_insertion_point(message:bitdrift_public.protobuf.client.v1.ArtifactUploadIndex)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ArtifactUploadIndex {
    // message fields
    // @@protoc_insertion_point(field:bitdrift_public.protobuf.client.v1.ArtifactUploadIndex.artifact)
    pub artifact: ::std::vec::Vec<artifact_upload_index::Artifact>,
    // special fields
    // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.client.v1.ArtifactUploadIndex.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ArtifactUploadIndex {
    fn default() -> &'a ArtifactUploadIndex {
        <ArtifactUploadIndex as ::protobuf::Message>::default_instance()
    }
}

impl ArtifactUploadIndex {
    pub fn new() -> ArtifactUploadIndex {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "artifact",
            |m: &ArtifactUploadIndex| { &m.artifact },
            |m: &mut ArtifactUploadIndex| { &mut m.artifact },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ArtifactUploadIndex>(
            "ArtifactUploadIndex",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ArtifactUploadIndex {
    const NAME: &'static str = "ArtifactUploadIndex";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.artifact.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.artifact {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.artifact {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ArtifactUploadIndex {
        ArtifactUploadIndex::new()
    }

    fn clear(&mut self) {
        self.artifact.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ArtifactUploadIndex {
        static instance: ArtifactUploadIndex = ArtifactUploadIndex {
            artifact: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ArtifactUploadIndex {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ArtifactUploadIndex").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ArtifactUploadIndex {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ArtifactUploadIndex {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ArtifactUploadIndex`
pub mod artifact_upload_index {
    // @@protoc_insertion_point(message:bitdrift_public.protobuf.client.v1.ArtifactUploadIndex.Artifact)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Artifact {
        // message fields
        // @@protoc_insertion_point(field:bitdrift_public.protobuf.client.v1.ArtifactUploadIndex.Artifact.name)
        pub name: ::std::string::String,
        // @@protoc_insertion_point(field:bitdrift_public.protobuf.client.v1.ArtifactUploadIndex.Artifact.time)
        pub time: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
        // @@protoc_insertion_point(field:bitdrift_public.protobuf.client.v1.ArtifactUploadIndex.Artifact.pending_intent_negotiation)
        pub pending_intent_negotiation: bool,
        // @@protoc_insertion_point(field:bitdrift_public.protobuf.client.v1.ArtifactUploadIndex.Artifact.state_metadata)
        pub state_metadata: ::std::collections::HashMap<::std::string::String, super::super::payload::Data>,
        // @@protoc_insertion_point(field:bitdrift_public.protobuf.client.v1.ArtifactUploadIndex.Artifact.session_id)
        pub session_id: ::std::string::String,
        // @@protoc_insertion_point(field:bitdrift_public.protobuf.client.v1.ArtifactUploadIndex.Artifact.feature_flags)
        pub feature_flags: ::std::vec::Vec<super::super::feature_flag::FeatureFlag>,
        // special fields
        // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.client.v1.ArtifactUploadIndex.Artifact.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Artifact {
        fn default() -> &'a Artifact {
            <Artifact as ::protobuf::Message>::default_instance()
        }
    }

    impl Artifact {
        pub fn new() -> Artifact {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(6);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "name",
                |m: &Artifact| { &m.name },
                |m: &mut Artifact| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
                "time",
                |m: &Artifact| { &m.time },
                |m: &mut Artifact| { &mut m.time },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "pending_intent_negotiation",
                |m: &Artifact| { &m.pending_intent_negotiation },
                |m: &mut Artifact| { &mut m.pending_intent_negotiation },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
                "state_metadata",
                |m: &Artifact| { &m.state_metadata },
                |m: &mut Artifact| { &mut m.state_metadata },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "session_id",
                |m: &Artifact| { &m.session_id },
                |m: &mut Artifact| { &mut m.session_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "feature_flags",
                |m: &Artifact| { &m.feature_flags },
                |m: &mut Artifact| { &mut m.feature_flags },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Artifact>(
                "ArtifactUploadIndex.Artifact",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Artifact {
        const NAME: &'static str = "Artifact";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.name = is.read_string()?;
                    },
                    18 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.time)?;
                    },
                    24 => {
                        self.pending_intent_negotiation = is.read_bool()?;
                    },
                    42 => {
                        let len = is.read_raw_varint32()?;
                        let old_limit = is.push_limit(len as u64)?;
                        let mut key = ::std::default::Default::default();
                        let mut value = ::std::default::Default::default();
                        while let Some(tag) = is.read_raw_tag_or_eof()? {
                            match tag {
                                10 => key = is.read_string()?,
                                18 => value = is.read_message()?,
                                _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                            };
                        }
                        is.pop_limit(old_limit);
                        self.state_metadata.insert(key, value);
                    },
                    50 => {
                        self.session_id = is.read_string()?;
                    },
                    58 => {
                        self.feature_flags.push(is.read_message()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.name.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.name);
            }
            if let Some(v) = self.time.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if self.pending_intent_negotiation != false {
                my_size += 1 + 1;
            }
            for (k, v) in &self.state_metadata {
                let mut entry_size = 0;
                entry_size += ::protobuf::rt::string_size(1, &k);
                let len = v.compute_size();
                entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
            };
            if !self.session_id.is_empty() {
                my_size += ::protobuf::rt::string_size(6, &self.session_id);
            }
            for value in &self.feature_flags {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.name.is_empty() {
                os.write_string(1, &self.name)?;
            }
            if let Some(v) = self.time.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            if self.pending_intent_negotiation != false {
                os.write_bool(3, self.pending_intent_negotiation)?;
            }
            for (k, v) in &self.state_metadata {
                let mut entry_size = 0;
                entry_size += ::protobuf::rt::string_size(1, &k);
                let len = v.cached_size() as u64;
                entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                os.write_raw_varint32(42)?; // Tag.
                os.write_raw_varint32(entry_size as u32)?;
                os.write_string(1, &k)?;
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            };
            if !self.session_id.is_empty() {
                os.write_string(6, &self.session_id)?;
            }
            for v in &self.feature_flags {
                ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Artifact {
            Artifact::new()
        }

        fn clear(&mut self) {
            self.name.clear();
            self.time.clear();
            self.pending_intent_negotiation = false;
            self.state_metadata.clear();
            self.session_id.clear();
            self.feature_flags.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Artifact {
            static instance: ::protobuf::rt::Lazy<Artifact> = ::protobuf::rt::Lazy::new();
            instance.get(Artifact::new)
        }
    }

    impl ::protobuf::MessageFull for Artifact {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("ArtifactUploadIndex.Artifact").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Artifact {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Artifact {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n1bitdrift_public/protobuf/client/v1/artifact.proto\x12\"bitdrift_publi\
    c.protobuf.client.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1a1bitdrift\
    _public/protobuf/logging/v1/payload.proto\x1a5bitdrift_public/protobuf/c\
    lient/v1/feature_flag.proto\"\xe0\x04\n\x13ArtifactUploadIndex\x12\\\n\
    \x08artifact\x18\x01\x20\x03(\x0b2@.bitdrift_public.protobuf.client.v1.A\
    rtifactUploadIndex.ArtifactR\x08artifact\x1a\xea\x03\n\x08Artifact\x12\
    \x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12.\n\x04time\x18\x02\x20\
    \x01(\x0b2\x1a.google.protobuf.TimestampR\x04time\x12<\n\x1apending_inte\
    nt_negotiation\x18\x03\x20\x01(\x08R\x18pendingIntentNegotiation\x12z\n\
    \x0estate_metadata\x18\x05\x20\x03(\x0b2S.bitdrift_public.protobuf.clien\
    t.v1.ArtifactUploadIndex.Artifact.StateMetadataEntryR\rstateMetadata\x12\
    \x1d\n\nsession_id\x18\x06\x20\x01(\tR\tsessionId\x12T\n\rfeature_flags\
    \x18\x07\x20\x03(\x0b2/.bitdrift_public.protobuf.client.v1.FeatureFlagR\
    \x0cfeatureFlags\x1ak\n\x12StateMetadataEntry\x12\x10\n\x03key\x18\x01\
    \x20\x01(\tR\x03key\x12?\n\x05value\x18\x02\x20\x01(\x0b2).bitdrift_publ\
    ic.protobuf.logging.v1.DataR\x05value:\x028\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            deps.push(super::payload::file_descriptor().clone());
            deps.push(super::feature_flag::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(ArtifactUploadIndex::generated_message_descriptor_data());
            messages.push(artifact_upload_index::Artifact::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
