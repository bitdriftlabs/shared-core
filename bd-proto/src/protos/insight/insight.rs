// proto - bitdrift's client/server API definitions
// Copyright Bitdrift, Inc. All rights reserved.
//
// Use of this source code and APIs are governed by a source available license that can be found in
// the LICENSE file or at:
// https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt

// This file is generated by rust-protobuf 4.0.0-alpha.0. Do not edit
// .proto file is parsed by protoc 28.1
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `bitdrift_public/protobuf/insight/v1/insight.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_4_0_0_ALPHA_0;

// @@protoc_insertion_point(message:bitdrift_public.protobuf.insight.v1.InsightsConfiguration)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct InsightsConfiguration {
    // message fields
    // @@protoc_insertion_point(field:bitdrift_public.protobuf.insight.v1.InsightsConfiguration.insights)
    pub insights: ::std::vec::Vec<Insight>,
    // special fields
    // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.insight.v1.InsightsConfiguration.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a InsightsConfiguration {
    fn default() -> &'a InsightsConfiguration {
        <InsightsConfiguration as ::protobuf::Message>::default_instance()
    }
}

impl InsightsConfiguration {
    pub fn new() -> InsightsConfiguration {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "insights",
            |m: &InsightsConfiguration| { &m.insights },
            |m: &mut InsightsConfiguration| { &mut m.insights },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<InsightsConfiguration>(
            "InsightsConfiguration",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for InsightsConfiguration {
    const NAME: &'static str = "InsightsConfiguration";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.insights.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.insights {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.insights {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> InsightsConfiguration {
        InsightsConfiguration::new()
    }

    fn clear(&mut self) {
        self.insights.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static InsightsConfiguration {
        static instance: InsightsConfiguration = InsightsConfiguration {
            insights: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for InsightsConfiguration {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("InsightsConfiguration").unwrap()).clone()
    }
}

impl ::std::fmt::Display for InsightsConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InsightsConfiguration {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:bitdrift_public.protobuf.insight.v1.Insight)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Insight {
    // message oneof groups
    pub insight_type: ::std::option::Option<insight::Insight_type>,
    // special fields
    // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.insight.v1.Insight.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Insight {
    fn default() -> &'a Insight {
        <Insight as ::protobuf::Message>::default_instance()
    }
}

impl Insight {
    pub fn new() -> Insight {
        ::std::default::Default::default()
    }

    // .bitdrift_public.protobuf.insight.v1.Insight.LogField log_field = 1;

    pub fn log_field(&self) -> &insight::LogField {
        match self.insight_type {
            ::std::option::Option::Some(insight::Insight_type::LogField(ref v)) => v,
            _ => <insight::LogField as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_log_field(&mut self) {
        self.insight_type = ::std::option::Option::None;
    }

    pub fn has_log_field(&self) -> bool {
        match self.insight_type {
            ::std::option::Option::Some(insight::Insight_type::LogField(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_log_field(&mut self, v: insight::LogField) {
        self.insight_type = ::std::option::Option::Some(insight::Insight_type::LogField(v))
    }

    // Mutable pointer to the field.
    pub fn mut_log_field(&mut self) -> &mut insight::LogField {
        if let ::std::option::Option::Some(insight::Insight_type::LogField(_)) = self.insight_type {
        } else {
            self.insight_type = ::std::option::Option::Some(insight::Insight_type::LogField(insight::LogField::new()));
        }
        match self.insight_type {
            ::std::option::Option::Some(insight::Insight_type::LogField(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_log_field(&mut self) -> insight::LogField {
        if self.has_log_field() {
            match self.insight_type.take() {
                ::std::option::Option::Some(insight::Insight_type::LogField(v)) => v,
                _ => panic!(),
            }
        } else {
            insight::LogField::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, insight::LogField>(
            "log_field",
            Insight::has_log_field,
            Insight::log_field,
            Insight::mut_log_field,
            Insight::set_log_field,
        ));
        oneofs.push(insight::Insight_type::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Insight>(
            "Insight",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Insight {
    const NAME: &'static str = "Insight";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.insight_type = ::std::option::Option::Some(insight::Insight_type::LogField(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.insight_type {
            match v {
                &insight::Insight_type::LogField(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.insight_type {
            match v {
                &insight::Insight_type::LogField(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Insight {
        Insight::new()
    }

    fn clear(&mut self) {
        self.insight_type = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Insight {
        static instance: Insight = Insight {
            insight_type: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Insight {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Insight").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Insight {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Insight {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Insight`
pub mod insight {

    #[derive(Clone,PartialEq,Debug)]
    // @@protoc_insertion_point(oneof:bitdrift_public.protobuf.insight.v1.Insight.insight_type)
    pub enum Insight_type {
        // @@protoc_insertion_point(oneof_field:bitdrift_public.protobuf.insight.v1.Insight.log_field)
        LogField(LogField),
    }

    impl ::protobuf::Oneof for Insight_type {
    }

    impl ::protobuf::OneofFull for Insight_type {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Insight as ::protobuf::MessageFull>::descriptor().oneof_by_name("insight_type").unwrap()).clone()
        }
    }

    impl Insight_type {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Insight_type>("insight_type")
        }
    }
    // @@protoc_insertion_point(message:bitdrift_public.protobuf.insight.v1.Insight.LogField)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct LogField {
        // message fields
        // @@protoc_insertion_point(field:bitdrift_public.protobuf.insight.v1.Insight.LogField.name)
        pub name: ::std::string::String,
        // special fields
        // @@protoc_insertion_point(special_field:bitdrift_public.protobuf.insight.v1.Insight.LogField.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a LogField {
        fn default() -> &'a LogField {
            <LogField as ::protobuf::Message>::default_instance()
        }
    }

    impl LogField {
        pub fn new() -> LogField {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "name",
                |m: &LogField| { &m.name },
                |m: &mut LogField| { &mut m.name },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LogField>(
                "Insight.LogField",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for LogField {
        const NAME: &'static str = "LogField";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.name = is.read_string()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.name.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.name);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.name.is_empty() {
                os.write_string(1, &self.name)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> LogField {
            LogField::new()
        }

        fn clear(&mut self) {
            self.name.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static LogField {
            static instance: LogField = LogField {
                name: ::std::string::String::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for LogField {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Insight.LogField").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for LogField {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for LogField {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n1bitdrift_public/protobuf/insight/v1/insight.proto\x12#bitdrift_public\
    .protobuf.insight.v1\x1a\x17validate/validate.proto\"a\n\x15InsightsConf\
    iguration\x12H\n\x08insights\x18\x01\x20\x03(\x0b2,.bitdrift_public.prot\
    obuf.insight.v1.InsightR\x08insights\"\x9d\x01\n\x07Insight\x12T\n\tlog_\
    field\x18\x01\x20\x01(\x0b25.bitdrift_public.protobuf.insight.v1.Insight\
    .LogFieldH\0R\x08logField\x1a'\n\x08LogField\x12\x1b\n\x04name\x18\x01\
    \x20\x01(\tR\x04nameB\x07\xfaB\x04r\x02\x10\x01B\x13\n\x0cinsight_type\
    \x12\x03\xf8B\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::validate::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(InsightsConfiguration::generated_message_descriptor_data());
            messages.push(Insight::generated_message_descriptor_data());
            messages.push(insight::LogField::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
